# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ApiBidSummariesRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bid_status_code=None, start_date=None, end_date=None, page_size=None, page_nr=None):
        """
        ApiBidSummariesRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bid_status_code': 'int',
            'start_date': 'datetime',
            'end_date': 'datetime',
            'page_size': 'int',
            'page_nr': 'int'
        }

        self.attribute_map = {
            'bid_status_code': 'BidStatusCode',
            'start_date': 'StartDate',
            'end_date': 'EndDate',
            'page_size': 'PageSize',
            'page_nr': 'PageNr'
        }

        self._bid_status_code = bid_status_code
        self._start_date = start_date
        self._end_date = end_date
        self._page_size = page_size
        self._page_nr = page_nr

    @property
    def bid_status_code(self):
        """
        Gets the bid_status_code of this ApiBidSummariesRequest.
        Bid status code

        :return: The bid_status_code of this ApiBidSummariesRequest.
        :rtype: int
        """
        return self._bid_status_code

    @bid_status_code.setter
    def bid_status_code(self, bid_status_code):
        """
        Sets the bid_status_code of this ApiBidSummariesRequest.
        Bid status code

        :param bid_status_code: The bid_status_code of this ApiBidSummariesRequest.
        :type: int
        """
        allowed_values = ["0", "1", "2", "3", "4", "5"]
        if bid_status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `bid_status_code` ({0}), must be one of {1}"
                .format(bid_status_code, allowed_values)
            )

        self._bid_status_code = bid_status_code

    @property
    def start_date(self):
        """
        Gets the start_date of this ApiBidSummariesRequest.
        Start date

        :return: The start_date of this ApiBidSummariesRequest.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this ApiBidSummariesRequest.
        Start date

        :param start_date: The start_date of this ApiBidSummariesRequest.
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this ApiBidSummariesRequest.
        End date

        :return: The end_date of this ApiBidSummariesRequest.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this ApiBidSummariesRequest.
        End date

        :param end_date: The end_date of this ApiBidSummariesRequest.
        :type: datetime
        """

        self._end_date = end_date

    @property
    def page_size(self):
        """
        Gets the page_size of this ApiBidSummariesRequest.
        Max items in result, default is 1000

        :return: The page_size of this ApiBidSummariesRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this ApiBidSummariesRequest.
        Max items in result, default is 1000

        :param page_size: The page_size of this ApiBidSummariesRequest.
        :type: int
        """

        if not page_size:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size > 1000.0:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000.0`")
        if page_size < 1.0:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1.0`")

        self._page_size = page_size

    @property
    def page_nr(self):
        """
        Gets the page_nr of this ApiBidSummariesRequest.
        Result page nr

        :return: The page_nr of this ApiBidSummariesRequest.
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """
        Sets the page_nr of this ApiBidSummariesRequest.
        Result page nr

        :param page_nr: The page_nr of this ApiBidSummariesRequest.
        :type: int
        """

        if not page_nr:
            raise ValueError("Invalid value for `page_nr`, must not be `None`")
        if page_nr > 2.147483647E9:
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2.147483647E9`")
        if page_nr < 1.0:
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1.0`")

        self._page_nr = page_nr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
