# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Liability(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_refinanced=None, type_of_liability=None, creditor=None, monthly_payment=None, outstanding=None, collateral_type=None):
        """
        Liability - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_refinanced': 'bool',
            'type_of_liability': 'int',
            'creditor': 'str',
            'monthly_payment': 'float',
            'outstanding': 'float',
            'collateral_type': 'int'
        }

        self.attribute_map = {
            'is_refinanced': 'IsRefinanced',
            'type_of_liability': 'TypeOfLiability',
            'creditor': 'Creditor',
            'monthly_payment': 'MonthlyPayment',
            'outstanding': 'Outstanding',
            'collateral_type': 'CollateralType'
        }

        self._is_refinanced = is_refinanced
        self._type_of_liability = type_of_liability
        self._creditor = creditor
        self._monthly_payment = monthly_payment
        self._outstanding = outstanding
        self._collateral_type = collateral_type

    @property
    def is_refinanced(self):
        """
        Gets the is_refinanced of this Liability.
        Is refinanced              <para>Only Value for new Auctions since 1st of june 2017 is false</para>

        :return: The is_refinanced of this Liability.
        :rtype: bool
        """
        return self._is_refinanced

    @is_refinanced.setter
    def is_refinanced(self, is_refinanced):
        """
        Sets the is_refinanced of this Liability.
        Is refinanced              <para>Only Value for new Auctions since 1st of june 2017 is false</para>

        :param is_refinanced: The is_refinanced of this Liability.
        :type: bool
        """

        self._is_refinanced = is_refinanced

    @property
    def type_of_liability(self):
        """
        Gets the type_of_liability of this Liability.
        Type of liability              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :return: The type_of_liability of this Liability.
        :rtype: int
        """
        return self._type_of_liability

    @type_of_liability.setter
    def type_of_liability(self, type_of_liability):
        """
        Sets the type_of_liability of this Liability.
        Type of liability              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :param type_of_liability: The type_of_liability of this Liability.
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 101, 102, 103, 104, 105, 106, 107, -1]
        if type_of_liability not in allowed_values:
            raise ValueError(
                "Invalid value for `type_of_liability` ({0}), must be one of {1}"
                .format(type_of_liability, allowed_values)
            )

        self._type_of_liability = type_of_liability

    @property
    def creditor(self):
        """
        Gets the creditor of this Liability.
        Creditor

        :return: The creditor of this Liability.
        :rtype: str
        """
        return self._creditor

    @creditor.setter
    def creditor(self, creditor):
        """
        Sets the creditor of this Liability.
        Creditor

        :param creditor: The creditor of this Liability.
        :type: str
        """

        self._creditor = creditor

    @property
    def monthly_payment(self):
        """
        Gets the monthly_payment of this Liability.
        Monthly payment

        :return: The monthly_payment of this Liability.
        :rtype: float
        """
        return self._monthly_payment

    @monthly_payment.setter
    def monthly_payment(self, monthly_payment):
        """
        Sets the monthly_payment of this Liability.
        Monthly payment

        :param monthly_payment: The monthly_payment of this Liability.
        :type: float
        """

        self._monthly_payment = monthly_payment

    @property
    def outstanding(self):
        """
        Gets the outstanding of this Liability.
        Outstanding              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>

        :return: The outstanding of this Liability.
        :rtype: float
        """
        return self._outstanding

    @outstanding.setter
    def outstanding(self, outstanding):
        """
        Sets the outstanding of this Liability.
        Outstanding              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>

        :param outstanding: The outstanding of this Liability.
        :type: float
        """

        self._outstanding = outstanding

    @property
    def collateral_type(self):
        """
        Gets the collateral_type of this Liability.
        Type of collateral              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :return: The collateral_type of this Liability.
        :rtype: int
        """
        return self._collateral_type

    @collateral_type.setter
    def collateral_type(self, collateral_type):
        """
        Sets the collateral_type of this Liability.
        Type of collateral              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :param collateral_type: The collateral_type of this Liability.
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, -1]
        if collateral_type not in allowed_values:
            raise ValueError(
                "Invalid value for `collateral_type` ({0}), must be one of {1}"
                .format(collateral_type, allowed_values)
            )

        self._collateral_type = collateral_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
