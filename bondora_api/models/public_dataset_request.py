# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PublicDatasetRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, loan_ids=None, countries=None, ratings=None, loan_date_from=None, loan_date_to=None, page_size=None, page_nr=None):
        """
        PublicDatasetRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'loan_ids': 'list[str]',
            'countries': 'list[str]',
            'ratings': 'list[str]',
            'loan_date_from': 'datetime',
            'loan_date_to': 'datetime',
            'page_size': 'int',
            'page_nr': 'int'
        }

        self.attribute_map = {
            'loan_ids': 'LoanIds',
            'countries': 'Countries',
            'ratings': 'Ratings',
            'loan_date_from': 'LoanDateFrom',
            'loan_date_to': 'LoanDateTo',
            'page_size': 'PageSize',
            'page_nr': 'PageNr'
        }

        self._loan_ids = loan_ids
        self._countries = countries
        self._ratings = ratings
        self._loan_date_from = loan_date_from
        self._loan_date_to = loan_date_to
        self._page_size = page_size
        self._page_nr = page_nr

    @property
    def loan_ids(self):
        """
        Gets the loan_ids of this PublicDatasetRequest.
        Specific loans to search

        :return: The loan_ids of this PublicDatasetRequest.
        :rtype: list[str]
        """
        return self._loan_ids

    @loan_ids.setter
    def loan_ids(self, loan_ids):
        """
        Sets the loan_ids of this PublicDatasetRequest.
        Specific loans to search

        :param loan_ids: The loan_ids of this PublicDatasetRequest.
        :type: list[str]
        """

        self._loan_ids = loan_ids

    @property
    def countries(self):
        """
        Gets the countries of this PublicDatasetRequest.
        Two letter iso code for country of origin: EE, ES, FI

        :return: The countries of this PublicDatasetRequest.
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this PublicDatasetRequest.
        Two letter iso code for country of origin: EE, ES, FI

        :param countries: The countries of this PublicDatasetRequest.
        :type: list[str]
        """

        self._countries = countries

    @property
    def ratings(self):
        """
        Gets the ratings of this PublicDatasetRequest.
        Bondora's rating: AA, A, B, C, D, E, F, HR

        :return: The ratings of this PublicDatasetRequest.
        :rtype: list[str]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """
        Sets the ratings of this PublicDatasetRequest.
        Bondora's rating: AA, A, B, C, D, E, F, HR

        :param ratings: The ratings of this PublicDatasetRequest.
        :type: list[str]
        """

        self._ratings = ratings

    @property
    def loan_date_from(self):
        """
        Gets the loan_date_from of this PublicDatasetRequest.
        Loan start date from

        :return: The loan_date_from of this PublicDatasetRequest.
        :rtype: datetime
        """
        return self._loan_date_from

    @loan_date_from.setter
    def loan_date_from(self, loan_date_from):
        """
        Sets the loan_date_from of this PublicDatasetRequest.
        Loan start date from

        :param loan_date_from: The loan_date_from of this PublicDatasetRequest.
        :type: datetime
        """

        self._loan_date_from = loan_date_from

    @property
    def loan_date_to(self):
        """
        Gets the loan_date_to of this PublicDatasetRequest.
        Loan start date to

        :return: The loan_date_to of this PublicDatasetRequest.
        :rtype: datetime
        """
        return self._loan_date_to

    @loan_date_to.setter
    def loan_date_to(self, loan_date_to):
        """
        Sets the loan_date_to of this PublicDatasetRequest.
        Loan start date to

        :param loan_date_to: The loan_date_to of this PublicDatasetRequest.
        :type: datetime
        """

        self._loan_date_to = loan_date_to

    @property
    def page_size(self):
        """
        Gets the page_size of this PublicDatasetRequest.
        Max items in result, default is 1000

        :return: The page_size of this PublicDatasetRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this PublicDatasetRequest.
        Max items in result, default is 1000

        :param page_size: The page_size of this PublicDatasetRequest.
        :type: int
        """

        if not page_size:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size > 10000.0:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `10000.0`")
        if page_size < 1.0:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1.0`")

        self._page_size = page_size

    @property
    def page_nr(self):
        """
        Gets the page_nr of this PublicDatasetRequest.
        Result page nr

        :return: The page_nr of this PublicDatasetRequest.
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """
        Sets the page_nr of this PublicDatasetRequest.
        Result page nr

        :param page_nr: The page_nr of this PublicDatasetRequest.
        :type: int
        """

        if not page_nr:
            raise ValueError("Invalid value for `page_nr`, must not be `None`")
        if page_nr > 2.147483647E9:
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2.147483647E9`")
        if page_nr < 1.0:
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1.0`")

        self._page_nr = page_nr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
