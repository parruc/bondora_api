# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BorrowerHistory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, overdue=None, principal_repaid=None, interest_repaid=None, late_charges_repaid=None, repaiments_total=None, issued_loans=None, issued_loan_amount=None):
        """
        BorrowerHistory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'overdue': 'float',
            'principal_repaid': 'float',
            'interest_repaid': 'float',
            'late_charges_repaid': 'float',
            'repaiments_total': 'float',
            'issued_loans': 'int',
            'issued_loan_amount': 'float'
        }

        self.attribute_map = {
            'overdue': 'Overdue',
            'principal_repaid': 'PrincipalRepaid',
            'interest_repaid': 'InterestRepaid',
            'late_charges_repaid': 'LateChargesRepaid',
            'repaiments_total': 'RepaimentsTotal',
            'issued_loans': 'IssuedLoans',
            'issued_loan_amount': 'IssuedLoanAmount'
        }

        self._overdue = overdue
        self._principal_repaid = principal_repaid
        self._interest_repaid = interest_repaid
        self._late_charges_repaid = late_charges_repaid
        self._repaiments_total = repaiments_total
        self._issued_loans = issued_loans
        self._issued_loan_amount = issued_loan_amount

    @property
    def overdue(self):
        """
        Gets the overdue of this BorrowerHistory.
        Borrower's current overdue amount

        :return: The overdue of this BorrowerHistory.
        :rtype: float
        """
        return self._overdue

    @overdue.setter
    def overdue(self, overdue):
        """
        Sets the overdue of this BorrowerHistory.
        Borrower's current overdue amount

        :param overdue: The overdue of this BorrowerHistory.
        :type: float
        """

        self._overdue = overdue

    @property
    def principal_repaid(self):
        """
        Gets the principal_repaid of this BorrowerHistory.
        Borrower's total principal repaid

        :return: The principal_repaid of this BorrowerHistory.
        :rtype: float
        """
        return self._principal_repaid

    @principal_repaid.setter
    def principal_repaid(self, principal_repaid):
        """
        Sets the principal_repaid of this BorrowerHistory.
        Borrower's total principal repaid

        :param principal_repaid: The principal_repaid of this BorrowerHistory.
        :type: float
        """

        self._principal_repaid = principal_repaid

    @property
    def interest_repaid(self):
        """
        Gets the interest_repaid of this BorrowerHistory.
        Borrower's total interest paid

        :return: The interest_repaid of this BorrowerHistory.
        :rtype: float
        """
        return self._interest_repaid

    @interest_repaid.setter
    def interest_repaid(self, interest_repaid):
        """
        Sets the interest_repaid of this BorrowerHistory.
        Borrower's total interest paid

        :param interest_repaid: The interest_repaid of this BorrowerHistory.
        :type: float
        """

        self._interest_repaid = interest_repaid

    @property
    def late_charges_repaid(self):
        """
        Gets the late_charges_repaid of this BorrowerHistory.
        Borrower's total late charges paid

        :return: The late_charges_repaid of this BorrowerHistory.
        :rtype: float
        """
        return self._late_charges_repaid

    @late_charges_repaid.setter
    def late_charges_repaid(self, late_charges_repaid):
        """
        Sets the late_charges_repaid of this BorrowerHistory.
        Borrower's total late charges paid

        :param late_charges_repaid: The late_charges_repaid of this BorrowerHistory.
        :type: float
        """

        self._late_charges_repaid = late_charges_repaid

    @property
    def repaiments_total(self):
        """
        Gets the repaiments_total of this BorrowerHistory.
        Borrower's total repaiments

        :return: The repaiments_total of this BorrowerHistory.
        :rtype: float
        """
        return self._repaiments_total

    @repaiments_total.setter
    def repaiments_total(self, repaiments_total):
        """
        Sets the repaiments_total of this BorrowerHistory.
        Borrower's total repaiments

        :param repaiments_total: The repaiments_total of this BorrowerHistory.
        :type: float
        """

        self._repaiments_total = repaiments_total

    @property
    def issued_loans(self):
        """
        Gets the issued_loans of this BorrowerHistory.
        Borrower's issued loans count

        :return: The issued_loans of this BorrowerHistory.
        :rtype: int
        """
        return self._issued_loans

    @issued_loans.setter
    def issued_loans(self, issued_loans):
        """
        Sets the issued_loans of this BorrowerHistory.
        Borrower's issued loans count

        :param issued_loans: The issued_loans of this BorrowerHistory.
        :type: int
        """

        self._issued_loans = issued_loans

    @property
    def issued_loan_amount(self):
        """
        Gets the issued_loan_amount of this BorrowerHistory.
        Borrower's issued loans amount

        :return: The issued_loan_amount of this BorrowerHistory.
        :rtype: float
        """
        return self._issued_loan_amount

    @issued_loan_amount.setter
    def issued_loan_amount(self, issued_loan_amount):
        """
        Sets the issued_loan_amount of this BorrowerHistory.
        Borrower's issued loans amount

        :param issued_loan_amount: The issued_loan_amount of this BorrowerHistory.
        :type: float
        """

        self._issued_loan_amount = issued_loan_amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
