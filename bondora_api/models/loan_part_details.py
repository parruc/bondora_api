# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoanPartDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, loan_part_id=None, amount=None, auction_id=None, auction_name=None, auction_number=None, auction_bid_number=None, country=None, credit_score=None, credit_score_es_micro_l=None, credit_score_es_equifax_risk=None, credit_score_fi_asiakas_tieto_risk_grade=None, credit_score_ee_mini=None, rating=None, initial_interest=None, interest=None, use_of_loan=None, income_verification_status=None, loan_id=None, loan_status_code=None, user_name=None, gender=None, date_of_birth=None, signed_date=None, re_scheduled_on=None, debt_occured_on=None, debt_occured_on_for_secondary=None, loan_duration=None, next_payment_nr=None, next_payment_date=None, next_payment_sum=None, nr_of_scheduled_payments=None, last_payment_date=None, principal_repaid=None, interest_repaid=None, late_amount_paid=None, principal_late_amount=None, interest_late_amount=None, penalty_late_amount=None, principal_write_off_amount=None, interest_write_off_amount=None, penalty_write_off_amount=None, debt_servicing_cost_main_amount=None, debt_servicing_cost_interest_amount=None, debt_servicing_cost_penalty_amount=None, repaid_principal_current_owner=None, repaid_interests_current_owner=None, late_charges_paid_current_owner=None, repaid_total_current_owner=None, total_repaid=None, debt_managment_events=None, loan_transfers=None, scheduled_payments=None):
        """
        LoanPartDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'loan_part_id': 'str',
            'amount': 'float',
            'auction_id': 'str',
            'auction_name': 'str',
            'auction_number': 'int',
            'auction_bid_number': 'int',
            'country': 'str',
            'credit_score': 'float',
            'credit_score_es_micro_l': 'str',
            'credit_score_es_equifax_risk': 'str',
            'credit_score_fi_asiakas_tieto_risk_grade': 'str',
            'credit_score_ee_mini': 'str',
            'rating': 'str',
            'initial_interest': 'float',
            'interest': 'float',
            'use_of_loan': 'int',
            'income_verification_status': 'int',
            'loan_id': 'str',
            'loan_status_code': 'int',
            'user_name': 'str',
            'gender': 'int',
            'date_of_birth': 'datetime',
            'signed_date': 'datetime',
            're_scheduled_on': 'datetime',
            'debt_occured_on': 'datetime',
            'debt_occured_on_for_secondary': 'datetime',
            'loan_duration': 'int',
            'next_payment_nr': 'int',
            'next_payment_date': 'datetime',
            'next_payment_sum': 'float',
            'nr_of_scheduled_payments': 'int',
            'last_payment_date': 'datetime',
            'principal_repaid': 'float',
            'interest_repaid': 'float',
            'late_amount_paid': 'float',
            'principal_remaining': 'float',
            'principal_late_amount': 'float',
            'interest_late_amount': 'float',
            'penalty_late_amount': 'float',
            'late_amount_total': 'float',
            'principal_write_off_amount': 'float',
            'interest_write_off_amount': 'float',
            'penalty_write_off_amount': 'float',
            'write_off_total': 'float',
            'debt_servicing_cost_main_amount': 'float',
            'debt_servicing_cost_interest_amount': 'float',
            'debt_servicing_cost_penalty_amount': 'float',
            'debt_servicing_cost_total': 'float',
            'repaid_principal_current_owner': 'float',
            'repaid_interests_current_owner': 'float',
            'late_charges_paid_current_owner': 'float',
            'repaid_total_current_owner': 'float',
            'total_repaid': 'float',
            'debt_managment_events': 'list[DebtManagementEvent]',
            'loan_transfers': 'list[LoanTransfer]',
            'scheduled_payments': 'list[ScheduledPayment]'
        }

        self.attribute_map = {
            'loan_part_id': 'LoanPartId',
            'amount': 'Amount',
            'auction_id': 'AuctionId',
            'auction_name': 'AuctionName',
            'auction_number': 'AuctionNumber',
            'auction_bid_number': 'AuctionBidNumber',
            'country': 'Country',
            'credit_score': 'CreditScore',
            'credit_score_es_micro_l': 'CreditScoreEsMicroL',
            'credit_score_es_equifax_risk': 'CreditScoreEsEquifaxRisk',
            'credit_score_fi_asiakas_tieto_risk_grade': 'CreditScoreFiAsiakasTietoRiskGrade',
            'credit_score_ee_mini': 'CreditScoreEeMini',
            'rating': 'Rating',
            'initial_interest': 'InitialInterest',
            'interest': 'Interest',
            'use_of_loan': 'UseOfLoan',
            'income_verification_status': 'IncomeVerificationStatus',
            'loan_id': 'LoanId',
            'loan_status_code': 'LoanStatusCode',
            'user_name': 'UserName',
            'gender': 'Gender',
            'date_of_birth': 'DateOfBirth',
            'signed_date': 'SignedDate',
            're_scheduled_on': 'ReScheduledOn',
            'debt_occured_on': 'DebtOccuredOn',
            'debt_occured_on_for_secondary': 'DebtOccuredOnForSecondary',
            'loan_duration': 'LoanDuration',
            'next_payment_nr': 'NextPaymentNr',
            'next_payment_date': 'NextPaymentDate',
            'next_payment_sum': 'NextPaymentSum',
            'nr_of_scheduled_payments': 'NrOfScheduledPayments',
            'last_payment_date': 'LastPaymentDate',
            'principal_repaid': 'PrincipalRepaid',
            'interest_repaid': 'InterestRepaid',
            'late_amount_paid': 'LateAmountPaid',
            'principal_remaining': 'PrincipalRemaining',
            'principal_late_amount': 'PrincipalLateAmount',
            'interest_late_amount': 'InterestLateAmount',
            'penalty_late_amount': 'PenaltyLateAmount',
            'late_amount_total': 'LateAmountTotal',
            'principal_write_off_amount': 'PrincipalWriteOffAmount',
            'interest_write_off_amount': 'InterestWriteOffAmount',
            'penalty_write_off_amount': 'PenaltyWriteOffAmount',
            'write_off_total': 'WriteOffTotal',
            'debt_servicing_cost_main_amount': 'DebtServicingCostMainAmount',
            'debt_servicing_cost_interest_amount': 'DebtServicingCostInterestAmount',
            'debt_servicing_cost_penalty_amount': 'DebtServicingCostPenaltyAmount',
            'debt_servicing_cost_total': 'DebtServicingCostTotal',
            'repaid_principal_current_owner': 'RepaidPrincipalCurrentOwner',
            'repaid_interests_current_owner': 'RepaidInterestsCurrentOwner',
            'late_charges_paid_current_owner': 'LateChargesPaidCurrentOwner',
            'repaid_total_current_owner': 'RepaidTotalCurrentOwner',
            'total_repaid': 'TotalRepaid',
            'debt_managment_events': 'DebtManagmentEvents',
            'loan_transfers': 'LoanTransfers',
            'scheduled_payments': 'ScheduledPayments'
        }

        self._principal_remaining = None
        self._late_amount_total = None
        self._write_off_total = None
        self._debt_servicing_cost_total = None
        self._loan_part_id = loan_part_id
        self._amount = amount
        self._auction_id = auction_id
        self._auction_name = auction_name
        self._auction_number = auction_number
        self._auction_bid_number = auction_bid_number
        self._country = country
        self._credit_score = credit_score
        self._credit_score_es_micro_l = credit_score_es_micro_l
        self._credit_score_es_equifax_risk = credit_score_es_equifax_risk
        self._credit_score_fi_asiakas_tieto_risk_grade = credit_score_fi_asiakas_tieto_risk_grade
        self._credit_score_ee_mini = credit_score_ee_mini
        self._rating = rating
        self._initial_interest = initial_interest
        self._interest = interest
        self._use_of_loan = use_of_loan
        self._income_verification_status = income_verification_status
        self._loan_id = loan_id
        self._loan_status_code = loan_status_code
        self._user_name = user_name
        self._gender = gender
        self._date_of_birth = date_of_birth
        self._signed_date = signed_date
        self._re_scheduled_on = re_scheduled_on
        self._debt_occured_on = debt_occured_on
        self._debt_occured_on_for_secondary = debt_occured_on_for_secondary
        self._loan_duration = loan_duration
        self._next_payment_nr = next_payment_nr
        self._next_payment_date = next_payment_date
        self._next_payment_sum = next_payment_sum
        self._nr_of_scheduled_payments = nr_of_scheduled_payments
        self._last_payment_date = last_payment_date
        self._principal_repaid = principal_repaid
        self._interest_repaid = interest_repaid
        self._late_amount_paid = late_amount_paid
        self._principal_late_amount = principal_late_amount
        self._interest_late_amount = interest_late_amount
        self._penalty_late_amount = penalty_late_amount
        self._principal_write_off_amount = principal_write_off_amount
        self._interest_write_off_amount = interest_write_off_amount
        self._penalty_write_off_amount = penalty_write_off_amount
        self._debt_servicing_cost_main_amount = debt_servicing_cost_main_amount
        self._debt_servicing_cost_interest_amount = debt_servicing_cost_interest_amount
        self._debt_servicing_cost_penalty_amount = debt_servicing_cost_penalty_amount
        self._repaid_principal_current_owner = repaid_principal_current_owner
        self._repaid_interests_current_owner = repaid_interests_current_owner
        self._late_charges_paid_current_owner = late_charges_paid_current_owner
        self._repaid_total_current_owner = repaid_total_current_owner
        self._total_repaid = total_repaid
        self._debt_managment_events = debt_managment_events
        self._loan_transfers = loan_transfers
        self._scheduled_payments = scheduled_payments

    @property
    def loan_part_id(self):
        """
        Gets the loan_part_id of this LoanPartDetails.
        LoanPart unique identifier

        :return: The loan_part_id of this LoanPartDetails.
        :rtype: str
        """
        return self._loan_part_id

    @loan_part_id.setter
    def loan_part_id(self, loan_part_id):
        """
        Sets the loan_part_id of this LoanPartDetails.
        LoanPart unique identifier

        :param loan_part_id: The loan_part_id of this LoanPartDetails.
        :type: str
        """

        self._loan_part_id = loan_part_id

    @property
    def amount(self):
        """
        Gets the amount of this LoanPartDetails.
        Investment amount

        :return: The amount of this LoanPartDetails.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this LoanPartDetails.
        Investment amount

        :param amount: The amount of this LoanPartDetails.
        :type: float
        """

        self._amount = amount

    @property
    def auction_id(self):
        """
        Gets the auction_id of this LoanPartDetails.
        Auction unique identifier

        :return: The auction_id of this LoanPartDetails.
        :rtype: str
        """
        return self._auction_id

    @auction_id.setter
    def auction_id(self, auction_id):
        """
        Sets the auction_id of this LoanPartDetails.
        Auction unique identifier

        :param auction_id: The auction_id of this LoanPartDetails.
        :type: str
        """

        self._auction_id = auction_id

    @property
    def auction_name(self):
        """
        Gets the auction_name of this LoanPartDetails.
        Auction name

        :return: The auction_name of this LoanPartDetails.
        :rtype: str
        """
        return self._auction_name

    @auction_name.setter
    def auction_name(self, auction_name):
        """
        Sets the auction_name of this LoanPartDetails.
        Auction name

        :param auction_name: The auction_name of this LoanPartDetails.
        :type: str
        """

        self._auction_name = auction_name

    @property
    def auction_number(self):
        """
        Gets the auction_number of this LoanPartDetails.
        Auction number

        :return: The auction_number of this LoanPartDetails.
        :rtype: int
        """
        return self._auction_number

    @auction_number.setter
    def auction_number(self, auction_number):
        """
        Sets the auction_number of this LoanPartDetails.
        Auction number

        :param auction_number: The auction_number of this LoanPartDetails.
        :type: int
        """

        self._auction_number = auction_number

    @property
    def auction_bid_number(self):
        """
        Gets the auction_bid_number of this LoanPartDetails.
        Auction bid number

        :return: The auction_bid_number of this LoanPartDetails.
        :rtype: int
        """
        return self._auction_bid_number

    @auction_bid_number.setter
    def auction_bid_number(self, auction_bid_number):
        """
        Sets the auction_bid_number of this LoanPartDetails.
        Auction bid number

        :param auction_bid_number: The auction_bid_number of this LoanPartDetails.
        :type: int
        """

        self._auction_bid_number = auction_bid_number

    @property
    def country(self):
        """
        Gets the country of this LoanPartDetails.
        Residency of the borrower

        :return: The country of this LoanPartDetails.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this LoanPartDetails.
        Residency of the borrower

        :param country: The country of this LoanPartDetails.
        :type: str
        """

        self._country = country

    @property
    def credit_score(self):
        """
        Gets the credit_score of this LoanPartDetails.
        <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>

        :return: The credit_score of this LoanPartDetails.
        :rtype: float
        """
        return self._credit_score

    @credit_score.setter
    def credit_score(self, credit_score):
        """
        Sets the credit_score of this LoanPartDetails.
        <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>

        :param credit_score: The credit_score of this LoanPartDetails.
        :type: float
        """

        self._credit_score = credit_score

    @property
    def credit_score_es_micro_l(self):
        """
        Gets the credit_score_es_micro_l of this LoanPartDetails.
        A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>

        :return: The credit_score_es_micro_l of this LoanPartDetails.
        :rtype: str
        """
        return self._credit_score_es_micro_l

    @credit_score_es_micro_l.setter
    def credit_score_es_micro_l(self, credit_score_es_micro_l):
        """
        Sets the credit_score_es_micro_l of this LoanPartDetails.
        A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>

        :param credit_score_es_micro_l: The credit_score_es_micro_l of this LoanPartDetails.
        :type: str
        """

        self._credit_score_es_micro_l = credit_score_es_micro_l

    @property
    def credit_score_es_equifax_risk(self):
        """
        Gets the credit_score_es_equifax_risk of this LoanPartDetails.
        Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>

        :return: The credit_score_es_equifax_risk of this LoanPartDetails.
        :rtype: str
        """
        return self._credit_score_es_equifax_risk

    @credit_score_es_equifax_risk.setter
    def credit_score_es_equifax_risk(self, credit_score_es_equifax_risk):
        """
        Sets the credit_score_es_equifax_risk of this LoanPartDetails.
        Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>

        :param credit_score_es_equifax_risk: The credit_score_es_equifax_risk of this LoanPartDetails.
        :type: str
        """

        self._credit_score_es_equifax_risk = credit_score_es_equifax_risk

    @property
    def credit_score_fi_asiakas_tieto_risk_grade(self):
        """
        Gets the credit_score_fi_asiakas_tieto_risk_grade of this LoanPartDetails.
        Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>

        :return: The credit_score_fi_asiakas_tieto_risk_grade of this LoanPartDetails.
        :rtype: str
        """
        return self._credit_score_fi_asiakas_tieto_risk_grade

    @credit_score_fi_asiakas_tieto_risk_grade.setter
    def credit_score_fi_asiakas_tieto_risk_grade(self, credit_score_fi_asiakas_tieto_risk_grade):
        """
        Sets the credit_score_fi_asiakas_tieto_risk_grade of this LoanPartDetails.
        Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>

        :param credit_score_fi_asiakas_tieto_risk_grade: The credit_score_fi_asiakas_tieto_risk_grade of this LoanPartDetails.
        :type: str
        """

        self._credit_score_fi_asiakas_tieto_risk_grade = credit_score_fi_asiakas_tieto_risk_grade

    @property
    def credit_score_ee_mini(self):
        """
        Gets the credit_score_ee_mini of this LoanPartDetails.
        Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>

        :return: The credit_score_ee_mini of this LoanPartDetails.
        :rtype: str
        """
        return self._credit_score_ee_mini

    @credit_score_ee_mini.setter
    def credit_score_ee_mini(self, credit_score_ee_mini):
        """
        Sets the credit_score_ee_mini of this LoanPartDetails.
        Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>

        :param credit_score_ee_mini: The credit_score_ee_mini of this LoanPartDetails.
        :type: str
        """

        self._credit_score_ee_mini = credit_score_ee_mini

    @property
    def rating(self):
        """
        Gets the rating of this LoanPartDetails.
        Bondora Rating issued by the Rating model

        :return: The rating of this LoanPartDetails.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """
        Sets the rating of this LoanPartDetails.
        Bondora Rating issued by the Rating model

        :param rating: The rating of this LoanPartDetails.
        :type: str
        """

        self._rating = rating

    @property
    def initial_interest(self):
        """
        Gets the initial_interest of this LoanPartDetails.
        Initial interest rate

        :return: The initial_interest of this LoanPartDetails.
        :rtype: float
        """
        return self._initial_interest

    @initial_interest.setter
    def initial_interest(self, initial_interest):
        """
        Sets the initial_interest of this LoanPartDetails.
        Initial interest rate

        :param initial_interest: The initial_interest of this LoanPartDetails.
        :type: float
        """

        self._initial_interest = initial_interest

    @property
    def interest(self):
        """
        Gets the interest of this LoanPartDetails.
        Current interest rate

        :return: The interest of this LoanPartDetails.
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """
        Sets the interest of this LoanPartDetails.
        Current interest rate

        :param interest: The interest of this LoanPartDetails.
        :type: float
        """

        self._interest = interest

    @property
    def use_of_loan(self):
        """
        Gets the use_of_loan of this LoanPartDetails.
        Use of loan

        :return: The use_of_loan of this LoanPartDetails.
        :rtype: int
        """
        return self._use_of_loan

    @use_of_loan.setter
    def use_of_loan(self, use_of_loan):
        """
        Sets the use_of_loan of this LoanPartDetails.
        Use of loan

        :param use_of_loan: The use_of_loan of this LoanPartDetails.
        :type: int
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "-1"]
        if use_of_loan not in allowed_values:
            raise ValueError(
                "Invalid value for `use_of_loan` ({0}), must be one of {1}"
                .format(use_of_loan, allowed_values)
            )

        self._use_of_loan = use_of_loan

    @property
    def income_verification_status(self):
        """
        Gets the income_verification_status of this LoanPartDetails.
        Income verification type

        :return: The income_verification_status of this LoanPartDetails.
        :rtype: int
        """
        return self._income_verification_status

    @income_verification_status.setter
    def income_verification_status(self, income_verification_status):
        """
        Sets the income_verification_status of this LoanPartDetails.
        Income verification type

        :param income_verification_status: The income_verification_status of this LoanPartDetails.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4"]
        if income_verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `income_verification_status` ({0}), must be one of {1}"
                .format(income_verification_status, allowed_values)
            )

        self._income_verification_status = income_verification_status

    @property
    def loan_id(self):
        """
        Gets the loan_id of this LoanPartDetails.
        Loan unique identifier

        :return: The loan_id of this LoanPartDetails.
        :rtype: str
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """
        Sets the loan_id of this LoanPartDetails.
        Loan unique identifier

        :param loan_id: The loan_id of this LoanPartDetails.
        :type: str
        """

        self._loan_id = loan_id

    @property
    def loan_status_code(self):
        """
        Gets the loan_status_code of this LoanPartDetails.
        Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>

        :return: The loan_status_code of this LoanPartDetails.
        :rtype: int
        """
        return self._loan_status_code

    @loan_status_code.setter
    def loan_status_code(self, loan_status_code):
        """
        Sets the loan_status_code of this LoanPartDetails.
        Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>

        :param loan_status_code: The loan_status_code of this LoanPartDetails.
        :type: int
        """

        self._loan_status_code = loan_status_code

    @property
    def user_name(self):
        """
        Gets the user_name of this LoanPartDetails.
        Borrower's username

        :return: The user_name of this LoanPartDetails.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this LoanPartDetails.
        Borrower's username

        :param user_name: The user_name of this LoanPartDetails.
        :type: str
        """

        self._user_name = user_name

    @property
    def gender(self):
        """
        Gets the gender of this LoanPartDetails.
        Borrower's Gender

        :return: The gender of this LoanPartDetails.
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this LoanPartDetails.
        Borrower's Gender

        :param gender: The gender of this LoanPartDetails.
        :type: int
        """
        allowed_values = ["0", "1", "2"]
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this LoanPartDetails.
        Borrower's date of birth

        :return: The date_of_birth of this LoanPartDetails.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this LoanPartDetails.
        Borrower's date of birth

        :param date_of_birth: The date_of_birth of this LoanPartDetails.
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def signed_date(self):
        """
        Gets the signed_date of this LoanPartDetails.
        Loan issued date

        :return: The signed_date of this LoanPartDetails.
        :rtype: datetime
        """
        return self._signed_date

    @signed_date.setter
    def signed_date(self, signed_date):
        """
        Sets the signed_date of this LoanPartDetails.
        Loan issued date

        :param signed_date: The signed_date of this LoanPartDetails.
        :type: datetime
        """

        self._signed_date = signed_date

    @property
    def re_scheduled_on(self):
        """
        Gets the re_scheduled_on of this LoanPartDetails.
        Last rescheduling date

        :return: The re_scheduled_on of this LoanPartDetails.
        :rtype: datetime
        """
        return self._re_scheduled_on

    @re_scheduled_on.setter
    def re_scheduled_on(self, re_scheduled_on):
        """
        Sets the re_scheduled_on of this LoanPartDetails.
        Last rescheduling date

        :param re_scheduled_on: The re_scheduled_on of this LoanPartDetails.
        :type: datetime
        """

        self._re_scheduled_on = re_scheduled_on

    @property
    def debt_occured_on(self):
        """
        Gets the debt_occured_on of this LoanPartDetails.
        Debt occured on date

        :return: The debt_occured_on of this LoanPartDetails.
        :rtype: datetime
        """
        return self._debt_occured_on

    @debt_occured_on.setter
    def debt_occured_on(self, debt_occured_on):
        """
        Sets the debt_occured_on of this LoanPartDetails.
        Debt occured on date

        :param debt_occured_on: The debt_occured_on of this LoanPartDetails.
        :type: datetime
        """

        self._debt_occured_on = debt_occured_on

    @property
    def debt_occured_on_for_secondary(self):
        """
        Gets the debt_occured_on_for_secondary of this LoanPartDetails.
        Debt occured on date

        :return: The debt_occured_on_for_secondary of this LoanPartDetails.
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary

    @debt_occured_on_for_secondary.setter
    def debt_occured_on_for_secondary(self, debt_occured_on_for_secondary):
        """
        Sets the debt_occured_on_for_secondary of this LoanPartDetails.
        Debt occured on date

        :param debt_occured_on_for_secondary: The debt_occured_on_for_secondary of this LoanPartDetails.
        :type: datetime
        """

        self._debt_occured_on_for_secondary = debt_occured_on_for_secondary

    @property
    def loan_duration(self):
        """
        Gets the loan_duration of this LoanPartDetails.
        Loan original lenght

        :return: The loan_duration of this LoanPartDetails.
        :rtype: int
        """
        return self._loan_duration

    @loan_duration.setter
    def loan_duration(self, loan_duration):
        """
        Sets the loan_duration of this LoanPartDetails.
        Loan original lenght

        :param loan_duration: The loan_duration of this LoanPartDetails.
        :type: int
        """

        self._loan_duration = loan_duration

    @property
    def next_payment_nr(self):
        """
        Gets the next_payment_nr of this LoanPartDetails.
        Next scheduled payment number

        :return: The next_payment_nr of this LoanPartDetails.
        :rtype: int
        """
        return self._next_payment_nr

    @next_payment_nr.setter
    def next_payment_nr(self, next_payment_nr):
        """
        Sets the next_payment_nr of this LoanPartDetails.
        Next scheduled payment number

        :param next_payment_nr: The next_payment_nr of this LoanPartDetails.
        :type: int
        """

        self._next_payment_nr = next_payment_nr

    @property
    def next_payment_date(self):
        """
        Gets the next_payment_date of this LoanPartDetails.
        Next scheduled payment date

        :return: The next_payment_date of this LoanPartDetails.
        :rtype: datetime
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """
        Sets the next_payment_date of this LoanPartDetails.
        Next scheduled payment date

        :param next_payment_date: The next_payment_date of this LoanPartDetails.
        :type: datetime
        """

        self._next_payment_date = next_payment_date

    @property
    def next_payment_sum(self):
        """
        Gets the next_payment_sum of this LoanPartDetails.
        Next scheduled payment amount

        :return: The next_payment_sum of this LoanPartDetails.
        :rtype: float
        """
        return self._next_payment_sum

    @next_payment_sum.setter
    def next_payment_sum(self, next_payment_sum):
        """
        Sets the next_payment_sum of this LoanPartDetails.
        Next scheduled payment amount

        :param next_payment_sum: The next_payment_sum of this LoanPartDetails.
        :type: float
        """

        self._next_payment_sum = next_payment_sum

    @property
    def nr_of_scheduled_payments(self):
        """
        Gets the nr_of_scheduled_payments of this LoanPartDetails.
        Total number of scheduled payments

        :return: The nr_of_scheduled_payments of this LoanPartDetails.
        :rtype: int
        """
        return self._nr_of_scheduled_payments

    @nr_of_scheduled_payments.setter
    def nr_of_scheduled_payments(self, nr_of_scheduled_payments):
        """
        Sets the nr_of_scheduled_payments of this LoanPartDetails.
        Total number of scheduled payments

        :param nr_of_scheduled_payments: The nr_of_scheduled_payments of this LoanPartDetails.
        :type: int
        """

        self._nr_of_scheduled_payments = nr_of_scheduled_payments

    @property
    def last_payment_date(self):
        """
        Gets the last_payment_date of this LoanPartDetails.
        Last scheduled payment date

        :return: The last_payment_date of this LoanPartDetails.
        :rtype: datetime
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """
        Sets the last_payment_date of this LoanPartDetails.
        Last scheduled payment date

        :param last_payment_date: The last_payment_date of this LoanPartDetails.
        :type: datetime
        """

        self._last_payment_date = last_payment_date

    @property
    def principal_repaid(self):
        """
        Gets the principal_repaid of this LoanPartDetails.
        Total principal repaid amount

        :return: The principal_repaid of this LoanPartDetails.
        :rtype: float
        """
        return self._principal_repaid

    @principal_repaid.setter
    def principal_repaid(self, principal_repaid):
        """
        Sets the principal_repaid of this LoanPartDetails.
        Total principal repaid amount

        :param principal_repaid: The principal_repaid of this LoanPartDetails.
        :type: float
        """

        self._principal_repaid = principal_repaid

    @property
    def interest_repaid(self):
        """
        Gets the interest_repaid of this LoanPartDetails.
        Total interest repaid amount

        :return: The interest_repaid of this LoanPartDetails.
        :rtype: float
        """
        return self._interest_repaid

    @interest_repaid.setter
    def interest_repaid(self, interest_repaid):
        """
        Sets the interest_repaid of this LoanPartDetails.
        Total interest repaid amount

        :param interest_repaid: The interest_repaid of this LoanPartDetails.
        :type: float
        """

        self._interest_repaid = interest_repaid

    @property
    def late_amount_paid(self):
        """
        Gets the late_amount_paid of this LoanPartDetails.
        Total late charges paid amount

        :return: The late_amount_paid of this LoanPartDetails.
        :rtype: float
        """
        return self._late_amount_paid

    @late_amount_paid.setter
    def late_amount_paid(self, late_amount_paid):
        """
        Sets the late_amount_paid of this LoanPartDetails.
        Total late charges paid amount

        :param late_amount_paid: The late_amount_paid of this LoanPartDetails.
        :type: float
        """

        self._late_amount_paid = late_amount_paid

    @property
    def principal_remaining(self):
        """
        Gets the principal_remaining of this LoanPartDetails.
        Remaining principal amount

        :return: The principal_remaining of this LoanPartDetails.
        :rtype: float
        """
        return self._principal_remaining

    @property
    def principal_late_amount(self):
        """
        Gets the principal_late_amount of this LoanPartDetails.
        Principal debt amount

        :return: The principal_late_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._principal_late_amount

    @principal_late_amount.setter
    def principal_late_amount(self, principal_late_amount):
        """
        Sets the principal_late_amount of this LoanPartDetails.
        Principal debt amount

        :param principal_late_amount: The principal_late_amount of this LoanPartDetails.
        :type: float
        """

        self._principal_late_amount = principal_late_amount

    @property
    def interest_late_amount(self):
        """
        Gets the interest_late_amount of this LoanPartDetails.
        Interest debt amount

        :return: The interest_late_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._interest_late_amount

    @interest_late_amount.setter
    def interest_late_amount(self, interest_late_amount):
        """
        Sets the interest_late_amount of this LoanPartDetails.
        Interest debt amount

        :param interest_late_amount: The interest_late_amount of this LoanPartDetails.
        :type: float
        """

        self._interest_late_amount = interest_late_amount

    @property
    def penalty_late_amount(self):
        """
        Gets the penalty_late_amount of this LoanPartDetails.
        Late charges debt amount

        :return: The penalty_late_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._penalty_late_amount

    @penalty_late_amount.setter
    def penalty_late_amount(self, penalty_late_amount):
        """
        Sets the penalty_late_amount of this LoanPartDetails.
        Late charges debt amount

        :param penalty_late_amount: The penalty_late_amount of this LoanPartDetails.
        :type: float
        """

        self._penalty_late_amount = penalty_late_amount

    @property
    def late_amount_total(self):
        """
        Gets the late_amount_total of this LoanPartDetails.
        Late amount total

        :return: The late_amount_total of this LoanPartDetails.
        :rtype: float
        """
        return self._late_amount_total

    @property
    def principal_write_off_amount(self):
        """
        Gets the principal_write_off_amount of this LoanPartDetails.
        Total amount of principal written off

        :return: The principal_write_off_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._principal_write_off_amount

    @principal_write_off_amount.setter
    def principal_write_off_amount(self, principal_write_off_amount):
        """
        Sets the principal_write_off_amount of this LoanPartDetails.
        Total amount of principal written off

        :param principal_write_off_amount: The principal_write_off_amount of this LoanPartDetails.
        :type: float
        """

        self._principal_write_off_amount = principal_write_off_amount

    @property
    def interest_write_off_amount(self):
        """
        Gets the interest_write_off_amount of this LoanPartDetails.
        Total amount of interest written off

        :return: The interest_write_off_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._interest_write_off_amount

    @interest_write_off_amount.setter
    def interest_write_off_amount(self, interest_write_off_amount):
        """
        Sets the interest_write_off_amount of this LoanPartDetails.
        Total amount of interest written off

        :param interest_write_off_amount: The interest_write_off_amount of this LoanPartDetails.
        :type: float
        """

        self._interest_write_off_amount = interest_write_off_amount

    @property
    def penalty_write_off_amount(self):
        """
        Gets the penalty_write_off_amount of this LoanPartDetails.
        Total amount of penalty written off

        :return: The penalty_write_off_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._penalty_write_off_amount

    @penalty_write_off_amount.setter
    def penalty_write_off_amount(self, penalty_write_off_amount):
        """
        Sets the penalty_write_off_amount of this LoanPartDetails.
        Total amount of penalty written off

        :param penalty_write_off_amount: The penalty_write_off_amount of this LoanPartDetails.
        :type: float
        """

        self._penalty_write_off_amount = penalty_write_off_amount

    @property
    def write_off_total(self):
        """
        Gets the write_off_total of this LoanPartDetails.
        Write off total

        :return: The write_off_total of this LoanPartDetails.
        :rtype: float
        """
        return self._write_off_total

    @property
    def debt_servicing_cost_main_amount(self):
        """
        Gets the debt_servicing_cost_main_amount of this LoanPartDetails.
        Total amount of principal debt servicing cost

        :return: The debt_servicing_cost_main_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._debt_servicing_cost_main_amount

    @debt_servicing_cost_main_amount.setter
    def debt_servicing_cost_main_amount(self, debt_servicing_cost_main_amount):
        """
        Sets the debt_servicing_cost_main_amount of this LoanPartDetails.
        Total amount of principal debt servicing cost

        :param debt_servicing_cost_main_amount: The debt_servicing_cost_main_amount of this LoanPartDetails.
        :type: float
        """

        self._debt_servicing_cost_main_amount = debt_servicing_cost_main_amount

    @property
    def debt_servicing_cost_interest_amount(self):
        """
        Gets the debt_servicing_cost_interest_amount of this LoanPartDetails.
        Total amount of interest debt servicing cost

        :return: The debt_servicing_cost_interest_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._debt_servicing_cost_interest_amount

    @debt_servicing_cost_interest_amount.setter
    def debt_servicing_cost_interest_amount(self, debt_servicing_cost_interest_amount):
        """
        Sets the debt_servicing_cost_interest_amount of this LoanPartDetails.
        Total amount of interest debt servicing cost

        :param debt_servicing_cost_interest_amount: The debt_servicing_cost_interest_amount of this LoanPartDetails.
        :type: float
        """

        self._debt_servicing_cost_interest_amount = debt_servicing_cost_interest_amount

    @property
    def debt_servicing_cost_penalty_amount(self):
        """
        Gets the debt_servicing_cost_penalty_amount of this LoanPartDetails.
        Total amount of penalty debt servicing cost

        :return: The debt_servicing_cost_penalty_amount of this LoanPartDetails.
        :rtype: float
        """
        return self._debt_servicing_cost_penalty_amount

    @debt_servicing_cost_penalty_amount.setter
    def debt_servicing_cost_penalty_amount(self, debt_servicing_cost_penalty_amount):
        """
        Sets the debt_servicing_cost_penalty_amount of this LoanPartDetails.
        Total amount of penalty debt servicing cost

        :param debt_servicing_cost_penalty_amount: The debt_servicing_cost_penalty_amount of this LoanPartDetails.
        :type: float
        """

        self._debt_servicing_cost_penalty_amount = debt_servicing_cost_penalty_amount

    @property
    def debt_servicing_cost_total(self):
        """
        Gets the debt_servicing_cost_total of this LoanPartDetails.
        Debt servicing cost total

        :return: The debt_servicing_cost_total of this LoanPartDetails.
        :rtype: float
        """
        return self._debt_servicing_cost_total

    @property
    def repaid_principal_current_owner(self):
        """
        Gets the repaid_principal_current_owner of this LoanPartDetails.
        Total principal repaid amount to current note owner

        :return: The repaid_principal_current_owner of this LoanPartDetails.
        :rtype: float
        """
        return self._repaid_principal_current_owner

    @repaid_principal_current_owner.setter
    def repaid_principal_current_owner(self, repaid_principal_current_owner):
        """
        Sets the repaid_principal_current_owner of this LoanPartDetails.
        Total principal repaid amount to current note owner

        :param repaid_principal_current_owner: The repaid_principal_current_owner of this LoanPartDetails.
        :type: float
        """

        self._repaid_principal_current_owner = repaid_principal_current_owner

    @property
    def repaid_interests_current_owner(self):
        """
        Gets the repaid_interests_current_owner of this LoanPartDetails.
        Total interest repaid amount to current note owner

        :return: The repaid_interests_current_owner of this LoanPartDetails.
        :rtype: float
        """
        return self._repaid_interests_current_owner

    @repaid_interests_current_owner.setter
    def repaid_interests_current_owner(self, repaid_interests_current_owner):
        """
        Sets the repaid_interests_current_owner of this LoanPartDetails.
        Total interest repaid amount to current note owner

        :param repaid_interests_current_owner: The repaid_interests_current_owner of this LoanPartDetails.
        :type: float
        """

        self._repaid_interests_current_owner = repaid_interests_current_owner

    @property
    def late_charges_paid_current_owner(self):
        """
        Gets the late_charges_paid_current_owner of this LoanPartDetails.
        Late charges paid amount to current note owner

        :return: The late_charges_paid_current_owner of this LoanPartDetails.
        :rtype: float
        """
        return self._late_charges_paid_current_owner

    @late_charges_paid_current_owner.setter
    def late_charges_paid_current_owner(self, late_charges_paid_current_owner):
        """
        Sets the late_charges_paid_current_owner of this LoanPartDetails.
        Late charges paid amount to current note owner

        :param late_charges_paid_current_owner: The late_charges_paid_current_owner of this LoanPartDetails.
        :type: float
        """

        self._late_charges_paid_current_owner = late_charges_paid_current_owner

    @property
    def repaid_total_current_owner(self):
        """
        Gets the repaid_total_current_owner of this LoanPartDetails.
        Total repaid amount to current note owner

        :return: The repaid_total_current_owner of this LoanPartDetails.
        :rtype: float
        """
        return self._repaid_total_current_owner

    @repaid_total_current_owner.setter
    def repaid_total_current_owner(self, repaid_total_current_owner):
        """
        Sets the repaid_total_current_owner of this LoanPartDetails.
        Total repaid amount to current note owner

        :param repaid_total_current_owner: The repaid_total_current_owner of this LoanPartDetails.
        :type: float
        """

        self._repaid_total_current_owner = repaid_total_current_owner

    @property
    def total_repaid(self):
        """
        Gets the total_repaid of this LoanPartDetails.
        Total repaid amount

        :return: The total_repaid of this LoanPartDetails.
        :rtype: float
        """
        return self._total_repaid

    @total_repaid.setter
    def total_repaid(self, total_repaid):
        """
        Sets the total_repaid of this LoanPartDetails.
        Total repaid amount

        :param total_repaid: The total_repaid of this LoanPartDetails.
        :type: float
        """

        self._total_repaid = total_repaid

    @property
    def debt_managment_events(self):
        """
        Gets the debt_managment_events of this LoanPartDetails.
        Debt managment event collection

        :return: The debt_managment_events of this LoanPartDetails.
        :rtype: list[DebtManagementEvent]
        """
        return self._debt_managment_events

    @debt_managment_events.setter
    def debt_managment_events(self, debt_managment_events):
        """
        Sets the debt_managment_events of this LoanPartDetails.
        Debt managment event collection

        :param debt_managment_events: The debt_managment_events of this LoanPartDetails.
        :type: list[DebtManagementEvent]
        """

        self._debt_managment_events = debt_managment_events

    @property
    def loan_transfers(self):
        """
        Gets the loan_transfers of this LoanPartDetails.
        Collection of all loan payments

        :return: The loan_transfers of this LoanPartDetails.
        :rtype: list[LoanTransfer]
        """
        return self._loan_transfers

    @loan_transfers.setter
    def loan_transfers(self, loan_transfers):
        """
        Sets the loan_transfers of this LoanPartDetails.
        Collection of all loan payments

        :param loan_transfers: The loan_transfers of this LoanPartDetails.
        :type: list[LoanTransfer]
        """

        self._loan_transfers = loan_transfers

    @property
    def scheduled_payments(self):
        """
        Gets the scheduled_payments of this LoanPartDetails.
        Collection of all loan scheduled payments.               Contains previous period values before rescheduling was made

        :return: The scheduled_payments of this LoanPartDetails.
        :rtype: list[ScheduledPayment]
        """
        return self._scheduled_payments

    @scheduled_payments.setter
    def scheduled_payments(self, scheduled_payments):
        """
        Sets the scheduled_payments of this LoanPartDetails.
        Collection of all loan scheduled payments.               Contains previous period values before rescheduling was made

        :param scheduled_payments: The scheduled_payments of this LoanPartDetails.
        :type: list[ScheduledPayment]
        """

        self._scheduled_payments = scheduled_payments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
