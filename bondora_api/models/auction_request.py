# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AuctionRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, countries=None, ratings=None, gender=None, sum_min=None, sum_max=None, terms=None, age_min=None, age_max=None, loan_number=None, user_name=None, application_date_from=None, application_date_to=None, credit_score_min=None, credit_score_max=None, credit_scores_ee_mini=None, interest_min=None, interest_max=None, income_total_min=None, income_total_max=None, model_version=None, expected_loss_min=None, expected_loss_max=None, listed_on_utc_from=None, listed_on_utc_to=None, page_size=None, page_nr=None):
        """
        AuctionRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'countries': 'list[str]',
            'ratings': 'list[str]',
            'gender': 'int',
            'sum_min': 'int',
            'sum_max': 'int',
            'terms': 'list[int]',
            'age_min': 'int',
            'age_max': 'int',
            'loan_number': 'int',
            'user_name': 'str',
            'application_date_from': 'datetime',
            'application_date_to': 'datetime',
            'credit_score_min': 'int',
            'credit_score_max': 'int',
            'credit_scores_ee_mini': 'list[str]',
            'interest_min': 'float',
            'interest_max': 'float',
            'income_total_min': 'float',
            'income_total_max': 'float',
            'model_version': 'int',
            'expected_loss_min': 'float',
            'expected_loss_max': 'float',
            'listed_on_utc_from': 'datetime',
            'listed_on_utc_to': 'datetime',
            'page_size': 'int',
            'page_nr': 'int'
        }

        self.attribute_map = {
            'countries': 'Countries',
            'ratings': 'Ratings',
            'gender': 'Gender',
            'sum_min': 'SumMin',
            'sum_max': 'SumMax',
            'terms': 'Terms',
            'age_min': 'AgeMin',
            'age_max': 'AgeMax',
            'loan_number': 'LoanNumber',
            'user_name': 'UserName',
            'application_date_from': 'ApplicationDateFrom',
            'application_date_to': 'ApplicationDateTo',
            'credit_score_min': 'CreditScoreMin',
            'credit_score_max': 'CreditScoreMax',
            'credit_scores_ee_mini': 'CreditScoresEeMini',
            'interest_min': 'InterestMin',
            'interest_max': 'InterestMax',
            'income_total_min': 'IncomeTotalMin',
            'income_total_max': 'IncomeTotalMax',
            'model_version': 'ModelVersion',
            'expected_loss_min': 'ExpectedLossMin',
            'expected_loss_max': 'ExpectedLossMax',
            'listed_on_utc_from': 'ListedOnUTCFrom',
            'listed_on_utc_to': 'ListedOnUTCTo',
            'page_size': 'PageSize',
            'page_nr': 'PageNr'
        }

        self._countries = countries
        self._ratings = ratings
        self._gender = gender
        self._sum_min = sum_min
        self._sum_max = sum_max
        self._terms = terms
        self._age_min = age_min
        self._age_max = age_max
        self._loan_number = loan_number
        self._user_name = user_name
        self._application_date_from = application_date_from
        self._application_date_to = application_date_to
        self._credit_score_min = credit_score_min
        self._credit_score_max = credit_score_max
        self._credit_scores_ee_mini = credit_scores_ee_mini
        self._interest_min = interest_min
        self._interest_max = interest_max
        self._income_total_min = income_total_min
        self._income_total_max = income_total_max
        self._model_version = model_version
        self._expected_loss_min = expected_loss_min
        self._expected_loss_max = expected_loss_max
        self._listed_on_utc_from = listed_on_utc_from
        self._listed_on_utc_to = listed_on_utc_to
        self._page_size = page_size
        self._page_nr = page_nr

    @property
    def countries(self):
        """
        Gets the countries of this AuctionRequest.
        Two letter iso code for country of origin: EE, ES, FI

        :return: The countries of this AuctionRequest.
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this AuctionRequest.
        Two letter iso code for country of origin: EE, ES, FI

        :param countries: The countries of this AuctionRequest.
        :type: list[str]
        """

        self._countries = countries

    @property
    def ratings(self):
        """
        Gets the ratings of this AuctionRequest.
        Bondora's rating: AA, A, B, C, D, E, F, HR

        :return: The ratings of this AuctionRequest.
        :rtype: list[str]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """
        Sets the ratings of this AuctionRequest.
        Bondora's rating: AA, A, B, C, D, E, F, HR

        :param ratings: The ratings of this AuctionRequest.
        :type: list[str]
        """

        self._ratings = ratings

    @property
    def gender(self):
        """
        Gets the gender of this AuctionRequest.
        Borrower's gender: Male 0, Female 1, Unknown 2

        :return: The gender of this AuctionRequest.
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this AuctionRequest.
        Borrower's gender: Male 0, Female 1, Unknown 2

        :param gender: The gender of this AuctionRequest.
        :type: int
        """

        self._gender = gender

    @property
    def sum_min(self):
        """
        Gets the sum_min of this AuctionRequest.
        Minimal loan amount

        :return: The sum_min of this AuctionRequest.
        :rtype: int
        """
        return self._sum_min

    @sum_min.setter
    def sum_min(self, sum_min):
        """
        Sets the sum_min of this AuctionRequest.
        Minimal loan amount

        :param sum_min: The sum_min of this AuctionRequest.
        :type: int
        """

        self._sum_min = sum_min

    @property
    def sum_max(self):
        """
        Gets the sum_max of this AuctionRequest.
        Maximum loan amount

        :return: The sum_max of this AuctionRequest.
        :rtype: int
        """
        return self._sum_max

    @sum_max.setter
    def sum_max(self, sum_max):
        """
        Sets the sum_max of this AuctionRequest.
        Maximum loan amount

        :param sum_max: The sum_max of this AuctionRequest.
        :type: int
        """

        self._sum_max = sum_max

    @property
    def terms(self):
        """
        Gets the terms of this AuctionRequest.
        Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months

        :return: The terms of this AuctionRequest.
        :rtype: list[int]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """
        Sets the terms of this AuctionRequest.
        Loan length: 3, 9, 12, 18, 24, 36, 48, 60 months

        :param terms: The terms of this AuctionRequest.
        :type: list[int]
        """

        self._terms = terms

    @property
    def age_min(self):
        """
        Gets the age_min of this AuctionRequest.
        Minimal age

        :return: The age_min of this AuctionRequest.
        :rtype: int
        """
        return self._age_min

    @age_min.setter
    def age_min(self, age_min):
        """
        Sets the age_min of this AuctionRequest.
        Minimal age

        :param age_min: The age_min of this AuctionRequest.
        :type: int
        """

        self._age_min = age_min

    @property
    def age_max(self):
        """
        Gets the age_max of this AuctionRequest.
        Maximum age

        :return: The age_max of this AuctionRequest.
        :rtype: int
        """
        return self._age_max

    @age_max.setter
    def age_max(self, age_max):
        """
        Sets the age_max of this AuctionRequest.
        Maximum age

        :param age_max: The age_max of this AuctionRequest.
        :type: int
        """

        self._age_max = age_max

    @property
    def loan_number(self):
        """
        Gets the loan_number of this AuctionRequest.
        Loan number

        :return: The loan_number of this AuctionRequest.
        :rtype: int
        """
        return self._loan_number

    @loan_number.setter
    def loan_number(self, loan_number):
        """
        Sets the loan_number of this AuctionRequest.
        Loan number

        :param loan_number: The loan_number of this AuctionRequest.
        :type: int
        """

        self._loan_number = loan_number

    @property
    def user_name(self):
        """
        Gets the user_name of this AuctionRequest.
        Username

        :return: The user_name of this AuctionRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this AuctionRequest.
        Username

        :param user_name: The user_name of this AuctionRequest.
        :type: str
        """

        self._user_name = user_name

    @property
    def application_date_from(self):
        """
        Gets the application_date_from of this AuctionRequest.
        Loan application started date from

        :return: The application_date_from of this AuctionRequest.
        :rtype: datetime
        """
        return self._application_date_from

    @application_date_from.setter
    def application_date_from(self, application_date_from):
        """
        Sets the application_date_from of this AuctionRequest.
        Loan application started date from

        :param application_date_from: The application_date_from of this AuctionRequest.
        :type: datetime
        """

        self._application_date_from = application_date_from

    @property
    def application_date_to(self):
        """
        Gets the application_date_to of this AuctionRequest.
        Loan application started date to

        :return: The application_date_to of this AuctionRequest.
        :rtype: datetime
        """
        return self._application_date_to

    @application_date_to.setter
    def application_date_to(self, application_date_to):
        """
        Sets the application_date_to of this AuctionRequest.
        Loan application started date to

        :param application_date_to: The application_date_to of this AuctionRequest.
        :type: datetime
        """

        self._application_date_to = application_date_to

    @property
    def credit_score_min(self):
        """
        Gets the credit_score_min of this AuctionRequest.
        Minimum credit score

        :return: The credit_score_min of this AuctionRequest.
        :rtype: int
        """
        return self._credit_score_min

    @credit_score_min.setter
    def credit_score_min(self, credit_score_min):
        """
        Sets the credit_score_min of this AuctionRequest.
        Minimum credit score

        :param credit_score_min: The credit_score_min of this AuctionRequest.
        :type: int
        """

        self._credit_score_min = credit_score_min

    @property
    def credit_score_max(self):
        """
        Gets the credit_score_max of this AuctionRequest.
        Maximum credit score

        :return: The credit_score_max of this AuctionRequest.
        :rtype: int
        """
        return self._credit_score_max

    @credit_score_max.setter
    def credit_score_max(self, credit_score_max):
        """
        Sets the credit_score_max of this AuctionRequest.
        Maximum credit score

        :param credit_score_max: The credit_score_max of this AuctionRequest.
        :type: int
        """

        self._credit_score_max = credit_score_max

    @property
    def credit_scores_ee_mini(self):
        """
        Gets the credit_scores_ee_mini of this AuctionRequest.
        Credit score for EE loans

        :return: The credit_scores_ee_mini of this AuctionRequest.
        :rtype: list[str]
        """
        return self._credit_scores_ee_mini

    @credit_scores_ee_mini.setter
    def credit_scores_ee_mini(self, credit_scores_ee_mini):
        """
        Sets the credit_scores_ee_mini of this AuctionRequest.
        Credit score for EE loans

        :param credit_scores_ee_mini: The credit_scores_ee_mini of this AuctionRequest.
        :type: list[str]
        """

        self._credit_scores_ee_mini = credit_scores_ee_mini

    @property
    def interest_min(self):
        """
        Gets the interest_min of this AuctionRequest.
        Minimum interest

        :return: The interest_min of this AuctionRequest.
        :rtype: float
        """
        return self._interest_min

    @interest_min.setter
    def interest_min(self, interest_min):
        """
        Sets the interest_min of this AuctionRequest.
        Minimum interest

        :param interest_min: The interest_min of this AuctionRequest.
        :type: float
        """

        self._interest_min = interest_min

    @property
    def interest_max(self):
        """
        Gets the interest_max of this AuctionRequest.
        Maximum interest

        :return: The interest_max of this AuctionRequest.
        :rtype: float
        """
        return self._interest_max

    @interest_max.setter
    def interest_max(self, interest_max):
        """
        Sets the interest_max of this AuctionRequest.
        Maximum interest

        :param interest_max: The interest_max of this AuctionRequest.
        :type: float
        """

        self._interest_max = interest_max

    @property
    def income_total_min(self):
        """
        Gets the income_total_min of this AuctionRequest.
        Minimal total income

        :return: The income_total_min of this AuctionRequest.
        :rtype: float
        """
        return self._income_total_min

    @income_total_min.setter
    def income_total_min(self, income_total_min):
        """
        Sets the income_total_min of this AuctionRequest.
        Minimal total income

        :param income_total_min: The income_total_min of this AuctionRequest.
        :type: float
        """

        self._income_total_min = income_total_min

    @property
    def income_total_max(self):
        """
        Gets the income_total_max of this AuctionRequest.
        Maximum total income

        :return: The income_total_max of this AuctionRequest.
        :rtype: float
        """
        return self._income_total_max

    @income_total_max.setter
    def income_total_max(self, income_total_max):
        """
        Sets the income_total_max of this AuctionRequest.
        Maximum total income

        :param income_total_max: The income_total_max of this AuctionRequest.
        :type: float
        """

        self._income_total_max = income_total_max

    @property
    def model_version(self):
        """
        Gets the model_version of this AuctionRequest.
        Model version

        :return: The model_version of this AuctionRequest.
        :rtype: int
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """
        Sets the model_version of this AuctionRequest.
        Model version

        :param model_version: The model_version of this AuctionRequest.
        :type: int
        """

        self._model_version = model_version

    @property
    def expected_loss_min(self):
        """
        Gets the expected_loss_min of this AuctionRequest.
        Minimal expected loss

        :return: The expected_loss_min of this AuctionRequest.
        :rtype: float
        """
        return self._expected_loss_min

    @expected_loss_min.setter
    def expected_loss_min(self, expected_loss_min):
        """
        Sets the expected_loss_min of this AuctionRequest.
        Minimal expected loss

        :param expected_loss_min: The expected_loss_min of this AuctionRequest.
        :type: float
        """

        self._expected_loss_min = expected_loss_min

    @property
    def expected_loss_max(self):
        """
        Gets the expected_loss_max of this AuctionRequest.
        Maximum expected loss

        :return: The expected_loss_max of this AuctionRequest.
        :rtype: float
        """
        return self._expected_loss_max

    @expected_loss_max.setter
    def expected_loss_max(self, expected_loss_max):
        """
        Sets the expected_loss_max of this AuctionRequest.
        Maximum expected loss

        :param expected_loss_max: The expected_loss_max of this AuctionRequest.
        :type: float
        """

        self._expected_loss_max = expected_loss_max

    @property
    def listed_on_utc_from(self):
        """
        Gets the listed_on_utc_from of this AuctionRequest.
        Date when auction was published from

        :return: The listed_on_utc_from of this AuctionRequest.
        :rtype: datetime
        """
        return self._listed_on_utc_from

    @listed_on_utc_from.setter
    def listed_on_utc_from(self, listed_on_utc_from):
        """
        Sets the listed_on_utc_from of this AuctionRequest.
        Date when auction was published from

        :param listed_on_utc_from: The listed_on_utc_from of this AuctionRequest.
        :type: datetime
        """

        self._listed_on_utc_from = listed_on_utc_from

    @property
    def listed_on_utc_to(self):
        """
        Gets the listed_on_utc_to of this AuctionRequest.
        Date when auction was published to

        :return: The listed_on_utc_to of this AuctionRequest.
        :rtype: datetime
        """
        return self._listed_on_utc_to

    @listed_on_utc_to.setter
    def listed_on_utc_to(self, listed_on_utc_to):
        """
        Sets the listed_on_utc_to of this AuctionRequest.
        Date when auction was published to

        :param listed_on_utc_to: The listed_on_utc_to of this AuctionRequest.
        :type: datetime
        """

        self._listed_on_utc_to = listed_on_utc_to

    @property
    def page_size(self):
        """
        Gets the page_size of this AuctionRequest.
        Max items in result, default is 1000

        :return: The page_size of this AuctionRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this AuctionRequest.
        Max items in result, default is 1000

        :param page_size: The page_size of this AuctionRequest.
        :type: int
        """

        if not page_size:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size > 1000.0:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000.0`")
        if page_size < 1.0:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1.0`")

        self._page_size = page_size

    @property
    def page_nr(self):
        """
        Gets the page_nr of this AuctionRequest.
        Result page nr

        :return: The page_nr of this AuctionRequest.
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """
        Sets the page_nr of this AuctionRequest.
        Result page nr

        :param page_nr: The page_nr of this AuctionRequest.
        :type: int
        """

        if not page_nr:
            raise ValueError("Invalid value for `page_nr`, must not be `None`")
        if page_nr > 2.147483647E9:
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2.147483647E9`")
        if page_nr < 1.0:
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1.0`")

        self._page_nr = page_nr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
