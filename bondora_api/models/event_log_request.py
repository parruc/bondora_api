# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EventLogRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, event_date_from=None, event_date_to=None, event_type=None, ip_address=None, page_size=None, page_nr=None):
        """
        EventLogRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'event_date_from': 'datetime',
            'event_date_to': 'datetime',
            'event_type': 'int',
            'ip_address': 'str',
            'page_size': 'int',
            'page_nr': 'int'
        }

        self.attribute_map = {
            'event_date_from': 'EventDateFrom',
            'event_date_to': 'EventDateTo',
            'event_type': 'EventType',
            'ip_address': 'IpAddress',
            'page_size': 'PageSize',
            'page_nr': 'PageNr'
        }

        self._event_date_from = event_date_from
        self._event_date_to = event_date_to
        self._event_type = event_type
        self._ip_address = ip_address
        self._page_size = page_size
        self._page_nr = page_nr

    @property
    def event_date_from(self):
        """
        Gets the event_date_from of this EventLogRequest.
        Start datetime

        :return: The event_date_from of this EventLogRequest.
        :rtype: datetime
        """
        return self._event_date_from

    @event_date_from.setter
    def event_date_from(self, event_date_from):
        """
        Sets the event_date_from of this EventLogRequest.
        Start datetime

        :param event_date_from: The event_date_from of this EventLogRequest.
        :type: datetime
        """

        self._event_date_from = event_date_from

    @property
    def event_date_to(self):
        """
        Gets the event_date_to of this EventLogRequest.
        end datetime

        :return: The event_date_to of this EventLogRequest.
        :rtype: datetime
        """
        return self._event_date_to

    @event_date_to.setter
    def event_date_to(self, event_date_to):
        """
        Sets the event_date_to of this EventLogRequest.
        end datetime

        :param event_date_to: The event_date_to of this EventLogRequest.
        :type: datetime
        """

        self._event_date_to = event_date_to

    @property
    def event_type(self):
        """
        Gets the event_type of this EventLogRequest.
        Event type

        :return: The event_type of this EventLogRequest.
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this EventLogRequest.
        Event type

        :param event_type: The event_type of this EventLogRequest.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4", "5"]
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def ip_address(self):
        """
        Gets the ip_address of this EventLogRequest.
        IP address

        :return: The ip_address of this EventLogRequest.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this EventLogRequest.
        IP address

        :param ip_address: The ip_address of this EventLogRequest.
        :type: str
        """

        self._ip_address = ip_address

    @property
    def page_size(self):
        """
        Gets the page_size of this EventLogRequest.
        Max items in result, default is 1000

        :return: The page_size of this EventLogRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this EventLogRequest.
        Max items in result, default is 1000

        :param page_size: The page_size of this EventLogRequest.
        :type: int
        """

        if not page_size:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size > 1000.0:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000.0`")
        if page_size < 1.0:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1.0`")

        self._page_size = page_size

    @property
    def page_nr(self):
        """
        Gets the page_nr of this EventLogRequest.
        Result page nr

        :return: The page_nr of this EventLogRequest.
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """
        Sets the page_nr of this EventLogRequest.
        Result page nr

        :param page_nr: The page_nr of this EventLogRequest.
        :type: int
        """

        if not page_nr:
            raise ValueError("Invalid value for `page_nr`, must not be `None`")
        if page_nr > 2.147483647E9:
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2.147483647E9`")
        if page_nr < 1.0:
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1.0`")

        self._page_nr = page_nr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
