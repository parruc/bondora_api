# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SecondMarketRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, loan_issued_date_from=None, loan_issued_date_to=None, principal_min=None, principal_max=None, interest_min=None, interest_max=None, length_max=None, length_min=None, has_debt=None, loan_status_code=None, loan_debt_management_stage_type=None, loan_debt_management_date_active_from=None, loan_debt_management_date_active_to=None, late_principal_amount_min=None, late_principal_amount_max=None, price_min=None, price_max=None, use_of_loan=None, has_new_schedule=None, countries=None, ratings=None, credit_score_min=None, credit_score_max=None, user_name=None, gender=None, age_min=None, age_max=None, income_verification_status=None, show_my_items=None, auction_id=None, listed_on_date_from=None, listed_on_date_to=None, debt_occured_on_from=None, debt_occured_on_to=None, debt_occured_on_for_secondary_from=None, debt_occured_on_for_secondary_to=None, defaulted_date_from=None, defaulted_date_to=None, rescheduled_from=None, rescheduled_to=None, last_payment_date_from=None, last_payment_date_to=None, next_payment_date_from=None, next_payment_date_to=None, desired_discount_rate_min=None, desired_discount_rate_max=None, xirr_min=None, xirr_max=None, page_size=None, page_nr=None):
        """
        SecondMarketRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'loan_issued_date_from': 'datetime',
            'loan_issued_date_to': 'datetime',
            'principal_min': 'float',
            'principal_max': 'float',
            'interest_min': 'float',
            'interest_max': 'float',
            'length_max': 'int',
            'length_min': 'int',
            'has_debt': 'bool',
            'loan_status_code': 'list[int]',
            'loan_debt_management_stage_type': 'int',
            'loan_debt_management_date_active_from': 'datetime',
            'loan_debt_management_date_active_to': 'datetime',
            'late_principal_amount_min': 'float',
            'late_principal_amount_max': 'float',
            'price_min': 'float',
            'price_max': 'float',
            'use_of_loan': 'int',
            'has_new_schedule': 'bool',
            'countries': 'list[str]',
            'ratings': 'list[str]',
            'credit_score_min': 'int',
            'credit_score_max': 'int',
            'user_name': 'str',
            'gender': 'int',
            'age_min': 'int',
            'age_max': 'int',
            'income_verification_status': 'int',
            'show_my_items': 'bool',
            'auction_id': 'str',
            'listed_on_date_from': 'datetime',
            'listed_on_date_to': 'datetime',
            'debt_occured_on_from': 'datetime',
            'debt_occured_on_to': 'datetime',
            'debt_occured_on_for_secondary_from': 'datetime',
            'debt_occured_on_for_secondary_to': 'datetime',
            'defaulted_date_from': 'datetime',
            'defaulted_date_to': 'datetime',
            'rescheduled_from': 'datetime',
            'rescheduled_to': 'datetime',
            'last_payment_date_from': 'datetime',
            'last_payment_date_to': 'datetime',
            'next_payment_date_from': 'datetime',
            'next_payment_date_to': 'datetime',
            'desired_discount_rate_min': 'float',
            'desired_discount_rate_max': 'float',
            'xirr_min': 'float',
            'xirr_max': 'float',
            'page_size': 'int',
            'page_nr': 'int'
        }

        self.attribute_map = {
            'loan_issued_date_from': 'LoanIssuedDateFrom',
            'loan_issued_date_to': 'LoanIssuedDateTo',
            'principal_min': 'PrincipalMin',
            'principal_max': 'PrincipalMax',
            'interest_min': 'InterestMin',
            'interest_max': 'InterestMax',
            'length_max': 'LengthMax',
            'length_min': 'LengthMin',
            'has_debt': 'HasDebt',
            'loan_status_code': 'LoanStatusCode',
            'loan_debt_management_stage_type': 'LoanDebtManagementStageType',
            'loan_debt_management_date_active_from': 'LoanDebtManagementDateActiveFrom',
            'loan_debt_management_date_active_to': 'LoanDebtManagementDateActiveTo',
            'late_principal_amount_min': 'LatePrincipalAmountMin',
            'late_principal_amount_max': 'LatePrincipalAmountMax',
            'price_min': 'PriceMin',
            'price_max': 'PriceMax',
            'use_of_loan': 'UseOfLoan',
            'has_new_schedule': 'HasNewSchedule',
            'countries': 'Countries',
            'ratings': 'Ratings',
            'credit_score_min': 'CreditScoreMin',
            'credit_score_max': 'CreditScoreMax',
            'user_name': 'UserName',
            'gender': 'Gender',
            'age_min': 'AgeMin',
            'age_max': 'AgeMax',
            'income_verification_status': 'IncomeVerificationStatus',
            'show_my_items': 'ShowMyItems',
            'auction_id': 'AuctionId',
            'listed_on_date_from': 'ListedOnDateFrom',
            'listed_on_date_to': 'ListedOnDateTo',
            'debt_occured_on_from': 'DebtOccuredOnFrom',
            'debt_occured_on_to': 'DebtOccuredOnTo',
            'debt_occured_on_for_secondary_from': 'DebtOccuredOnForSecondaryFrom',
            'debt_occured_on_for_secondary_to': 'DebtOccuredOnForSecondaryTo',
            'defaulted_date_from': 'DefaultedDateFrom',
            'defaulted_date_to': 'DefaultedDateTo',
            'rescheduled_from': 'RescheduledFrom',
            'rescheduled_to': 'RescheduledTo',
            'last_payment_date_from': 'LastPaymentDateFrom',
            'last_payment_date_to': 'LastPaymentDateTo',
            'next_payment_date_from': 'NextPaymentDateFrom',
            'next_payment_date_to': 'NextPaymentDateTo',
            'desired_discount_rate_min': 'DesiredDiscountRateMin',
            'desired_discount_rate_max': 'DesiredDiscountRateMax',
            'xirr_min': 'XirrMin',
            'xirr_max': 'XirrMax',
            'page_size': 'PageSize',
            'page_nr': 'PageNr'
        }

        self._loan_issued_date_from = loan_issued_date_from
        self._loan_issued_date_to = loan_issued_date_to
        self._principal_min = principal_min
        self._principal_max = principal_max
        self._interest_min = interest_min
        self._interest_max = interest_max
        self._length_max = length_max
        self._length_min = length_min
        self._has_debt = has_debt
        self._loan_status_code = loan_status_code
        self._loan_debt_management_stage_type = loan_debt_management_stage_type
        self._loan_debt_management_date_active_from = loan_debt_management_date_active_from
        self._loan_debt_management_date_active_to = loan_debt_management_date_active_to
        self._late_principal_amount_min = late_principal_amount_min
        self._late_principal_amount_max = late_principal_amount_max
        self._price_min = price_min
        self._price_max = price_max
        self._use_of_loan = use_of_loan
        self._has_new_schedule = has_new_schedule
        self._countries = countries
        self._ratings = ratings
        self._credit_score_min = credit_score_min
        self._credit_score_max = credit_score_max
        self._user_name = user_name
        self._gender = gender
        self._age_min = age_min
        self._age_max = age_max
        self._income_verification_status = income_verification_status
        self._show_my_items = show_my_items
        self._auction_id = auction_id
        self._listed_on_date_from = listed_on_date_from
        self._listed_on_date_to = listed_on_date_to
        self._debt_occured_on_from = debt_occured_on_from
        self._debt_occured_on_to = debt_occured_on_to
        self._debt_occured_on_for_secondary_from = debt_occured_on_for_secondary_from
        self._debt_occured_on_for_secondary_to = debt_occured_on_for_secondary_to
        self._defaulted_date_from = defaulted_date_from
        self._defaulted_date_to = defaulted_date_to
        self._rescheduled_from = rescheduled_from
        self._rescheduled_to = rescheduled_to
        self._last_payment_date_from = last_payment_date_from
        self._last_payment_date_to = last_payment_date_to
        self._next_payment_date_from = next_payment_date_from
        self._next_payment_date_to = next_payment_date_to
        self._desired_discount_rate_min = desired_discount_rate_min
        self._desired_discount_rate_max = desired_discount_rate_max
        self._xirr_min = xirr_min
        self._xirr_max = xirr_max
        self._page_size = page_size
        self._page_nr = page_nr

    @property
    def loan_issued_date_from(self):
        """
        Gets the loan_issued_date_from of this SecondMarketRequest.
        Loan issued start date from

        :return: The loan_issued_date_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._loan_issued_date_from

    @loan_issued_date_from.setter
    def loan_issued_date_from(self, loan_issued_date_from):
        """
        Sets the loan_issued_date_from of this SecondMarketRequest.
        Loan issued start date from

        :param loan_issued_date_from: The loan_issued_date_from of this SecondMarketRequest.
        :type: datetime
        """

        self._loan_issued_date_from = loan_issued_date_from

    @property
    def loan_issued_date_to(self):
        """
        Gets the loan_issued_date_to of this SecondMarketRequest.
        Loan issued start date to

        :return: The loan_issued_date_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._loan_issued_date_to

    @loan_issued_date_to.setter
    def loan_issued_date_to(self, loan_issued_date_to):
        """
        Sets the loan_issued_date_to of this SecondMarketRequest.
        Loan issued start date to

        :param loan_issued_date_to: The loan_issued_date_to of this SecondMarketRequest.
        :type: datetime
        """

        self._loan_issued_date_to = loan_issued_date_to

    @property
    def principal_min(self):
        """
        Gets the principal_min of this SecondMarketRequest.
        Remaining principal amount min

        :return: The principal_min of this SecondMarketRequest.
        :rtype: float
        """
        return self._principal_min

    @principal_min.setter
    def principal_min(self, principal_min):
        """
        Sets the principal_min of this SecondMarketRequest.
        Remaining principal amount min

        :param principal_min: The principal_min of this SecondMarketRequest.
        :type: float
        """

        self._principal_min = principal_min

    @property
    def principal_max(self):
        """
        Gets the principal_max of this SecondMarketRequest.
        Remaining principal amount max

        :return: The principal_max of this SecondMarketRequest.
        :rtype: float
        """
        return self._principal_max

    @principal_max.setter
    def principal_max(self, principal_max):
        """
        Sets the principal_max of this SecondMarketRequest.
        Remaining principal amount max

        :param principal_max: The principal_max of this SecondMarketRequest.
        :type: float
        """

        self._principal_max = principal_max

    @property
    def interest_min(self):
        """
        Gets the interest_min of this SecondMarketRequest.
        Interest rate min

        :return: The interest_min of this SecondMarketRequest.
        :rtype: float
        """
        return self._interest_min

    @interest_min.setter
    def interest_min(self, interest_min):
        """
        Sets the interest_min of this SecondMarketRequest.
        Interest rate min

        :param interest_min: The interest_min of this SecondMarketRequest.
        :type: float
        """

        self._interest_min = interest_min

    @property
    def interest_max(self):
        """
        Gets the interest_max of this SecondMarketRequest.
        Interest rate max

        :return: The interest_max of this SecondMarketRequest.
        :rtype: float
        """
        return self._interest_max

    @interest_max.setter
    def interest_max(self, interest_max):
        """
        Sets the interest_max of this SecondMarketRequest.
        Interest rate max

        :param interest_max: The interest_max of this SecondMarketRequest.
        :type: float
        """

        self._interest_max = interest_max

    @property
    def length_max(self):
        """
        Gets the length_max of this SecondMarketRequest.
        Loan lenght min

        :return: The length_max of this SecondMarketRequest.
        :rtype: int
        """
        return self._length_max

    @length_max.setter
    def length_max(self, length_max):
        """
        Sets the length_max of this SecondMarketRequest.
        Loan lenght min

        :param length_max: The length_max of this SecondMarketRequest.
        :type: int
        """

        self._length_max = length_max

    @property
    def length_min(self):
        """
        Gets the length_min of this SecondMarketRequest.
        Loan lenght max

        :return: The length_min of this SecondMarketRequest.
        :rtype: int
        """
        return self._length_min

    @length_min.setter
    def length_min(self, length_min):
        """
        Sets the length_min of this SecondMarketRequest.
        Loan lenght max

        :param length_min: The length_min of this SecondMarketRequest.
        :type: int
        """

        self._length_min = length_min

    @property
    def has_debt(self):
        """
        Gets the has_debt of this SecondMarketRequest.
        Is overdue

        :return: The has_debt of this SecondMarketRequest.
        :rtype: bool
        """
        return self._has_debt

    @has_debt.setter
    def has_debt(self, has_debt):
        """
        Sets the has_debt of this SecondMarketRequest.
        Is overdue

        :param has_debt: The has_debt of this SecondMarketRequest.
        :type: bool
        """

        self._has_debt = has_debt

    @property
    def loan_status_code(self):
        """
        Gets the loan_status_code of this SecondMarketRequest.
        Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para>

        :return: The loan_status_code of this SecondMarketRequest.
        :rtype: list[int]
        """
        return self._loan_status_code

    @loan_status_code.setter
    def loan_status_code(self, loan_status_code):
        """
        Sets the loan_status_code of this SecondMarketRequest.
        Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para>

        :param loan_status_code: The loan_status_code of this SecondMarketRequest.
        :type: list[int]
        """

        self._loan_status_code = loan_status_code

    @property
    def loan_debt_management_stage_type(self):
        """
        Gets the loan_debt_management_stage_type of this SecondMarketRequest.
        Latest debt management stage type

        :return: The loan_debt_management_stage_type of this SecondMarketRequest.
        :rtype: int
        """
        return self._loan_debt_management_stage_type

    @loan_debt_management_stage_type.setter
    def loan_debt_management_stage_type(self, loan_debt_management_stage_type):
        """
        Sets the loan_debt_management_stage_type of this SecondMarketRequest.
        Latest debt management stage type

        :param loan_debt_management_stage_type: The loan_debt_management_stage_type of this SecondMarketRequest.
        :type: int
        """
        allowed_values = [1, 2, 3, -1]
        if loan_debt_management_stage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_debt_management_stage_type` ({0}), must be one of {1}"
                .format(loan_debt_management_stage_type, allowed_values)
            )

        self._loan_debt_management_stage_type = loan_debt_management_stage_type

    @property
    def loan_debt_management_date_active_from(self):
        """
        Gets the loan_debt_management_date_active_from of this SecondMarketRequest.
        Latest debt management date active from

        :return: The loan_debt_management_date_active_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._loan_debt_management_date_active_from

    @loan_debt_management_date_active_from.setter
    def loan_debt_management_date_active_from(self, loan_debt_management_date_active_from):
        """
        Sets the loan_debt_management_date_active_from of this SecondMarketRequest.
        Latest debt management date active from

        :param loan_debt_management_date_active_from: The loan_debt_management_date_active_from of this SecondMarketRequest.
        :type: datetime
        """

        self._loan_debt_management_date_active_from = loan_debt_management_date_active_from

    @property
    def loan_debt_management_date_active_to(self):
        """
        Gets the loan_debt_management_date_active_to of this SecondMarketRequest.
        Latest debt management date active to

        :return: The loan_debt_management_date_active_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._loan_debt_management_date_active_to

    @loan_debt_management_date_active_to.setter
    def loan_debt_management_date_active_to(self, loan_debt_management_date_active_to):
        """
        Sets the loan_debt_management_date_active_to of this SecondMarketRequest.
        Latest debt management date active to

        :param loan_debt_management_date_active_to: The loan_debt_management_date_active_to of this SecondMarketRequest.
        :type: datetime
        """

        self._loan_debt_management_date_active_to = loan_debt_management_date_active_to

    @property
    def late_principal_amount_min(self):
        """
        Gets the late_principal_amount_min of this SecondMarketRequest.
        Principal debt amount min

        :return: The late_principal_amount_min of this SecondMarketRequest.
        :rtype: float
        """
        return self._late_principal_amount_min

    @late_principal_amount_min.setter
    def late_principal_amount_min(self, late_principal_amount_min):
        """
        Sets the late_principal_amount_min of this SecondMarketRequest.
        Principal debt amount min

        :param late_principal_amount_min: The late_principal_amount_min of this SecondMarketRequest.
        :type: float
        """

        self._late_principal_amount_min = late_principal_amount_min

    @property
    def late_principal_amount_max(self):
        """
        Gets the late_principal_amount_max of this SecondMarketRequest.
        Principal debt amount max

        :return: The late_principal_amount_max of this SecondMarketRequest.
        :rtype: float
        """
        return self._late_principal_amount_max

    @late_principal_amount_max.setter
    def late_principal_amount_max(self, late_principal_amount_max):
        """
        Sets the late_principal_amount_max of this SecondMarketRequest.
        Principal debt amount max

        :param late_principal_amount_max: The late_principal_amount_max of this SecondMarketRequest.
        :type: float
        """

        self._late_principal_amount_max = late_principal_amount_max

    @property
    def price_min(self):
        """
        Gets the price_min of this SecondMarketRequest.
        Price amount min

        :return: The price_min of this SecondMarketRequest.
        :rtype: float
        """
        return self._price_min

    @price_min.setter
    def price_min(self, price_min):
        """
        Sets the price_min of this SecondMarketRequest.
        Price amount min

        :param price_min: The price_min of this SecondMarketRequest.
        :type: float
        """

        self._price_min = price_min

    @property
    def price_max(self):
        """
        Gets the price_max of this SecondMarketRequest.
        Price amount max

        :return: The price_max of this SecondMarketRequest.
        :rtype: float
        """
        return self._price_max

    @price_max.setter
    def price_max(self, price_max):
        """
        Sets the price_max of this SecondMarketRequest.
        Price amount max

        :param price_max: The price_max of this SecondMarketRequest.
        :type: float
        """

        self._price_max = price_max

    @property
    def use_of_loan(self):
        """
        Gets the use_of_loan of this SecondMarketRequest.
        Use of loan

        :return: The use_of_loan of this SecondMarketRequest.
        :rtype: int
        """
        return self._use_of_loan

    @use_of_loan.setter
    def use_of_loan(self, use_of_loan):
        """
        Sets the use_of_loan of this SecondMarketRequest.
        Use of loan

        :param use_of_loan: The use_of_loan of this SecondMarketRequest.
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, -1]
        if use_of_loan not in allowed_values:
            raise ValueError(
                "Invalid value for `use_of_loan` ({0}), must be one of {1}"
                .format(use_of_loan, allowed_values)
            )

        self._use_of_loan = use_of_loan

    @property
    def has_new_schedule(self):
        """
        Gets the has_new_schedule of this SecondMarketRequest.
        Has been rescheduled

        :return: The has_new_schedule of this SecondMarketRequest.
        :rtype: bool
        """
        return self._has_new_schedule

    @has_new_schedule.setter
    def has_new_schedule(self, has_new_schedule):
        """
        Sets the has_new_schedule of this SecondMarketRequest.
        Has been rescheduled

        :param has_new_schedule: The has_new_schedule of this SecondMarketRequest.
        :type: bool
        """

        self._has_new_schedule = has_new_schedule

    @property
    def countries(self):
        """
        Gets the countries of this SecondMarketRequest.
        Two letter iso code for country of origin: EE, ES, FI

        :return: The countries of this SecondMarketRequest.
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this SecondMarketRequest.
        Two letter iso code for country of origin: EE, ES, FI

        :param countries: The countries of this SecondMarketRequest.
        :type: list[str]
        """

        self._countries = countries

    @property
    def ratings(self):
        """
        Gets the ratings of this SecondMarketRequest.
        Bondora's rating: AA, A, B, C, D, E, F, HR

        :return: The ratings of this SecondMarketRequest.
        :rtype: list[str]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """
        Sets the ratings of this SecondMarketRequest.
        Bondora's rating: AA, A, B, C, D, E, F, HR

        :param ratings: The ratings of this SecondMarketRequest.
        :type: list[str]
        """

        self._ratings = ratings

    @property
    def credit_score_min(self):
        """
        Gets the credit_score_min of this SecondMarketRequest.
        Minimum credit score

        :return: The credit_score_min of this SecondMarketRequest.
        :rtype: int
        """
        return self._credit_score_min

    @credit_score_min.setter
    def credit_score_min(self, credit_score_min):
        """
        Sets the credit_score_min of this SecondMarketRequest.
        Minimum credit score

        :param credit_score_min: The credit_score_min of this SecondMarketRequest.
        :type: int
        """

        self._credit_score_min = credit_score_min

    @property
    def credit_score_max(self):
        """
        Gets the credit_score_max of this SecondMarketRequest.
        Maximum credit score

        :return: The credit_score_max of this SecondMarketRequest.
        :rtype: int
        """
        return self._credit_score_max

    @credit_score_max.setter
    def credit_score_max(self, credit_score_max):
        """
        Sets the credit_score_max of this SecondMarketRequest.
        Maximum credit score

        :param credit_score_max: The credit_score_max of this SecondMarketRequest.
        :type: int
        """

        self._credit_score_max = credit_score_max

    @property
    def user_name(self):
        """
        Gets the user_name of this SecondMarketRequest.
        Borrower's username

        :return: The user_name of this SecondMarketRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this SecondMarketRequest.
        Borrower's username

        :param user_name: The user_name of this SecondMarketRequest.
        :type: str
        """

        self._user_name = user_name

    @property
    def gender(self):
        """
        Gets the gender of this SecondMarketRequest.
        Borrower's gender: Male 0, Female 1, Unknown 2

        :return: The gender of this SecondMarketRequest.
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this SecondMarketRequest.
        Borrower's gender: Male 0, Female 1, Unknown 2

        :param gender: The gender of this SecondMarketRequest.
        :type: int
        """

        self._gender = gender

    @property
    def age_min(self):
        """
        Gets the age_min of this SecondMarketRequest.
        Minimal age

        :return: The age_min of this SecondMarketRequest.
        :rtype: int
        """
        return self._age_min

    @age_min.setter
    def age_min(self, age_min):
        """
        Sets the age_min of this SecondMarketRequest.
        Minimal age

        :param age_min: The age_min of this SecondMarketRequest.
        :type: int
        """

        self._age_min = age_min

    @property
    def age_max(self):
        """
        Gets the age_max of this SecondMarketRequest.
        Maximum age

        :return: The age_max of this SecondMarketRequest.
        :rtype: int
        """
        return self._age_max

    @age_max.setter
    def age_max(self, age_max):
        """
        Sets the age_max of this SecondMarketRequest.
        Maximum age

        :param age_max: The age_max of this SecondMarketRequest.
        :type: int
        """

        self._age_max = age_max

    @property
    def income_verification_status(self):
        """
        Gets the income_verification_status of this SecondMarketRequest.
        Income verification type

        :return: The income_verification_status of this SecondMarketRequest.
        :rtype: int
        """
        return self._income_verification_status

    @income_verification_status.setter
    def income_verification_status(self, income_verification_status):
        """
        Sets the income_verification_status of this SecondMarketRequest.
        Income verification type

        :param income_verification_status: The income_verification_status of this SecondMarketRequest.
        :type: int
        """
        allowed_values = [1, 2, 3, 4]
        if income_verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `income_verification_status` ({0}), must be one of {1}"
                .format(income_verification_status, allowed_values)
            )

        self._income_verification_status = income_verification_status

    @property
    def show_my_items(self):
        """
        Gets the show_my_items of this SecondMarketRequest.
        Can find your own items from market: Value Null = ALL, True = only your items, False = other user items

        :return: The show_my_items of this SecondMarketRequest.
        :rtype: bool
        """
        return self._show_my_items

    @show_my_items.setter
    def show_my_items(self, show_my_items):
        """
        Sets the show_my_items of this SecondMarketRequest.
        Can find your own items from market: Value Null = ALL, True = only your items, False = other user items

        :param show_my_items: The show_my_items of this SecondMarketRequest.
        :type: bool
        """

        self._show_my_items = show_my_items

    @property
    def auction_id(self):
        """
        Gets the auction_id of this SecondMarketRequest.
        Can find specific auction from market

        :return: The auction_id of this SecondMarketRequest.
        :rtype: str
        """
        return self._auction_id

    @auction_id.setter
    def auction_id(self, auction_id):
        """
        Sets the auction_id of this SecondMarketRequest.
        Can find specific auction from market

        :param auction_id: The auction_id of this SecondMarketRequest.
        :type: str
        """

        self._auction_id = auction_id

    @property
    def listed_on_date_from(self):
        """
        Gets the listed_on_date_from of this SecondMarketRequest.
        Date when item was published from

        :return: The listed_on_date_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._listed_on_date_from

    @listed_on_date_from.setter
    def listed_on_date_from(self, listed_on_date_from):
        """
        Sets the listed_on_date_from of this SecondMarketRequest.
        Date when item was published from

        :param listed_on_date_from: The listed_on_date_from of this SecondMarketRequest.
        :type: datetime
        """

        self._listed_on_date_from = listed_on_date_from

    @property
    def listed_on_date_to(self):
        """
        Gets the listed_on_date_to of this SecondMarketRequest.
        Date when item was published to

        :return: The listed_on_date_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._listed_on_date_to

    @listed_on_date_to.setter
    def listed_on_date_to(self, listed_on_date_to):
        """
        Sets the listed_on_date_to of this SecondMarketRequest.
        Date when item was published to

        :param listed_on_date_to: The listed_on_date_to of this SecondMarketRequest.
        :type: datetime
        """

        self._listed_on_date_to = listed_on_date_to

    @property
    def debt_occured_on_from(self):
        """
        Gets the debt_occured_on_from of this SecondMarketRequest.
        Principal debt started date from

        :return: The debt_occured_on_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._debt_occured_on_from

    @debt_occured_on_from.setter
    def debt_occured_on_from(self, debt_occured_on_from):
        """
        Sets the debt_occured_on_from of this SecondMarketRequest.
        Principal debt started date from

        :param debt_occured_on_from: The debt_occured_on_from of this SecondMarketRequest.
        :type: datetime
        """

        self._debt_occured_on_from = debt_occured_on_from

    @property
    def debt_occured_on_to(self):
        """
        Gets the debt_occured_on_to of this SecondMarketRequest.
        Principal debt started date to

        :return: The debt_occured_on_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._debt_occured_on_to

    @debt_occured_on_to.setter
    def debt_occured_on_to(self, debt_occured_on_to):
        """
        Sets the debt_occured_on_to of this SecondMarketRequest.
        Principal debt started date to

        :param debt_occured_on_to: The debt_occured_on_to of this SecondMarketRequest.
        :type: datetime
        """

        self._debt_occured_on_to = debt_occured_on_to

    @property
    def debt_occured_on_for_secondary_from(self):
        """
        Gets the debt_occured_on_for_secondary_from of this SecondMarketRequest.
        Interest debt started date from

        :return: The debt_occured_on_for_secondary_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary_from

    @debt_occured_on_for_secondary_from.setter
    def debt_occured_on_for_secondary_from(self, debt_occured_on_for_secondary_from):
        """
        Sets the debt_occured_on_for_secondary_from of this SecondMarketRequest.
        Interest debt started date from

        :param debt_occured_on_for_secondary_from: The debt_occured_on_for_secondary_from of this SecondMarketRequest.
        :type: datetime
        """

        self._debt_occured_on_for_secondary_from = debt_occured_on_for_secondary_from

    @property
    def debt_occured_on_for_secondary_to(self):
        """
        Gets the debt_occured_on_for_secondary_to of this SecondMarketRequest.
        Interest debt started date to

        :return: The debt_occured_on_for_secondary_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary_to

    @debt_occured_on_for_secondary_to.setter
    def debt_occured_on_for_secondary_to(self, debt_occured_on_for_secondary_to):
        """
        Sets the debt_occured_on_for_secondary_to of this SecondMarketRequest.
        Interest debt started date to

        :param debt_occured_on_for_secondary_to: The debt_occured_on_for_secondary_to of this SecondMarketRequest.
        :type: datetime
        """

        self._debt_occured_on_for_secondary_to = debt_occured_on_for_secondary_to

    @property
    def defaulted_date_from(self):
        """
        Gets the defaulted_date_from of this SecondMarketRequest.
        Defaulted date from

        :return: The defaulted_date_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._defaulted_date_from

    @defaulted_date_from.setter
    def defaulted_date_from(self, defaulted_date_from):
        """
        Sets the defaulted_date_from of this SecondMarketRequest.
        Defaulted date from

        :param defaulted_date_from: The defaulted_date_from of this SecondMarketRequest.
        :type: datetime
        """

        self._defaulted_date_from = defaulted_date_from

    @property
    def defaulted_date_to(self):
        """
        Gets the defaulted_date_to of this SecondMarketRequest.
        Defaulted date to

        :return: The defaulted_date_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._defaulted_date_to

    @defaulted_date_to.setter
    def defaulted_date_to(self, defaulted_date_to):
        """
        Sets the defaulted_date_to of this SecondMarketRequest.
        Defaulted date to

        :param defaulted_date_to: The defaulted_date_to of this SecondMarketRequest.
        :type: datetime
        """

        self._defaulted_date_to = defaulted_date_to

    @property
    def rescheduled_from(self):
        """
        Gets the rescheduled_from of this SecondMarketRequest.
        Rescheduled date from

        :return: The rescheduled_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._rescheduled_from

    @rescheduled_from.setter
    def rescheduled_from(self, rescheduled_from):
        """
        Sets the rescheduled_from of this SecondMarketRequest.
        Rescheduled date from

        :param rescheduled_from: The rescheduled_from of this SecondMarketRequest.
        :type: datetime
        """

        self._rescheduled_from = rescheduled_from

    @property
    def rescheduled_to(self):
        """
        Gets the rescheduled_to of this SecondMarketRequest.
        Rescheduled date to

        :return: The rescheduled_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._rescheduled_to

    @rescheduled_to.setter
    def rescheduled_to(self, rescheduled_to):
        """
        Sets the rescheduled_to of this SecondMarketRequest.
        Rescheduled date to

        :param rescheduled_to: The rescheduled_to of this SecondMarketRequest.
        :type: datetime
        """

        self._rescheduled_to = rescheduled_to

    @property
    def last_payment_date_from(self):
        """
        Gets the last_payment_date_from of this SecondMarketRequest.
        Last payment date from

        :return: The last_payment_date_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._last_payment_date_from

    @last_payment_date_from.setter
    def last_payment_date_from(self, last_payment_date_from):
        """
        Sets the last_payment_date_from of this SecondMarketRequest.
        Last payment date from

        :param last_payment_date_from: The last_payment_date_from of this SecondMarketRequest.
        :type: datetime
        """

        self._last_payment_date_from = last_payment_date_from

    @property
    def last_payment_date_to(self):
        """
        Gets the last_payment_date_to of this SecondMarketRequest.
        Last payment date to

        :return: The last_payment_date_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._last_payment_date_to

    @last_payment_date_to.setter
    def last_payment_date_to(self, last_payment_date_to):
        """
        Sets the last_payment_date_to of this SecondMarketRequest.
        Last payment date to

        :param last_payment_date_to: The last_payment_date_to of this SecondMarketRequest.
        :type: datetime
        """

        self._last_payment_date_to = last_payment_date_to

    @property
    def next_payment_date_from(self):
        """
        Gets the next_payment_date_from of this SecondMarketRequest.
        Next payment date from

        :return: The next_payment_date_from of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._next_payment_date_from

    @next_payment_date_from.setter
    def next_payment_date_from(self, next_payment_date_from):
        """
        Sets the next_payment_date_from of this SecondMarketRequest.
        Next payment date from

        :param next_payment_date_from: The next_payment_date_from of this SecondMarketRequest.
        :type: datetime
        """

        self._next_payment_date_from = next_payment_date_from

    @property
    def next_payment_date_to(self):
        """
        Gets the next_payment_date_to of this SecondMarketRequest.
        Next payment date to

        :return: The next_payment_date_to of this SecondMarketRequest.
        :rtype: datetime
        """
        return self._next_payment_date_to

    @next_payment_date_to.setter
    def next_payment_date_to(self, next_payment_date_to):
        """
        Sets the next_payment_date_to of this SecondMarketRequest.
        Next payment date to

        :param next_payment_date_to: The next_payment_date_to of this SecondMarketRequest.
        :type: datetime
        """

        self._next_payment_date_to = next_payment_date_to

    @property
    def desired_discount_rate_min(self):
        """
        Gets the desired_discount_rate_min of this SecondMarketRequest.
        Minimal DesiredDiscountRate

        :return: The desired_discount_rate_min of this SecondMarketRequest.
        :rtype: float
        """
        return self._desired_discount_rate_min

    @desired_discount_rate_min.setter
    def desired_discount_rate_min(self, desired_discount_rate_min):
        """
        Sets the desired_discount_rate_min of this SecondMarketRequest.
        Minimal DesiredDiscountRate

        :param desired_discount_rate_min: The desired_discount_rate_min of this SecondMarketRequest.
        :type: float
        """

        self._desired_discount_rate_min = desired_discount_rate_min

    @property
    def desired_discount_rate_max(self):
        """
        Gets the desired_discount_rate_max of this SecondMarketRequest.
        Maximal DesiredDiscountRate

        :return: The desired_discount_rate_max of this SecondMarketRequest.
        :rtype: float
        """
        return self._desired_discount_rate_max

    @desired_discount_rate_max.setter
    def desired_discount_rate_max(self, desired_discount_rate_max):
        """
        Sets the desired_discount_rate_max of this SecondMarketRequest.
        Maximal DesiredDiscountRate

        :param desired_discount_rate_max: The desired_discount_rate_max of this SecondMarketRequest.
        :type: float
        """

        self._desired_discount_rate_max = desired_discount_rate_max

    @property
    def xirr_min(self):
        """
        Gets the xirr_min of this SecondMarketRequest.
        Minimal Xirr

        :return: The xirr_min of this SecondMarketRequest.
        :rtype: float
        """
        return self._xirr_min

    @xirr_min.setter
    def xirr_min(self, xirr_min):
        """
        Sets the xirr_min of this SecondMarketRequest.
        Minimal Xirr

        :param xirr_min: The xirr_min of this SecondMarketRequest.
        :type: float
        """

        self._xirr_min = xirr_min

    @property
    def xirr_max(self):
        """
        Gets the xirr_max of this SecondMarketRequest.
        Maximal Xirr

        :return: The xirr_max of this SecondMarketRequest.
        :rtype: float
        """
        return self._xirr_max

    @xirr_max.setter
    def xirr_max(self, xirr_max):
        """
        Sets the xirr_max of this SecondMarketRequest.
        Maximal Xirr

        :param xirr_max: The xirr_max of this SecondMarketRequest.
        :type: float
        """

        self._xirr_max = xirr_max

    @property
    def page_size(self):
        """
        Gets the page_size of this SecondMarketRequest.
        Max items in result, default is 1000

        :return: The page_size of this SecondMarketRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this SecondMarketRequest.
        Max items in result, default is 1000

        :param page_size: The page_size of this SecondMarketRequest.
        :type: int
        """

        if not page_size:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size > 1000.0:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000.0`")
        if page_size < 1.0:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1.0`")

        self._page_size = page_size

    @property
    def page_nr(self):
        """
        Gets the page_nr of this SecondMarketRequest.
        Result page nr

        :return: The page_nr of this SecondMarketRequest.
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """
        Sets the page_nr of this SecondMarketRequest.
        Result page nr

        :param page_nr: The page_nr of this SecondMarketRequest.
        :type: int
        """

        if not page_nr:
            raise ValueError("Invalid value for `page_nr`, must not be `None`")
        if page_nr > 2.147483647E9:
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2.147483647E9`")
        if page_nr < 1.0:
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1.0`")

        self._page_nr = page_nr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
