# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PublicDatasetItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, loan_id=None, loan_number=None, listed_on_utc=None, bidding_started_on=None, bids_portfolio_manager=None, bids_api=None, bids_manual=None, user_name=None, new_credit_customer=None, loan_application_started_date=None, loan_date=None, contract_end_date=None, first_payment_date=None, maturity_date_original=None, maturity_date_last=None, application_signed_hour=None, application_signed_weekday=None, verification_type=None, language_code=None, age=None, date_of_birth=None, gender=None, country=None, county=None, city=None, applied_amount=None, amount=None, interest=None, loan_duration=None, monthly_payment=None, use_of_loan=None, education=None, marital_status=None, nr_of_dependants=None, employment_status=None, employment_duration_current_employer=None, employment_position=None, work_experience=None, occupation_area=None, home_ownership_type=None, income_from_principal_employer=None, income_from_pension=None, income_from_family_allowance=None, income_from_social_welfare=None, income_from_leave_pay=None, income_from_child_support=None, income_other=None, income_total=None, existing_liabilities=None, refinance_liabilities=None, liabilities_total=None, debt_to_income=None, free_cash=None, monthly_payment_day=None, active_schedule_first_payment_reached=None, planned_principal_till_date=None, planned_interest_till_date=None, last_payment_on=None, current_debt_days_primary=None, debt_occured_on=None, current_debt_days_secondary=None, debt_occured_on_for_secondary=None, expected_loss=None, loss_given_default=None, expected_return=None, probability_of_default=None, default_date=None, principal_overdue_by_schedule=None, planned_principal_post_default=None, planned_interest_post_default=None, ead1=None, ead2=None, principal_recovery=None, interest_recovery=None, recovery_stage=None, stage_active_since=None, model_version=None, rating=None, el_v0=None, rating_v0=None, el_v1=None, rating_v1=None, el_v2=None, rating_v2=None, loan_cancelled=None, status=None, restructured=None, active_late_category=None, worse_late_category=None, credit_score_es_micro_l=None, credit_score_es_equifax_risk=None, credit_score_fi_asiakas_tieto_risk_grade=None, credit_score_ee_mini=None, principal_payments_made=None, interest_and_penalty_payments_made=None, principal_write_offs=None, interest_and_penalty_write_offs=None, principal_debt_servicing_cost=None, interest_and_penalty_debt_servicing_cost=None, principal_balance=None, interest_and_penalty_balance=None, no_of_previous_loans_before_loan=None, amount_of_previous_loans_before_loan=None, previous_repayments_before_loan=None, previous_early_repayments_before_loan=None, previous_early_repayments_count_before_loan=None, grace_period_start=None, grace_period_end=None, next_payment_date=None, next_payment_nr=None, nr_of_scheduled_payments=None, re_scheduled_on=None):
        """
        PublicDatasetItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'loan_id': 'str',
            'loan_number': 'int',
            'listed_on_utc': 'datetime',
            'bidding_started_on': 'datetime',
            'bids_portfolio_manager': 'float',
            'bids_api': 'float',
            'bids_manual': 'float',
            'user_name': 'str',
            'new_credit_customer': 'bool',
            'loan_application_started_date': 'datetime',
            'loan_date': 'datetime',
            'contract_end_date': 'datetime',
            'first_payment_date': 'datetime',
            'maturity_date_original': 'datetime',
            'maturity_date_last': 'datetime',
            'application_signed_hour': 'int',
            'application_signed_weekday': 'int',
            'verification_type': 'int',
            'language_code': 'int',
            'age': 'int',
            'date_of_birth': 'datetime',
            'gender': 'int',
            'country': 'str',
            'county': 'str',
            'city': 'str',
            'applied_amount': 'float',
            'amount': 'float',
            'interest': 'float',
            'loan_duration': 'int',
            'monthly_payment': 'int',
            'use_of_loan': 'int',
            'education': 'int',
            'marital_status': 'int',
            'nr_of_dependants': 'str',
            'employment_status': 'int',
            'employment_duration_current_employer': 'str',
            'employment_position': 'str',
            'work_experience': 'str',
            'occupation_area': 'int',
            'home_ownership_type': 'int',
            'income_from_principal_employer': 'float',
            'income_from_pension': 'float',
            'income_from_family_allowance': 'float',
            'income_from_social_welfare': 'float',
            'income_from_leave_pay': 'float',
            'income_from_child_support': 'float',
            'income_other': 'float',
            'income_total': 'float',
            'existing_liabilities': 'int',
            'refinance_liabilities': 'int',
            'liabilities_total': 'float',
            'debt_to_income': 'float',
            'free_cash': 'float',
            'monthly_payment_day': 'int',
            'active_schedule_first_payment_reached': 'bool',
            'planned_principal_till_date': 'float',
            'planned_interest_till_date': 'float',
            'last_payment_on': 'datetime',
            'current_debt_days_primary': 'int',
            'debt_occured_on': 'datetime',
            'current_debt_days_secondary': 'int',
            'debt_occured_on_for_secondary': 'datetime',
            'expected_loss': 'float',
            'loss_given_default': 'float',
            'expected_return': 'float',
            'probability_of_default': 'float',
            'default_date': 'datetime',
            'principal_overdue_by_schedule': 'float',
            'planned_principal_post_default': 'float',
            'planned_interest_post_default': 'float',
            'ead1': 'float',
            'ead2': 'float',
            'principal_recovery': 'float',
            'interest_recovery': 'float',
            'recovery_stage': 'int',
            'stage_active_since': 'datetime',
            'model_version': 'int',
            'rating': 'str',
            'el_v0': 'float',
            'rating_v0': 'str',
            'el_v1': 'float',
            'rating_v1': 'str',
            'el_v2': 'float',
            'rating_v2': 'str',
            'loan_cancelled': 'bool',
            'status': 'str',
            'restructured': 'bool',
            'active_late_category': 'str',
            'worse_late_category': 'str',
            'credit_score_es_micro_l': 'str',
            'credit_score_es_equifax_risk': 'str',
            'credit_score_fi_asiakas_tieto_risk_grade': 'str',
            'credit_score_ee_mini': 'str',
            'principal_payments_made': 'float',
            'interest_and_penalty_payments_made': 'float',
            'principal_write_offs': 'float',
            'interest_and_penalty_write_offs': 'float',
            'principal_debt_servicing_cost': 'float',
            'interest_and_penalty_debt_servicing_cost': 'float',
            'principal_balance': 'float',
            'interest_and_penalty_balance': 'float',
            'no_of_previous_loans_before_loan': 'int',
            'amount_of_previous_loans_before_loan': 'float',
            'previous_repayments_before_loan': 'float',
            'previous_early_repayments_before_loan': 'float',
            'previous_early_repayments_count_before_loan': 'int',
            'grace_period_start': 'datetime',
            'grace_period_end': 'datetime',
            'next_payment_date': 'datetime',
            'next_payment_nr': 'int',
            'nr_of_scheduled_payments': 'int',
            're_scheduled_on': 'datetime'
        }

        self.attribute_map = {
            'loan_id': 'LoanId',
            'loan_number': 'LoanNumber',
            'listed_on_utc': 'ListedOnUTC',
            'bidding_started_on': 'BiddingStartedOn',
            'bids_portfolio_manager': 'BidsPortfolioManager',
            'bids_api': 'BidsApi',
            'bids_manual': 'BidsManual',
            'user_name': 'UserName',
            'new_credit_customer': 'NewCreditCustomer',
            'loan_application_started_date': 'LoanApplicationStartedDate',
            'loan_date': 'LoanDate',
            'contract_end_date': 'ContractEndDate',
            'first_payment_date': 'FirstPaymentDate',
            'maturity_date_original': 'MaturityDate_Original',
            'maturity_date_last': 'MaturityDate_Last',
            'application_signed_hour': 'ApplicationSignedHour',
            'application_signed_weekday': 'ApplicationSignedWeekday',
            'verification_type': 'VerificationType',
            'language_code': 'LanguageCode',
            'age': 'Age',
            'date_of_birth': 'DateOfBirth',
            'gender': 'Gender',
            'country': 'Country',
            'county': 'County',
            'city': 'City',
            'applied_amount': 'AppliedAmount',
            'amount': 'Amount',
            'interest': 'Interest',
            'loan_duration': 'LoanDuration',
            'monthly_payment': 'MonthlyPayment',
            'use_of_loan': 'UseOfLoan',
            'education': 'Education',
            'marital_status': 'MaritalStatus',
            'nr_of_dependants': 'NrOfDependants',
            'employment_status': 'EmploymentStatus',
            'employment_duration_current_employer': 'EmploymentDurationCurrentEmployer',
            'employment_position': 'EmploymentPosition',
            'work_experience': 'WorkExperience',
            'occupation_area': 'OccupationArea',
            'home_ownership_type': 'HomeOwnershipType',
            'income_from_principal_employer': 'IncomeFromPrincipalEmployer',
            'income_from_pension': 'IncomeFromPension',
            'income_from_family_allowance': 'IncomeFromFamilyAllowance',
            'income_from_social_welfare': 'IncomeFromSocialWelfare',
            'income_from_leave_pay': 'IncomeFromLeavePay',
            'income_from_child_support': 'IncomeFromChildSupport',
            'income_other': 'IncomeOther',
            'income_total': 'IncomeTotal',
            'existing_liabilities': 'ExistingLiabilities',
            'refinance_liabilities': 'RefinanceLiabilities',
            'liabilities_total': 'LiabilitiesTotal',
            'debt_to_income': 'DebtToIncome',
            'free_cash': 'FreeCash',
            'monthly_payment_day': 'MonthlyPaymentDay',
            'active_schedule_first_payment_reached': 'ActiveScheduleFirstPaymentReached',
            'planned_principal_till_date': 'PlannedPrincipalTillDate',
            'planned_interest_till_date': 'PlannedInterestTillDate',
            'last_payment_on': 'LastPaymentOn',
            'current_debt_days_primary': 'CurrentDebtDaysPrimary',
            'debt_occured_on': 'DebtOccuredOn',
            'current_debt_days_secondary': 'CurrentDebtDaysSecondary',
            'debt_occured_on_for_secondary': 'DebtOccuredOnForSecondary',
            'expected_loss': 'ExpectedLoss',
            'loss_given_default': 'LossGivenDefault',
            'expected_return': 'ExpectedReturn',
            'probability_of_default': 'ProbabilityOfDefault',
            'default_date': 'DefaultDate',
            'principal_overdue_by_schedule': 'PrincipalOverdueBySchedule',
            'planned_principal_post_default': 'PlannedPrincipalPostDefault',
            'planned_interest_post_default': 'PlannedInterestPostDefault',
            'ead1': 'EAD1',
            'ead2': 'EAD2',
            'principal_recovery': 'PrincipalRecovery',
            'interest_recovery': 'InterestRecovery',
            'recovery_stage': 'RecoveryStage',
            'stage_active_since': 'StageActiveSince',
            'model_version': 'ModelVersion',
            'rating': 'Rating',
            'el_v0': 'EL_V0',
            'rating_v0': 'Rating_V0',
            'el_v1': 'EL_V1',
            'rating_v1': 'Rating_V1',
            'el_v2': 'EL_V2',
            'rating_v2': 'Rating_V2',
            'loan_cancelled': 'LoanCancelled',
            'status': 'Status',
            'restructured': 'Restructured',
            'active_late_category': 'ActiveLateCategory',
            'worse_late_category': 'WorseLateCategory',
            'credit_score_es_micro_l': 'CreditScoreEsMicroL',
            'credit_score_es_equifax_risk': 'CreditScoreEsEquifaxRisk',
            'credit_score_fi_asiakas_tieto_risk_grade': 'CreditScoreFiAsiakasTietoRiskGrade',
            'credit_score_ee_mini': 'CreditScoreEeMini',
            'principal_payments_made': 'PrincipalPaymentsMade',
            'interest_and_penalty_payments_made': 'InterestAndPenaltyPaymentsMade',
            'principal_write_offs': 'PrincipalWriteOffs',
            'interest_and_penalty_write_offs': 'InterestAndPenaltyWriteOffs',
            'principal_debt_servicing_cost': 'PrincipalDebtServicingCost',
            'interest_and_penalty_debt_servicing_cost': 'InterestAndPenaltyDebtServicingCost',
            'principal_balance': 'PrincipalBalance',
            'interest_and_penalty_balance': 'InterestAndPenaltyBalance',
            'no_of_previous_loans_before_loan': 'NoOfPreviousLoansBeforeLoan',
            'amount_of_previous_loans_before_loan': 'AmountOfPreviousLoansBeforeLoan',
            'previous_repayments_before_loan': 'PreviousRepaymentsBeforeLoan',
            'previous_early_repayments_before_loan': 'PreviousEarlyRepaymentsBeforeLoan',
            'previous_early_repayments_count_before_loan': 'PreviousEarlyRepaymentsCountBeforeLoan',
            'grace_period_start': 'GracePeriodStart',
            'grace_period_end': 'GracePeriodEnd',
            'next_payment_date': 'NextPaymentDate',
            'next_payment_nr': 'NextPaymentNr',
            'nr_of_scheduled_payments': 'NrOfScheduledPayments',
            're_scheduled_on': 'ReScheduledOn'
        }

        self._loan_id = loan_id
        self._loan_number = loan_number
        self._listed_on_utc = listed_on_utc
        self._bidding_started_on = bidding_started_on
        self._bids_portfolio_manager = bids_portfolio_manager
        self._bids_api = bids_api
        self._bids_manual = bids_manual
        self._user_name = user_name
        self._new_credit_customer = new_credit_customer
        self._loan_application_started_date = loan_application_started_date
        self._loan_date = loan_date
        self._contract_end_date = contract_end_date
        self._first_payment_date = first_payment_date
        self._maturity_date_original = maturity_date_original
        self._maturity_date_last = maturity_date_last
        self._application_signed_hour = application_signed_hour
        self._application_signed_weekday = application_signed_weekday
        self._verification_type = verification_type
        self._language_code = language_code
        self._age = age
        self._date_of_birth = date_of_birth
        self._gender = gender
        self._country = country
        self._county = county
        self._city = city
        self._applied_amount = applied_amount
        self._amount = amount
        self._interest = interest
        self._loan_duration = loan_duration
        self._monthly_payment = monthly_payment
        self._use_of_loan = use_of_loan
        self._education = education
        self._marital_status = marital_status
        self._nr_of_dependants = nr_of_dependants
        self._employment_status = employment_status
        self._employment_duration_current_employer = employment_duration_current_employer
        self._employment_position = employment_position
        self._work_experience = work_experience
        self._occupation_area = occupation_area
        self._home_ownership_type = home_ownership_type
        self._income_from_principal_employer = income_from_principal_employer
        self._income_from_pension = income_from_pension
        self._income_from_family_allowance = income_from_family_allowance
        self._income_from_social_welfare = income_from_social_welfare
        self._income_from_leave_pay = income_from_leave_pay
        self._income_from_child_support = income_from_child_support
        self._income_other = income_other
        self._income_total = income_total
        self._existing_liabilities = existing_liabilities
        self._refinance_liabilities = refinance_liabilities
        self._liabilities_total = liabilities_total
        self._debt_to_income = debt_to_income
        self._free_cash = free_cash
        self._monthly_payment_day = monthly_payment_day
        self._active_schedule_first_payment_reached = active_schedule_first_payment_reached
        self._planned_principal_till_date = planned_principal_till_date
        self._planned_interest_till_date = planned_interest_till_date
        self._last_payment_on = last_payment_on
        self._current_debt_days_primary = current_debt_days_primary
        self._debt_occured_on = debt_occured_on
        self._current_debt_days_secondary = current_debt_days_secondary
        self._debt_occured_on_for_secondary = debt_occured_on_for_secondary
        self._expected_loss = expected_loss
        self._loss_given_default = loss_given_default
        self._expected_return = expected_return
        self._probability_of_default = probability_of_default
        self._default_date = default_date
        self._principal_overdue_by_schedule = principal_overdue_by_schedule
        self._planned_principal_post_default = planned_principal_post_default
        self._planned_interest_post_default = planned_interest_post_default
        self._ead1 = ead1
        self._ead2 = ead2
        self._principal_recovery = principal_recovery
        self._interest_recovery = interest_recovery
        self._recovery_stage = recovery_stage
        self._stage_active_since = stage_active_since
        self._model_version = model_version
        self._rating = rating
        self._el_v0 = el_v0
        self._rating_v0 = rating_v0
        self._el_v1 = el_v1
        self._rating_v1 = rating_v1
        self._el_v2 = el_v2
        self._rating_v2 = rating_v2
        self._loan_cancelled = loan_cancelled
        self._status = status
        self._restructured = restructured
        self._active_late_category = active_late_category
        self._worse_late_category = worse_late_category
        self._credit_score_es_micro_l = credit_score_es_micro_l
        self._credit_score_es_equifax_risk = credit_score_es_equifax_risk
        self._credit_score_fi_asiakas_tieto_risk_grade = credit_score_fi_asiakas_tieto_risk_grade
        self._credit_score_ee_mini = credit_score_ee_mini
        self._principal_payments_made = principal_payments_made
        self._interest_and_penalty_payments_made = interest_and_penalty_payments_made
        self._principal_write_offs = principal_write_offs
        self._interest_and_penalty_write_offs = interest_and_penalty_write_offs
        self._principal_debt_servicing_cost = principal_debt_servicing_cost
        self._interest_and_penalty_debt_servicing_cost = interest_and_penalty_debt_servicing_cost
        self._principal_balance = principal_balance
        self._interest_and_penalty_balance = interest_and_penalty_balance
        self._no_of_previous_loans_before_loan = no_of_previous_loans_before_loan
        self._amount_of_previous_loans_before_loan = amount_of_previous_loans_before_loan
        self._previous_repayments_before_loan = previous_repayments_before_loan
        self._previous_early_repayments_before_loan = previous_early_repayments_before_loan
        self._previous_early_repayments_count_before_loan = previous_early_repayments_count_before_loan
        self._grace_period_start = grace_period_start
        self._grace_period_end = grace_period_end
        self._next_payment_date = next_payment_date
        self._next_payment_nr = next_payment_nr
        self._nr_of_scheduled_payments = nr_of_scheduled_payments
        self._re_scheduled_on = re_scheduled_on

    @property
    def loan_id(self):
        """
        Gets the loan_id of this PublicDatasetItem.
        A unique ID given to a loan

        :return: The loan_id of this PublicDatasetItem.
        :rtype: str
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """
        Sets the loan_id of this PublicDatasetItem.
        A unique ID given to a loan

        :param loan_id: The loan_id of this PublicDatasetItem.
        :type: str
        """

        self._loan_id = loan_id

    @property
    def loan_number(self):
        """
        Gets the loan_number of this PublicDatasetItem.
        A unique loan number displayed in Bondora's system

        :return: The loan_number of this PublicDatasetItem.
        :rtype: int
        """
        return self._loan_number

    @loan_number.setter
    def loan_number(self, loan_number):
        """
        Sets the loan_number of this PublicDatasetItem.
        A unique loan number displayed in Bondora's system

        :param loan_number: The loan_number of this PublicDatasetItem.
        :type: int
        """

        self._loan_number = loan_number

    @property
    def listed_on_utc(self):
        """
        Gets the listed_on_utc of this PublicDatasetItem.
        Date when the loan application appeared on Primary Market

        :return: The listed_on_utc of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._listed_on_utc

    @listed_on_utc.setter
    def listed_on_utc(self, listed_on_utc):
        """
        Sets the listed_on_utc of this PublicDatasetItem.
        Date when the loan application appeared on Primary Market

        :param listed_on_utc: The listed_on_utc of this PublicDatasetItem.
        :type: datetime
        """

        self._listed_on_utc = listed_on_utc

    @property
    def bidding_started_on(self):
        """
        Gets the bidding_started_on of this PublicDatasetItem.
        Date when the auction bidding started on

        :return: The bidding_started_on of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._bidding_started_on

    @bidding_started_on.setter
    def bidding_started_on(self, bidding_started_on):
        """
        Sets the bidding_started_on of this PublicDatasetItem.
        Date when the auction bidding started on

        :param bidding_started_on: The bidding_started_on of this PublicDatasetItem.
        :type: datetime
        """

        self._bidding_started_on = bidding_started_on

    @property
    def bids_portfolio_manager(self):
        """
        Gets the bids_portfolio_manager of this PublicDatasetItem.
        The amount of investment offers made by Portfolio Managers

        :return: The bids_portfolio_manager of this PublicDatasetItem.
        :rtype: float
        """
        return self._bids_portfolio_manager

    @bids_portfolio_manager.setter
    def bids_portfolio_manager(self, bids_portfolio_manager):
        """
        Sets the bids_portfolio_manager of this PublicDatasetItem.
        The amount of investment offers made by Portfolio Managers

        :param bids_portfolio_manager: The bids_portfolio_manager of this PublicDatasetItem.
        :type: float
        """

        self._bids_portfolio_manager = bids_portfolio_manager

    @property
    def bids_api(self):
        """
        Gets the bids_api of this PublicDatasetItem.
        The amount of investment offers made via Api

        :return: The bids_api of this PublicDatasetItem.
        :rtype: float
        """
        return self._bids_api

    @bids_api.setter
    def bids_api(self, bids_api):
        """
        Sets the bids_api of this PublicDatasetItem.
        The amount of investment offers made via Api

        :param bids_api: The bids_api of this PublicDatasetItem.
        :type: float
        """

        self._bids_api = bids_api

    @property
    def bids_manual(self):
        """
        Gets the bids_manual of this PublicDatasetItem.
        The amount of investment offers made manually

        :return: The bids_manual of this PublicDatasetItem.
        :rtype: float
        """
        return self._bids_manual

    @bids_manual.setter
    def bids_manual(self, bids_manual):
        """
        Sets the bids_manual of this PublicDatasetItem.
        The amount of investment offers made manually

        :param bids_manual: The bids_manual of this PublicDatasetItem.
        :type: float
        """

        self._bids_manual = bids_manual

    @property
    def user_name(self):
        """
        Gets the user_name of this PublicDatasetItem.
        Customer's Bondora username

        :return: The user_name of this PublicDatasetItem.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this PublicDatasetItem.
        Customer's Bondora username

        :param user_name: The user_name of this PublicDatasetItem.
        :type: str
        """

        self._user_name = user_name

    @property
    def new_credit_customer(self):
        """
        Gets the new_credit_customer of this PublicDatasetItem.
        <para>Did the customer have prior credit history in Bondora</para>  <para>    false Customer had at least 3 months of credit history in Bondora</para>  <para>    true No prior credit history in Bondora</para>

        :return: The new_credit_customer of this PublicDatasetItem.
        :rtype: bool
        """
        return self._new_credit_customer

    @new_credit_customer.setter
    def new_credit_customer(self, new_credit_customer):
        """
        Sets the new_credit_customer of this PublicDatasetItem.
        <para>Did the customer have prior credit history in Bondora</para>  <para>    false Customer had at least 3 months of credit history in Bondora</para>  <para>    true No prior credit history in Bondora</para>

        :param new_credit_customer: The new_credit_customer of this PublicDatasetItem.
        :type: bool
        """

        self._new_credit_customer = new_credit_customer

    @property
    def loan_application_started_date(self):
        """
        Gets the loan_application_started_date of this PublicDatasetItem.
        Date when the loan application was started

        :return: The loan_application_started_date of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._loan_application_started_date

    @loan_application_started_date.setter
    def loan_application_started_date(self, loan_application_started_date):
        """
        Sets the loan_application_started_date of this PublicDatasetItem.
        Date when the loan application was started

        :param loan_application_started_date: The loan_application_started_date of this PublicDatasetItem.
        :type: datetime
        """

        self._loan_application_started_date = loan_application_started_date

    @property
    def loan_date(self):
        """
        Gets the loan_date of this PublicDatasetItem.
        Date when the loan was issued

        :return: The loan_date of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._loan_date

    @loan_date.setter
    def loan_date(self, loan_date):
        """
        Sets the loan_date of this PublicDatasetItem.
        Date when the loan was issued

        :param loan_date: The loan_date of this PublicDatasetItem.
        :type: datetime
        """

        self._loan_date = loan_date

    @property
    def contract_end_date(self):
        """
        Gets the contract_end_date of this PublicDatasetItem.
        Date when the loan contract ended

        :return: The contract_end_date of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._contract_end_date

    @contract_end_date.setter
    def contract_end_date(self, contract_end_date):
        """
        Sets the contract_end_date of this PublicDatasetItem.
        Date when the loan contract ended

        :param contract_end_date: The contract_end_date of this PublicDatasetItem.
        :type: datetime
        """

        self._contract_end_date = contract_end_date

    @property
    def first_payment_date(self):
        """
        Gets the first_payment_date of this PublicDatasetItem.
        First payment date according to initial loan schedule

        :return: The first_payment_date of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._first_payment_date

    @first_payment_date.setter
    def first_payment_date(self, first_payment_date):
        """
        Sets the first_payment_date of this PublicDatasetItem.
        First payment date according to initial loan schedule

        :param first_payment_date: The first_payment_date of this PublicDatasetItem.
        :type: datetime
        """

        self._first_payment_date = first_payment_date

    @property
    def maturity_date_original(self):
        """
        Gets the maturity_date_original of this PublicDatasetItem.
        Loan maturity date according to the original loan schedule

        :return: The maturity_date_original of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._maturity_date_original

    @maturity_date_original.setter
    def maturity_date_original(self, maturity_date_original):
        """
        Sets the maturity_date_original of this PublicDatasetItem.
        Loan maturity date according to the original loan schedule

        :param maturity_date_original: The maturity_date_original of this PublicDatasetItem.
        :type: datetime
        """

        self._maturity_date_original = maturity_date_original

    @property
    def maturity_date_last(self):
        """
        Gets the maturity_date_last of this PublicDatasetItem.
        Loan maturity date as of the report generation date

        :return: The maturity_date_last of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._maturity_date_last

    @maturity_date_last.setter
    def maturity_date_last(self, maturity_date_last):
        """
        Sets the maturity_date_last of this PublicDatasetItem.
        Loan maturity date as of the report generation date

        :param maturity_date_last: The maturity_date_last of this PublicDatasetItem.
        :type: datetime
        """

        self._maturity_date_last = maturity_date_last

    @property
    def application_signed_hour(self):
        """
        Gets the application_signed_hour of this PublicDatasetItem.
        Hour of signing the loan application

        :return: The application_signed_hour of this PublicDatasetItem.
        :rtype: int
        """
        return self._application_signed_hour

    @application_signed_hour.setter
    def application_signed_hour(self, application_signed_hour):
        """
        Sets the application_signed_hour of this PublicDatasetItem.
        Hour of signing the loan application

        :param application_signed_hour: The application_signed_hour of this PublicDatasetItem.
        :type: int
        """

        self._application_signed_hour = application_signed_hour

    @property
    def application_signed_weekday(self):
        """
        Gets the application_signed_weekday of this PublicDatasetItem.
        Weekday of signing the loan application

        :return: The application_signed_weekday of this PublicDatasetItem.
        :rtype: int
        """
        return self._application_signed_weekday

    @application_signed_weekday.setter
    def application_signed_weekday(self, application_signed_weekday):
        """
        Sets the application_signed_weekday of this PublicDatasetItem.
        Weekday of signing the loan application

        :param application_signed_weekday: The application_signed_weekday of this PublicDatasetItem.
        :type: int
        """

        self._application_signed_weekday = application_signed_weekday

    @property
    def verification_type(self):
        """
        Gets the verification_type of this PublicDatasetItem.
        Method used for loan application data verification

        :return: The verification_type of this PublicDatasetItem.
        :rtype: int
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """
        Sets the verification_type of this PublicDatasetItem.
        Method used for loan application data verification

        :param verification_type: The verification_type of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4"]
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type

    @property
    def language_code(self):
        """
        Gets the language_code of this PublicDatasetItem.
        Customer two letter language code

        :return: The language_code of this PublicDatasetItem.
        :rtype: int
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """
        Sets the language_code of this PublicDatasetItem.
        Customer two letter language code

        :param language_code: The language_code of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"]
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"
                .format(language_code, allowed_values)
            )

        self._language_code = language_code

    @property
    def age(self):
        """
        Gets the age of this PublicDatasetItem.
        Age of the borrower (years)

        :return: The age of this PublicDatasetItem.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """
        Sets the age of this PublicDatasetItem.
        Age of the borrower (years)

        :param age: The age of this PublicDatasetItem.
        :type: int
        """

        self._age = age

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this PublicDatasetItem.
        DateOfBirth of the borrower

        :return: The date_of_birth of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this PublicDatasetItem.
        DateOfBirth of the borrower

        :param date_of_birth: The date_of_birth of this PublicDatasetItem.
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def gender(self):
        """
        Gets the gender of this PublicDatasetItem.
        Borrower gender

        :return: The gender of this PublicDatasetItem.
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this PublicDatasetItem.
        Borrower gender

        :param gender: The gender of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["0", "1", "2"]
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def country(self):
        """
        Gets the country of this PublicDatasetItem.
        Residency of the borrower

        :return: The country of this PublicDatasetItem.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this PublicDatasetItem.
        Residency of the borrower

        :param country: The country of this PublicDatasetItem.
        :type: str
        """

        self._country = country

    @property
    def county(self):
        """
        Gets the county of this PublicDatasetItem.
        County of the borrower

        :return: The county of this PublicDatasetItem.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """
        Sets the county of this PublicDatasetItem.
        County of the borrower

        :param county: The county of this PublicDatasetItem.
        :type: str
        """

        self._county = county

    @property
    def city(self):
        """
        Gets the city of this PublicDatasetItem.
        City of the borrower

        :return: The city of this PublicDatasetItem.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this PublicDatasetItem.
        City of the borrower

        :param city: The city of this PublicDatasetItem.
        :type: str
        """

        self._city = city

    @property
    def applied_amount(self):
        """
        Gets the applied_amount of this PublicDatasetItem.
        Amount applied

        :return: The applied_amount of this PublicDatasetItem.
        :rtype: float
        """
        return self._applied_amount

    @applied_amount.setter
    def applied_amount(self, applied_amount):
        """
        Sets the applied_amount of this PublicDatasetItem.
        Amount applied

        :param applied_amount: The applied_amount of this PublicDatasetItem.
        :type: float
        """

        self._applied_amount = applied_amount

    @property
    def amount(self):
        """
        Gets the amount of this PublicDatasetItem.
        Amount the borrower received

        :return: The amount of this PublicDatasetItem.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this PublicDatasetItem.
        Amount the borrower received

        :param amount: The amount of this PublicDatasetItem.
        :type: float
        """

        self._amount = amount

    @property
    def interest(self):
        """
        Gets the interest of this PublicDatasetItem.
        Interest rate

        :return: The interest of this PublicDatasetItem.
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """
        Sets the interest of this PublicDatasetItem.
        Interest rate

        :param interest: The interest of this PublicDatasetItem.
        :type: float
        """

        self._interest = interest

    @property
    def loan_duration(self):
        """
        Gets the loan_duration of this PublicDatasetItem.
        The loan term

        :return: The loan_duration of this PublicDatasetItem.
        :rtype: int
        """
        return self._loan_duration

    @loan_duration.setter
    def loan_duration(self, loan_duration):
        """
        Sets the loan_duration of this PublicDatasetItem.
        The loan term

        :param loan_duration: The loan_duration of this PublicDatasetItem.
        :type: int
        """

        self._loan_duration = loan_duration

    @property
    def monthly_payment(self):
        """
        Gets the monthly_payment of this PublicDatasetItem.
        Estimated amount the borrower has to pay every month

        :return: The monthly_payment of this PublicDatasetItem.
        :rtype: int
        """
        return self._monthly_payment

    @monthly_payment.setter
    def monthly_payment(self, monthly_payment):
        """
        Sets the monthly_payment of this PublicDatasetItem.
        Estimated amount the borrower has to pay every month

        :param monthly_payment: The monthly_payment of this PublicDatasetItem.
        :type: int
        """

        self._monthly_payment = monthly_payment

    @property
    def use_of_loan(self):
        """
        Gets the use_of_loan of this PublicDatasetItem.
        Use of loan

        :return: The use_of_loan of this PublicDatasetItem.
        :rtype: int
        """
        return self._use_of_loan

    @use_of_loan.setter
    def use_of_loan(self, use_of_loan):
        """
        Sets the use_of_loan of this PublicDatasetItem.
        Use of loan

        :param use_of_loan: The use_of_loan of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "-1"]
        if use_of_loan not in allowed_values:
            raise ValueError(
                "Invalid value for `use_of_loan` ({0}), must be one of {1}"
                .format(use_of_loan, allowed_values)
            )

        self._use_of_loan = use_of_loan

    @property
    def education(self):
        """
        Gets the education of this PublicDatasetItem.
        Education

        :return: The education of this PublicDatasetItem.
        :rtype: int
        """
        return self._education

    @education.setter
    def education(self, education):
        """
        Sets the education of this PublicDatasetItem.
        Education

        :param education: The education of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4", "5", "-1"]
        if education not in allowed_values:
            raise ValueError(
                "Invalid value for `education` ({0}), must be one of {1}"
                .format(education, allowed_values)
            )

        self._education = education

    @property
    def marital_status(self):
        """
        Gets the marital_status of this PublicDatasetItem.
        Marital status

        :return: The marital_status of this PublicDatasetItem.
        :rtype: int
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """
        Sets the marital_status of this PublicDatasetItem.
        Marital status

        :param marital_status: The marital_status of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4", "5", "-1"]
        if marital_status not in allowed_values:
            raise ValueError(
                "Invalid value for `marital_status` ({0}), must be one of {1}"
                .format(marital_status, allowed_values)
            )

        self._marital_status = marital_status

    @property
    def nr_of_dependants(self):
        """
        Gets the nr_of_dependants of this PublicDatasetItem.
        Number of children or other dependants

        :return: The nr_of_dependants of this PublicDatasetItem.
        :rtype: str
        """
        return self._nr_of_dependants

    @nr_of_dependants.setter
    def nr_of_dependants(self, nr_of_dependants):
        """
        Sets the nr_of_dependants of this PublicDatasetItem.
        Number of children or other dependants

        :param nr_of_dependants: The nr_of_dependants of this PublicDatasetItem.
        :type: str
        """

        self._nr_of_dependants = nr_of_dependants

    @property
    def employment_status(self):
        """
        Gets the employment_status of this PublicDatasetItem.
        Employment status

        :return: The employment_status of this PublicDatasetItem.
        :rtype: int
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """
        Sets the employment_status of this PublicDatasetItem.
        Employment status

        :param employment_status: The employment_status of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "-1"]
        if employment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status

    @property
    def employment_duration_current_employer(self):
        """
        Gets the employment_duration_current_employer of this PublicDatasetItem.
        Employment time with the current employer

        :return: The employment_duration_current_employer of this PublicDatasetItem.
        :rtype: str
        """
        return self._employment_duration_current_employer

    @employment_duration_current_employer.setter
    def employment_duration_current_employer(self, employment_duration_current_employer):
        """
        Sets the employment_duration_current_employer of this PublicDatasetItem.
        Employment time with the current employer

        :param employment_duration_current_employer: The employment_duration_current_employer of this PublicDatasetItem.
        :type: str
        """

        self._employment_duration_current_employer = employment_duration_current_employer

    @property
    def employment_position(self):
        """
        Gets the employment_position of this PublicDatasetItem.
        Employment position with the current employer

        :return: The employment_position of this PublicDatasetItem.
        :rtype: str
        """
        return self._employment_position

    @employment_position.setter
    def employment_position(self, employment_position):
        """
        Sets the employment_position of this PublicDatasetItem.
        Employment position with the current employer

        :param employment_position: The employment_position of this PublicDatasetItem.
        :type: str
        """

        self._employment_position = employment_position

    @property
    def work_experience(self):
        """
        Gets the work_experience of this PublicDatasetItem.
        Work experience in total

        :return: The work_experience of this PublicDatasetItem.
        :rtype: str
        """
        return self._work_experience

    @work_experience.setter
    def work_experience(self, work_experience):
        """
        Sets the work_experience of this PublicDatasetItem.
        Work experience in total

        :param work_experience: The work_experience of this PublicDatasetItem.
        :type: str
        """

        self._work_experience = work_experience

    @property
    def occupation_area(self):
        """
        Gets the occupation_area of this PublicDatasetItem.
        Occupation area

        :return: The occupation_area of this PublicDatasetItem.
        :rtype: int
        """
        return self._occupation_area

    @occupation_area.setter
    def occupation_area(self, occupation_area):
        """
        Sets the occupation_area of this PublicDatasetItem.
        Occupation area

        :param occupation_area: The occupation_area of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "-1"]
        if occupation_area not in allowed_values:
            raise ValueError(
                "Invalid value for `occupation_area` ({0}), must be one of {1}"
                .format(occupation_area, allowed_values)
            )

        self._occupation_area = occupation_area

    @property
    def home_ownership_type(self):
        """
        Gets the home_ownership_type of this PublicDatasetItem.
        Home ownership type

        :return: The home_ownership_type of this PublicDatasetItem.
        :rtype: int
        """
        return self._home_ownership_type

    @home_ownership_type.setter
    def home_ownership_type(self, home_ownership_type):
        """
        Sets the home_ownership_type of this PublicDatasetItem.
        Home ownership type

        :param home_ownership_type: The home_ownership_type of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "-1"]
        if home_ownership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `home_ownership_type` ({0}), must be one of {1}"
                .format(home_ownership_type, allowed_values)
            )

        self._home_ownership_type = home_ownership_type

    @property
    def income_from_principal_employer(self):
        """
        Gets the income_from_principal_employer of this PublicDatasetItem.
        Salary

        :return: The income_from_principal_employer of this PublicDatasetItem.
        :rtype: float
        """
        return self._income_from_principal_employer

    @income_from_principal_employer.setter
    def income_from_principal_employer(self, income_from_principal_employer):
        """
        Sets the income_from_principal_employer of this PublicDatasetItem.
        Salary

        :param income_from_principal_employer: The income_from_principal_employer of this PublicDatasetItem.
        :type: float
        """

        self._income_from_principal_employer = income_from_principal_employer

    @property
    def income_from_pension(self):
        """
        Gets the income_from_pension of this PublicDatasetItem.
        Pension

        :return: The income_from_pension of this PublicDatasetItem.
        :rtype: float
        """
        return self._income_from_pension

    @income_from_pension.setter
    def income_from_pension(self, income_from_pension):
        """
        Sets the income_from_pension of this PublicDatasetItem.
        Pension

        :param income_from_pension: The income_from_pension of this PublicDatasetItem.
        :type: float
        """

        self._income_from_pension = income_from_pension

    @property
    def income_from_family_allowance(self):
        """
        Gets the income_from_family_allowance of this PublicDatasetItem.
        Family allowance

        :return: The income_from_family_allowance of this PublicDatasetItem.
        :rtype: float
        """
        return self._income_from_family_allowance

    @income_from_family_allowance.setter
    def income_from_family_allowance(self, income_from_family_allowance):
        """
        Sets the income_from_family_allowance of this PublicDatasetItem.
        Family allowance

        :param income_from_family_allowance: The income_from_family_allowance of this PublicDatasetItem.
        :type: float
        """

        self._income_from_family_allowance = income_from_family_allowance

    @property
    def income_from_social_welfare(self):
        """
        Gets the income_from_social_welfare of this PublicDatasetItem.
        Social welfare

        :return: The income_from_social_welfare of this PublicDatasetItem.
        :rtype: float
        """
        return self._income_from_social_welfare

    @income_from_social_welfare.setter
    def income_from_social_welfare(self, income_from_social_welfare):
        """
        Sets the income_from_social_welfare of this PublicDatasetItem.
        Social welfare

        :param income_from_social_welfare: The income_from_social_welfare of this PublicDatasetItem.
        :type: float
        """

        self._income_from_social_welfare = income_from_social_welfare

    @property
    def income_from_leave_pay(self):
        """
        Gets the income_from_leave_pay of this PublicDatasetItem.
        Leave pay

        :return: The income_from_leave_pay of this PublicDatasetItem.
        :rtype: float
        """
        return self._income_from_leave_pay

    @income_from_leave_pay.setter
    def income_from_leave_pay(self, income_from_leave_pay):
        """
        Sets the income_from_leave_pay of this PublicDatasetItem.
        Leave pay

        :param income_from_leave_pay: The income_from_leave_pay of this PublicDatasetItem.
        :type: float
        """

        self._income_from_leave_pay = income_from_leave_pay

    @property
    def income_from_child_support(self):
        """
        Gets the income_from_child_support of this PublicDatasetItem.
        Child support

        :return: The income_from_child_support of this PublicDatasetItem.
        :rtype: float
        """
        return self._income_from_child_support

    @income_from_child_support.setter
    def income_from_child_support(self, income_from_child_support):
        """
        Sets the income_from_child_support of this PublicDatasetItem.
        Child support

        :param income_from_child_support: The income_from_child_support of this PublicDatasetItem.
        :type: float
        """

        self._income_from_child_support = income_from_child_support

    @property
    def income_other(self):
        """
        Gets the income_other of this PublicDatasetItem.
        Other income

        :return: The income_other of this PublicDatasetItem.
        :rtype: float
        """
        return self._income_other

    @income_other.setter
    def income_other(self, income_other):
        """
        Sets the income_other of this PublicDatasetItem.
        Other income

        :param income_other: The income_other of this PublicDatasetItem.
        :type: float
        """

        self._income_other = income_other

    @property
    def income_total(self):
        """
        Gets the income_total of this PublicDatasetItem.
        Total income

        :return: The income_total of this PublicDatasetItem.
        :rtype: float
        """
        return self._income_total

    @income_total.setter
    def income_total(self, income_total):
        """
        Sets the income_total of this PublicDatasetItem.
        Total income

        :param income_total: The income_total of this PublicDatasetItem.
        :type: float
        """

        self._income_total = income_total

    @property
    def existing_liabilities(self):
        """
        Gets the existing_liabilities of this PublicDatasetItem.
        Borrower's number of existing liabilities

        :return: The existing_liabilities of this PublicDatasetItem.
        :rtype: int
        """
        return self._existing_liabilities

    @existing_liabilities.setter
    def existing_liabilities(self, existing_liabilities):
        """
        Sets the existing_liabilities of this PublicDatasetItem.
        Borrower's number of existing liabilities

        :param existing_liabilities: The existing_liabilities of this PublicDatasetItem.
        :type: int
        """

        self._existing_liabilities = existing_liabilities

    @property
    def refinance_liabilities(self):
        """
        Gets the refinance_liabilities of this PublicDatasetItem.
        The total amount of liabilities after refinancing

        :return: The refinance_liabilities of this PublicDatasetItem.
        :rtype: int
        """
        return self._refinance_liabilities

    @refinance_liabilities.setter
    def refinance_liabilities(self, refinance_liabilities):
        """
        Sets the refinance_liabilities of this PublicDatasetItem.
        The total amount of liabilities after refinancing

        :param refinance_liabilities: The refinance_liabilities of this PublicDatasetItem.
        :type: int
        """

        self._refinance_liabilities = refinance_liabilities

    @property
    def liabilities_total(self):
        """
        Gets the liabilities_total of this PublicDatasetItem.
        Total monthly liabilities

        :return: The liabilities_total of this PublicDatasetItem.
        :rtype: float
        """
        return self._liabilities_total

    @liabilities_total.setter
    def liabilities_total(self, liabilities_total):
        """
        Sets the liabilities_total of this PublicDatasetItem.
        Total monthly liabilities

        :param liabilities_total: The liabilities_total of this PublicDatasetItem.
        :type: float
        """

        self._liabilities_total = liabilities_total

    @property
    def debt_to_income(self):
        """
        Gets the debt_to_income of this PublicDatasetItem.
        Debt to income ratio

        :return: The debt_to_income of this PublicDatasetItem.
        :rtype: float
        """
        return self._debt_to_income

    @debt_to_income.setter
    def debt_to_income(self, debt_to_income):
        """
        Sets the debt_to_income of this PublicDatasetItem.
        Debt to income ratio

        :param debt_to_income: The debt_to_income of this PublicDatasetItem.
        :type: float
        """

        self._debt_to_income = debt_to_income

    @property
    def free_cash(self):
        """
        Gets the free_cash of this PublicDatasetItem.
        Discretionary income after monthly liabilities

        :return: The free_cash of this PublicDatasetItem.
        :rtype: float
        """
        return self._free_cash

    @free_cash.setter
    def free_cash(self, free_cash):
        """
        Sets the free_cash of this PublicDatasetItem.
        Discretionary income after monthly liabilities

        :param free_cash: The free_cash of this PublicDatasetItem.
        :type: float
        """

        self._free_cash = free_cash

    @property
    def monthly_payment_day(self):
        """
        Gets the monthly_payment_day of this PublicDatasetItem.
        The day of the month the loan payments are scheduled for The actual date is adjusted for weekends and bank holidays (e.g. if 10th is Sunday then the payment will be made on the 11th in that month)

        :return: The monthly_payment_day of this PublicDatasetItem.
        :rtype: int
        """
        return self._monthly_payment_day

    @monthly_payment_day.setter
    def monthly_payment_day(self, monthly_payment_day):
        """
        Sets the monthly_payment_day of this PublicDatasetItem.
        The day of the month the loan payments are scheduled for The actual date is adjusted for weekends and bank holidays (e.g. if 10th is Sunday then the payment will be made on the 11th in that month)

        :param monthly_payment_day: The monthly_payment_day of this PublicDatasetItem.
        :type: int
        """

        self._monthly_payment_day = monthly_payment_day

    @property
    def active_schedule_first_payment_reached(self):
        """
        Gets the active_schedule_first_payment_reached of this PublicDatasetItem.
        Whether the first payment date has been reached according to the active schedule

        :return: The active_schedule_first_payment_reached of this PublicDatasetItem.
        :rtype: bool
        """
        return self._active_schedule_first_payment_reached

    @active_schedule_first_payment_reached.setter
    def active_schedule_first_payment_reached(self, active_schedule_first_payment_reached):
        """
        Sets the active_schedule_first_payment_reached of this PublicDatasetItem.
        Whether the first payment date has been reached according to the active schedule

        :param active_schedule_first_payment_reached: The active_schedule_first_payment_reached of this PublicDatasetItem.
        :type: bool
        """

        self._active_schedule_first_payment_reached = active_schedule_first_payment_reached

    @property
    def planned_principal_till_date(self):
        """
        Gets the planned_principal_till_date of this PublicDatasetItem.
        According to active schedule the amount of principal the investment should have received

        :return: The planned_principal_till_date of this PublicDatasetItem.
        :rtype: float
        """
        return self._planned_principal_till_date

    @planned_principal_till_date.setter
    def planned_principal_till_date(self, planned_principal_till_date):
        """
        Sets the planned_principal_till_date of this PublicDatasetItem.
        According to active schedule the amount of principal the investment should have received

        :param planned_principal_till_date: The planned_principal_till_date of this PublicDatasetItem.
        :type: float
        """

        self._planned_principal_till_date = planned_principal_till_date

    @property
    def planned_interest_till_date(self):
        """
        Gets the planned_interest_till_date of this PublicDatasetItem.
        According to active schedule the amount of interest the investment should have received

        :return: The planned_interest_till_date of this PublicDatasetItem.
        :rtype: float
        """
        return self._planned_interest_till_date

    @planned_interest_till_date.setter
    def planned_interest_till_date(self, planned_interest_till_date):
        """
        Sets the planned_interest_till_date of this PublicDatasetItem.
        According to active schedule the amount of interest the investment should have received

        :param planned_interest_till_date: The planned_interest_till_date of this PublicDatasetItem.
        :type: float
        """

        self._planned_interest_till_date = planned_interest_till_date

    @property
    def last_payment_on(self):
        """
        Gets the last_payment_on of this PublicDatasetItem.
        The date of the current last payment received from the borrower

        :return: The last_payment_on of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._last_payment_on

    @last_payment_on.setter
    def last_payment_on(self, last_payment_on):
        """
        Sets the last_payment_on of this PublicDatasetItem.
        The date of the current last payment received from the borrower

        :param last_payment_on: The last_payment_on of this PublicDatasetItem.
        :type: datetime
        """

        self._last_payment_on = last_payment_on

    @property
    def current_debt_days_primary(self):
        """
        Gets the current_debt_days_primary of this PublicDatasetItem.
        How long the loan has been in Principal Debt

        :return: The current_debt_days_primary of this PublicDatasetItem.
        :rtype: int
        """
        return self._current_debt_days_primary

    @current_debt_days_primary.setter
    def current_debt_days_primary(self, current_debt_days_primary):
        """
        Sets the current_debt_days_primary of this PublicDatasetItem.
        How long the loan has been in Principal Debt

        :param current_debt_days_primary: The current_debt_days_primary of this PublicDatasetItem.
        :type: int
        """

        self._current_debt_days_primary = current_debt_days_primary

    @property
    def debt_occured_on(self):
        """
        Gets the debt_occured_on of this PublicDatasetItem.
        The date when Principal Debt occurred

        :return: The debt_occured_on of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._debt_occured_on

    @debt_occured_on.setter
    def debt_occured_on(self, debt_occured_on):
        """
        Sets the debt_occured_on of this PublicDatasetItem.
        The date when Principal Debt occurred

        :param debt_occured_on: The debt_occured_on of this PublicDatasetItem.
        :type: datetime
        """

        self._debt_occured_on = debt_occured_on

    @property
    def current_debt_days_secondary(self):
        """
        Gets the current_debt_days_secondary of this PublicDatasetItem.
        How long the loan has been in Interest Debt

        :return: The current_debt_days_secondary of this PublicDatasetItem.
        :rtype: int
        """
        return self._current_debt_days_secondary

    @current_debt_days_secondary.setter
    def current_debt_days_secondary(self, current_debt_days_secondary):
        """
        Sets the current_debt_days_secondary of this PublicDatasetItem.
        How long the loan has been in Interest Debt

        :param current_debt_days_secondary: The current_debt_days_secondary of this PublicDatasetItem.
        :type: int
        """

        self._current_debt_days_secondary = current_debt_days_secondary

    @property
    def debt_occured_on_for_secondary(self):
        """
        Gets the debt_occured_on_for_secondary of this PublicDatasetItem.
        The date when Interest Debt occurred

        :return: The debt_occured_on_for_secondary of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary

    @debt_occured_on_for_secondary.setter
    def debt_occured_on_for_secondary(self, debt_occured_on_for_secondary):
        """
        Sets the debt_occured_on_for_secondary of this PublicDatasetItem.
        The date when Interest Debt occurred

        :param debt_occured_on_for_secondary: The debt_occured_on_for_secondary of this PublicDatasetItem.
        :type: datetime
        """

        self._debt_occured_on_for_secondary = debt_occured_on_for_secondary

    @property
    def expected_loss(self):
        """
        Gets the expected_loss of this PublicDatasetItem.
        Expected Loss calculated by the current Rating model

        :return: The expected_loss of this PublicDatasetItem.
        :rtype: float
        """
        return self._expected_loss

    @expected_loss.setter
    def expected_loss(self, expected_loss):
        """
        Sets the expected_loss of this PublicDatasetItem.
        Expected Loss calculated by the current Rating model

        :param expected_loss: The expected_loss of this PublicDatasetItem.
        :type: float
        """

        self._expected_loss = expected_loss

    @property
    def loss_given_default(self):
        """
        Gets the loss_given_default of this PublicDatasetItem.
        Gives the percentage of outstanding exposure at the time of default that an investor is likely to lose if a loan actually defaults.               This means the proportion of funds lost for the investor after all expected recovery and accounting for the time value of the money recovered.               In general, LGD parameter is intended to be estimated based on the historical recoveries.               However, in new markets where limited experience does not allow us more precise loss given default estimates, a LGD of 90% is assumed.

        :return: The loss_given_default of this PublicDatasetItem.
        :rtype: float
        """
        return self._loss_given_default

    @loss_given_default.setter
    def loss_given_default(self, loss_given_default):
        """
        Sets the loss_given_default of this PublicDatasetItem.
        Gives the percentage of outstanding exposure at the time of default that an investor is likely to lose if a loan actually defaults.               This means the proportion of funds lost for the investor after all expected recovery and accounting for the time value of the money recovered.               In general, LGD parameter is intended to be estimated based on the historical recoveries.               However, in new markets where limited experience does not allow us more precise loss given default estimates, a LGD of 90% is assumed.

        :param loss_given_default: The loss_given_default of this PublicDatasetItem.
        :type: float
        """

        self._loss_given_default = loss_given_default

    @property
    def expected_return(self):
        """
        Gets the expected_return of this PublicDatasetItem.
        Expected Return calculated by the current Rating model

        :return: The expected_return of this PublicDatasetItem.
        :rtype: float
        """
        return self._expected_return

    @expected_return.setter
    def expected_return(self, expected_return):
        """
        Sets the expected_return of this PublicDatasetItem.
        Expected Return calculated by the current Rating model

        :param expected_return: The expected_return of this PublicDatasetItem.
        :type: float
        """

        self._expected_return = expected_return

    @property
    def probability_of_default(self):
        """
        Gets the probability_of_default of this PublicDatasetItem.
        Probability of Default, refers to a loan’s probability of default within one year horizon.

        :return: The probability_of_default of this PublicDatasetItem.
        :rtype: float
        """
        return self._probability_of_default

    @probability_of_default.setter
    def probability_of_default(self, probability_of_default):
        """
        Sets the probability_of_default of this PublicDatasetItem.
        Probability of Default, refers to a loan’s probability of default within one year horizon.

        :param probability_of_default: The probability_of_default of this PublicDatasetItem.
        :type: float
        """

        self._probability_of_default = probability_of_default

    @property
    def default_date(self):
        """
        Gets the default_date of this PublicDatasetItem.
        The date when loan went into defaulted state and collection process was started

        :return: The default_date of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._default_date

    @default_date.setter
    def default_date(self, default_date):
        """
        Sets the default_date of this PublicDatasetItem.
        The date when loan went into defaulted state and collection process was started

        :param default_date: The default_date of this PublicDatasetItem.
        :type: datetime
        """

        self._default_date = default_date

    @property
    def principal_overdue_by_schedule(self):
        """
        Gets the principal_overdue_by_schedule of this PublicDatasetItem.
        According to the current schedule, principal that is overdue

        :return: The principal_overdue_by_schedule of this PublicDatasetItem.
        :rtype: float
        """
        return self._principal_overdue_by_schedule

    @principal_overdue_by_schedule.setter
    def principal_overdue_by_schedule(self, principal_overdue_by_schedule):
        """
        Sets the principal_overdue_by_schedule of this PublicDatasetItem.
        According to the current schedule, principal that is overdue

        :param principal_overdue_by_schedule: The principal_overdue_by_schedule of this PublicDatasetItem.
        :type: float
        """

        self._principal_overdue_by_schedule = principal_overdue_by_schedule

    @property
    def planned_principal_post_default(self):
        """
        Gets the planned_principal_post_default of this PublicDatasetItem.
        The amount of principal that was planned to be received after the default occurred

        :return: The planned_principal_post_default of this PublicDatasetItem.
        :rtype: float
        """
        return self._planned_principal_post_default

    @planned_principal_post_default.setter
    def planned_principal_post_default(self, planned_principal_post_default):
        """
        Sets the planned_principal_post_default of this PublicDatasetItem.
        The amount of principal that was planned to be received after the default occurred

        :param planned_principal_post_default: The planned_principal_post_default of this PublicDatasetItem.
        :type: float
        """

        self._planned_principal_post_default = planned_principal_post_default

    @property
    def planned_interest_post_default(self):
        """
        Gets the planned_interest_post_default of this PublicDatasetItem.
        The amount of interest that was planned to be received after the default occurred

        :return: The planned_interest_post_default of this PublicDatasetItem.
        :rtype: float
        """
        return self._planned_interest_post_default

    @planned_interest_post_default.setter
    def planned_interest_post_default(self, planned_interest_post_default):
        """
        Sets the planned_interest_post_default of this PublicDatasetItem.
        The amount of interest that was planned to be received after the default occurred

        :param planned_interest_post_default: The planned_interest_post_default of this PublicDatasetItem.
        :type: float
        """

        self._planned_interest_post_default = planned_interest_post_default

    @property
    def ead1(self):
        """
        Gets the ead1 of this PublicDatasetItem.
        Exposure at default, outstanding principal at default

        :return: The ead1 of this PublicDatasetItem.
        :rtype: float
        """
        return self._ead1

    @ead1.setter
    def ead1(self, ead1):
        """
        Sets the ead1 of this PublicDatasetItem.
        Exposure at default, outstanding principal at default

        :param ead1: The ead1 of this PublicDatasetItem.
        :type: float
        """

        self._ead1 = ead1

    @property
    def ead2(self):
        """
        Gets the ead2 of this PublicDatasetItem.
        Exposure at default, loan amount less all payments prior to default

        :return: The ead2 of this PublicDatasetItem.
        :rtype: float
        """
        return self._ead2

    @ead2.setter
    def ead2(self, ead2):
        """
        Sets the ead2 of this PublicDatasetItem.
        Exposure at default, loan amount less all payments prior to default

        :param ead2: The ead2 of this PublicDatasetItem.
        :type: float
        """

        self._ead2 = ead2

    @property
    def principal_recovery(self):
        """
        Gets the principal_recovery of this PublicDatasetItem.
        Principal recovered due to collection process from in debt loans

        :return: The principal_recovery of this PublicDatasetItem.
        :rtype: float
        """
        return self._principal_recovery

    @principal_recovery.setter
    def principal_recovery(self, principal_recovery):
        """
        Sets the principal_recovery of this PublicDatasetItem.
        Principal recovered due to collection process from in debt loans

        :param principal_recovery: The principal_recovery of this PublicDatasetItem.
        :type: float
        """

        self._principal_recovery = principal_recovery

    @property
    def interest_recovery(self):
        """
        Gets the interest_recovery of this PublicDatasetItem.
        Interest recovered due to collection process from in debt loans

        :return: The interest_recovery of this PublicDatasetItem.
        :rtype: float
        """
        return self._interest_recovery

    @interest_recovery.setter
    def interest_recovery(self, interest_recovery):
        """
        Sets the interest_recovery of this PublicDatasetItem.
        Interest recovered due to collection process from in debt loans

        :param interest_recovery: The interest_recovery of this PublicDatasetItem.
        :type: float
        """

        self._interest_recovery = interest_recovery

    @property
    def recovery_stage(self):
        """
        Gets the recovery_stage of this PublicDatasetItem.
        Current stage according to the recovery model 1 Collection 2 Recovery 3 Write Off

        :return: The recovery_stage of this PublicDatasetItem.
        :rtype: int
        """
        return self._recovery_stage

    @recovery_stage.setter
    def recovery_stage(self, recovery_stage):
        """
        Sets the recovery_stage of this PublicDatasetItem.
        Current stage according to the recovery model 1 Collection 2 Recovery 3 Write Off

        :param recovery_stage: The recovery_stage of this PublicDatasetItem.
        :type: int
        """
        allowed_values = ["1", "2", "3", "-1"]
        if recovery_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `recovery_stage` ({0}), must be one of {1}"
                .format(recovery_stage, allowed_values)
            )

        self._recovery_stage = recovery_stage

    @property
    def stage_active_since(self):
        """
        Gets the stage_active_since of this PublicDatasetItem.
        How long the current recovery stage has been active

        :return: The stage_active_since of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._stage_active_since

    @stage_active_since.setter
    def stage_active_since(self, stage_active_since):
        """
        Sets the stage_active_since of this PublicDatasetItem.
        How long the current recovery stage has been active

        :param stage_active_since: The stage_active_since of this PublicDatasetItem.
        :type: datetime
        """

        self._stage_active_since = stage_active_since

    @property
    def model_version(self):
        """
        Gets the model_version of this PublicDatasetItem.
        The version of the Rating model used for issuing the Bondora Rating

        :return: The model_version of this PublicDatasetItem.
        :rtype: int
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """
        Sets the model_version of this PublicDatasetItem.
        The version of the Rating model used for issuing the Bondora Rating

        :param model_version: The model_version of this PublicDatasetItem.
        :type: int
        """

        self._model_version = model_version

    @property
    def rating(self):
        """
        Gets the rating of this PublicDatasetItem.
        Bondora Rating issued by the Rating model

        :return: The rating of this PublicDatasetItem.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """
        Sets the rating of this PublicDatasetItem.
        Bondora Rating issued by the Rating model

        :param rating: The rating of this PublicDatasetItem.
        :type: str
        """

        self._rating = rating

    @property
    def el_v0(self):
        """
        Gets the el_v0 of this PublicDatasetItem.
        Expected loss calculated by the specified version of Rating model

        :return: The el_v0 of this PublicDatasetItem.
        :rtype: float
        """
        return self._el_v0

    @el_v0.setter
    def el_v0(self, el_v0):
        """
        Sets the el_v0 of this PublicDatasetItem.
        Expected loss calculated by the specified version of Rating model

        :param el_v0: The el_v0 of this PublicDatasetItem.
        :type: float
        """

        self._el_v0 = el_v0

    @property
    def rating_v0(self):
        """
        Gets the rating_v0 of this PublicDatasetItem.
        Bondora Rating issued by version 0 of the Rating model

        :return: The rating_v0 of this PublicDatasetItem.
        :rtype: str
        """
        return self._rating_v0

    @rating_v0.setter
    def rating_v0(self, rating_v0):
        """
        Sets the rating_v0 of this PublicDatasetItem.
        Bondora Rating issued by version 0 of the Rating model

        :param rating_v0: The rating_v0 of this PublicDatasetItem.
        :type: str
        """

        self._rating_v0 = rating_v0

    @property
    def el_v1(self):
        """
        Gets the el_v1 of this PublicDatasetItem.
        Expected loss calculated by the specified version of Rating model

        :return: The el_v1 of this PublicDatasetItem.
        :rtype: float
        """
        return self._el_v1

    @el_v1.setter
    def el_v1(self, el_v1):
        """
        Sets the el_v1 of this PublicDatasetItem.
        Expected loss calculated by the specified version of Rating model

        :param el_v1: The el_v1 of this PublicDatasetItem.
        :type: float
        """

        self._el_v1 = el_v1

    @property
    def rating_v1(self):
        """
        Gets the rating_v1 of this PublicDatasetItem.
        Bondora Rating issued by version 1 of the Rating model

        :return: The rating_v1 of this PublicDatasetItem.
        :rtype: str
        """
        return self._rating_v1

    @rating_v1.setter
    def rating_v1(self, rating_v1):
        """
        Sets the rating_v1 of this PublicDatasetItem.
        Bondora Rating issued by version 1 of the Rating model

        :param rating_v1: The rating_v1 of this PublicDatasetItem.
        :type: str
        """

        self._rating_v1 = rating_v1

    @property
    def el_v2(self):
        """
        Gets the el_v2 of this PublicDatasetItem.
        Expected loss calculated by the specified version of Rating model

        :return: The el_v2 of this PublicDatasetItem.
        :rtype: float
        """
        return self._el_v2

    @el_v2.setter
    def el_v2(self, el_v2):
        """
        Sets the el_v2 of this PublicDatasetItem.
        Expected loss calculated by the specified version of Rating model

        :param el_v2: The el_v2 of this PublicDatasetItem.
        :type: float
        """

        self._el_v2 = el_v2

    @property
    def rating_v2(self):
        """
        Gets the rating_v2 of this PublicDatasetItem.
        Bondora Rating issued by version 2 of the Rating model

        :return: The rating_v2 of this PublicDatasetItem.
        :rtype: str
        """
        return self._rating_v2

    @rating_v2.setter
    def rating_v2(self, rating_v2):
        """
        Sets the rating_v2 of this PublicDatasetItem.
        Bondora Rating issued by version 2 of the Rating model

        :param rating_v2: The rating_v2 of this PublicDatasetItem.
        :type: str
        """

        self._rating_v2 = rating_v2

    @property
    def loan_cancelled(self):
        """
        Gets the loan_cancelled of this PublicDatasetItem.
        If Loan was cancelled

        :return: The loan_cancelled of this PublicDatasetItem.
        :rtype: bool
        """
        return self._loan_cancelled

    @loan_cancelled.setter
    def loan_cancelled(self, loan_cancelled):
        """
        Sets the loan_cancelled of this PublicDatasetItem.
        If Loan was cancelled

        :param loan_cancelled: The loan_cancelled of this PublicDatasetItem.
        :type: bool
        """

        self._loan_cancelled = loan_cancelled

    @property
    def status(self):
        """
        Gets the status of this PublicDatasetItem.
        The current status of the loan application

        :return: The status of this PublicDatasetItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PublicDatasetItem.
        The current status of the loan application

        :param status: The status of this PublicDatasetItem.
        :type: str
        """

        self._status = status

    @property
    def restructured(self):
        """
        Gets the restructured of this PublicDatasetItem.
        The original maturity date of the loan has been increased by more than 60 days

        :return: The restructured of this PublicDatasetItem.
        :rtype: bool
        """
        return self._restructured

    @restructured.setter
    def restructured(self, restructured):
        """
        Sets the restructured of this PublicDatasetItem.
        The original maturity date of the loan has been increased by more than 60 days

        :param restructured: The restructured of this PublicDatasetItem.
        :type: bool
        """

        self._restructured = restructured

    @property
    def active_late_category(self):
        """
        Gets the active_late_category of this PublicDatasetItem.
        When a loan is in Principal Debt then it will be categorized by Principal Debt days

        :return: The active_late_category of this PublicDatasetItem.
        :rtype: str
        """
        return self._active_late_category

    @active_late_category.setter
    def active_late_category(self, active_late_category):
        """
        Sets the active_late_category of this PublicDatasetItem.
        When a loan is in Principal Debt then it will be categorized by Principal Debt days

        :param active_late_category: The active_late_category of this PublicDatasetItem.
        :type: str
        """

        self._active_late_category = active_late_category

    @property
    def worse_late_category(self):
        """
        Gets the worse_late_category of this PublicDatasetItem.
        Displays the last longest period of days when the loan was in Principal Debt

        :return: The worse_late_category of this PublicDatasetItem.
        :rtype: str
        """
        return self._worse_late_category

    @worse_late_category.setter
    def worse_late_category(self, worse_late_category):
        """
        Sets the worse_late_category of this PublicDatasetItem.
        Displays the last longest period of days when the loan was in Principal Debt

        :param worse_late_category: The worse_late_category of this PublicDatasetItem.
        :type: str
        """

        self._worse_late_category = worse_late_category

    @property
    def credit_score_es_micro_l(self):
        """
        Gets the credit_score_es_micro_l of this PublicDatasetItem.
        A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>

        :return: The credit_score_es_micro_l of this PublicDatasetItem.
        :rtype: str
        """
        return self._credit_score_es_micro_l

    @credit_score_es_micro_l.setter
    def credit_score_es_micro_l(self, credit_score_es_micro_l):
        """
        Sets the credit_score_es_micro_l of this PublicDatasetItem.
        A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>

        :param credit_score_es_micro_l: The credit_score_es_micro_l of this PublicDatasetItem.
        :type: str
        """

        self._credit_score_es_micro_l = credit_score_es_micro_l

    @property
    def credit_score_es_equifax_risk(self):
        """
        Gets the credit_score_es_equifax_risk of this PublicDatasetItem.
        Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>

        :return: The credit_score_es_equifax_risk of this PublicDatasetItem.
        :rtype: str
        """
        return self._credit_score_es_equifax_risk

    @credit_score_es_equifax_risk.setter
    def credit_score_es_equifax_risk(self, credit_score_es_equifax_risk):
        """
        Sets the credit_score_es_equifax_risk of this PublicDatasetItem.
        Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>

        :param credit_score_es_equifax_risk: The credit_score_es_equifax_risk of this PublicDatasetItem.
        :type: str
        """

        self._credit_score_es_equifax_risk = credit_score_es_equifax_risk

    @property
    def credit_score_fi_asiakas_tieto_risk_grade(self):
        """
        Gets the credit_score_fi_asiakas_tieto_risk_grade of this PublicDatasetItem.
        Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>

        :return: The credit_score_fi_asiakas_tieto_risk_grade of this PublicDatasetItem.
        :rtype: str
        """
        return self._credit_score_fi_asiakas_tieto_risk_grade

    @credit_score_fi_asiakas_tieto_risk_grade.setter
    def credit_score_fi_asiakas_tieto_risk_grade(self, credit_score_fi_asiakas_tieto_risk_grade):
        """
        Sets the credit_score_fi_asiakas_tieto_risk_grade of this PublicDatasetItem.
        Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>

        :param credit_score_fi_asiakas_tieto_risk_grade: The credit_score_fi_asiakas_tieto_risk_grade of this PublicDatasetItem.
        :type: str
        """

        self._credit_score_fi_asiakas_tieto_risk_grade = credit_score_fi_asiakas_tieto_risk_grade

    @property
    def credit_score_ee_mini(self):
        """
        Gets the credit_score_ee_mini of this PublicDatasetItem.
        Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>

        :return: The credit_score_ee_mini of this PublicDatasetItem.
        :rtype: str
        """
        return self._credit_score_ee_mini

    @credit_score_ee_mini.setter
    def credit_score_ee_mini(self, credit_score_ee_mini):
        """
        Sets the credit_score_ee_mini of this PublicDatasetItem.
        Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>

        :param credit_score_ee_mini: The credit_score_ee_mini of this PublicDatasetItem.
        :type: str
        """

        self._credit_score_ee_mini = credit_score_ee_mini

    @property
    def principal_payments_made(self):
        """
        Gets the principal_payments_made of this PublicDatasetItem.
        Note owner received loan transfers principal amount

        :return: The principal_payments_made of this PublicDatasetItem.
        :rtype: float
        """
        return self._principal_payments_made

    @principal_payments_made.setter
    def principal_payments_made(self, principal_payments_made):
        """
        Sets the principal_payments_made of this PublicDatasetItem.
        Note owner received loan transfers principal amount

        :param principal_payments_made: The principal_payments_made of this PublicDatasetItem.
        :type: float
        """

        self._principal_payments_made = principal_payments_made

    @property
    def interest_and_penalty_payments_made(self):
        """
        Gets the interest_and_penalty_payments_made of this PublicDatasetItem.
        Note owner received loan transfers earned interest, penalties total amount

        :return: The interest_and_penalty_payments_made of this PublicDatasetItem.
        :rtype: float
        """
        return self._interest_and_penalty_payments_made

    @interest_and_penalty_payments_made.setter
    def interest_and_penalty_payments_made(self, interest_and_penalty_payments_made):
        """
        Sets the interest_and_penalty_payments_made of this PublicDatasetItem.
        Note owner received loan transfers earned interest, penalties total amount

        :param interest_and_penalty_payments_made: The interest_and_penalty_payments_made of this PublicDatasetItem.
        :type: float
        """

        self._interest_and_penalty_payments_made = interest_and_penalty_payments_made

    @property
    def principal_write_offs(self):
        """
        Gets the principal_write_offs of this PublicDatasetItem.
        Principal that was written off on the investment

        :return: The principal_write_offs of this PublicDatasetItem.
        :rtype: float
        """
        return self._principal_write_offs

    @principal_write_offs.setter
    def principal_write_offs(self, principal_write_offs):
        """
        Sets the principal_write_offs of this PublicDatasetItem.
        Principal that was written off on the investment

        :param principal_write_offs: The principal_write_offs of this PublicDatasetItem.
        :type: float
        """

        self._principal_write_offs = principal_write_offs

    @property
    def interest_and_penalty_write_offs(self):
        """
        Gets the interest_and_penalty_write_offs of this PublicDatasetItem.
        Interest that was written off on the investment

        :return: The interest_and_penalty_write_offs of this PublicDatasetItem.
        :rtype: float
        """
        return self._interest_and_penalty_write_offs

    @interest_and_penalty_write_offs.setter
    def interest_and_penalty_write_offs(self, interest_and_penalty_write_offs):
        """
        Sets the interest_and_penalty_write_offs of this PublicDatasetItem.
        Interest that was written off on the investment

        :param interest_and_penalty_write_offs: The interest_and_penalty_write_offs of this PublicDatasetItem.
        :type: float
        """

        self._interest_and_penalty_write_offs = interest_and_penalty_write_offs

    @property
    def principal_debt_servicing_cost(self):
        """
        Gets the principal_debt_servicing_cost of this PublicDatasetItem.
        Service cost related to the recovery of the debt based on the principal of the investment

        :return: The principal_debt_servicing_cost of this PublicDatasetItem.
        :rtype: float
        """
        return self._principal_debt_servicing_cost

    @principal_debt_servicing_cost.setter
    def principal_debt_servicing_cost(self, principal_debt_servicing_cost):
        """
        Sets the principal_debt_servicing_cost of this PublicDatasetItem.
        Service cost related to the recovery of the debt based on the principal of the investment

        :param principal_debt_servicing_cost: The principal_debt_servicing_cost of this PublicDatasetItem.
        :type: float
        """

        self._principal_debt_servicing_cost = principal_debt_servicing_cost

    @property
    def interest_and_penalty_debt_servicing_cost(self):
        """
        Gets the interest_and_penalty_debt_servicing_cost of this PublicDatasetItem.
        Service cost related to the recovery of the debt based on the interest and penalties of the investment

        :return: The interest_and_penalty_debt_servicing_cost of this PublicDatasetItem.
        :rtype: float
        """
        return self._interest_and_penalty_debt_servicing_cost

    @interest_and_penalty_debt_servicing_cost.setter
    def interest_and_penalty_debt_servicing_cost(self, interest_and_penalty_debt_servicing_cost):
        """
        Sets the interest_and_penalty_debt_servicing_cost of this PublicDatasetItem.
        Service cost related to the recovery of the debt based on the interest and penalties of the investment

        :param interest_and_penalty_debt_servicing_cost: The interest_and_penalty_debt_servicing_cost of this PublicDatasetItem.
        :type: float
        """

        self._interest_and_penalty_debt_servicing_cost = interest_and_penalty_debt_servicing_cost

    @property
    def principal_balance(self):
        """
        Gets the principal_balance of this PublicDatasetItem.
        Principal that still needs to be paid by the borrower

        :return: The principal_balance of this PublicDatasetItem.
        :rtype: float
        """
        return self._principal_balance

    @principal_balance.setter
    def principal_balance(self, principal_balance):
        """
        Sets the principal_balance of this PublicDatasetItem.
        Principal that still needs to be paid by the borrower

        :param principal_balance: The principal_balance of this PublicDatasetItem.
        :type: float
        """

        self._principal_balance = principal_balance

    @property
    def interest_and_penalty_balance(self):
        """
        Gets the interest_and_penalty_balance of this PublicDatasetItem.
        Unpaid interest and penalties

        :return: The interest_and_penalty_balance of this PublicDatasetItem.
        :rtype: float
        """
        return self._interest_and_penalty_balance

    @interest_and_penalty_balance.setter
    def interest_and_penalty_balance(self, interest_and_penalty_balance):
        """
        Sets the interest_and_penalty_balance of this PublicDatasetItem.
        Unpaid interest and penalties

        :param interest_and_penalty_balance: The interest_and_penalty_balance of this PublicDatasetItem.
        :type: float
        """

        self._interest_and_penalty_balance = interest_and_penalty_balance

    @property
    def no_of_previous_loans_before_loan(self):
        """
        Gets the no_of_previous_loans_before_loan of this PublicDatasetItem.
        Number of previous loans

        :return: The no_of_previous_loans_before_loan of this PublicDatasetItem.
        :rtype: int
        """
        return self._no_of_previous_loans_before_loan

    @no_of_previous_loans_before_loan.setter
    def no_of_previous_loans_before_loan(self, no_of_previous_loans_before_loan):
        """
        Sets the no_of_previous_loans_before_loan of this PublicDatasetItem.
        Number of previous loans

        :param no_of_previous_loans_before_loan: The no_of_previous_loans_before_loan of this PublicDatasetItem.
        :type: int
        """

        self._no_of_previous_loans_before_loan = no_of_previous_loans_before_loan

    @property
    def amount_of_previous_loans_before_loan(self):
        """
        Gets the amount_of_previous_loans_before_loan of this PublicDatasetItem.
        Value of previous loans

        :return: The amount_of_previous_loans_before_loan of this PublicDatasetItem.
        :rtype: float
        """
        return self._amount_of_previous_loans_before_loan

    @amount_of_previous_loans_before_loan.setter
    def amount_of_previous_loans_before_loan(self, amount_of_previous_loans_before_loan):
        """
        Sets the amount_of_previous_loans_before_loan of this PublicDatasetItem.
        Value of previous loans

        :param amount_of_previous_loans_before_loan: The amount_of_previous_loans_before_loan of this PublicDatasetItem.
        :type: float
        """

        self._amount_of_previous_loans_before_loan = amount_of_previous_loans_before_loan

    @property
    def previous_repayments_before_loan(self):
        """
        Gets the previous_repayments_before_loan of this PublicDatasetItem.
        How much the borrower had repaid before the loan

        :return: The previous_repayments_before_loan of this PublicDatasetItem.
        :rtype: float
        """
        return self._previous_repayments_before_loan

    @previous_repayments_before_loan.setter
    def previous_repayments_before_loan(self, previous_repayments_before_loan):
        """
        Sets the previous_repayments_before_loan of this PublicDatasetItem.
        How much the borrower had repaid before the loan

        :param previous_repayments_before_loan: The previous_repayments_before_loan of this PublicDatasetItem.
        :type: float
        """

        self._previous_repayments_before_loan = previous_repayments_before_loan

    @property
    def previous_early_repayments_before_loan(self):
        """
        Gets the previous_early_repayments_before_loan of this PublicDatasetItem.
        Previous early repaid amount before this loan

        :return: The previous_early_repayments_before_loan of this PublicDatasetItem.
        :rtype: float
        """
        return self._previous_early_repayments_before_loan

    @previous_early_repayments_before_loan.setter
    def previous_early_repayments_before_loan(self, previous_early_repayments_before_loan):
        """
        Sets the previous_early_repayments_before_loan of this PublicDatasetItem.
        Previous early repaid amount before this loan

        :param previous_early_repayments_before_loan: The previous_early_repayments_before_loan of this PublicDatasetItem.
        :type: float
        """

        self._previous_early_repayments_before_loan = previous_early_repayments_before_loan

    @property
    def previous_early_repayments_count_before_loan(self):
        """
        Gets the previous_early_repayments_count_before_loan of this PublicDatasetItem.
        Previous early repaid loans before this loan

        :return: The previous_early_repayments_count_before_loan of this PublicDatasetItem.
        :rtype: int
        """
        return self._previous_early_repayments_count_before_loan

    @previous_early_repayments_count_before_loan.setter
    def previous_early_repayments_count_before_loan(self, previous_early_repayments_count_before_loan):
        """
        Sets the previous_early_repayments_count_before_loan of this PublicDatasetItem.
        Previous early repaid loans before this loan

        :param previous_early_repayments_count_before_loan: The previous_early_repayments_count_before_loan of this PublicDatasetItem.
        :type: int
        """

        self._previous_early_repayments_count_before_loan = previous_early_repayments_count_before_loan

    @property
    def grace_period_start(self):
        """
        Gets the grace_period_start of this PublicDatasetItem.
        Date of the beginning of Grace period

        :return: The grace_period_start of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._grace_period_start

    @grace_period_start.setter
    def grace_period_start(self, grace_period_start):
        """
        Sets the grace_period_start of this PublicDatasetItem.
        Date of the beginning of Grace period

        :param grace_period_start: The grace_period_start of this PublicDatasetItem.
        :type: datetime
        """

        self._grace_period_start = grace_period_start

    @property
    def grace_period_end(self):
        """
        Gets the grace_period_end of this PublicDatasetItem.
        Date of the end of Grace period

        :return: The grace_period_end of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._grace_period_end

    @grace_period_end.setter
    def grace_period_end(self, grace_period_end):
        """
        Sets the grace_period_end of this PublicDatasetItem.
        Date of the end of Grace period

        :param grace_period_end: The grace_period_end of this PublicDatasetItem.
        :type: datetime
        """

        self._grace_period_end = grace_period_end

    @property
    def next_payment_date(self):
        """
        Gets the next_payment_date of this PublicDatasetItem.
        According to schedule the next date for borrower to make their payment

        :return: The next_payment_date of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._next_payment_date

    @next_payment_date.setter
    def next_payment_date(self, next_payment_date):
        """
        Sets the next_payment_date of this PublicDatasetItem.
        According to schedule the next date for borrower to make their payment

        :param next_payment_date: The next_payment_date of this PublicDatasetItem.
        :type: datetime
        """

        self._next_payment_date = next_payment_date

    @property
    def next_payment_nr(self):
        """
        Gets the next_payment_nr of this PublicDatasetItem.
        According to schedule the number of the next payment

        :return: The next_payment_nr of this PublicDatasetItem.
        :rtype: int
        """
        return self._next_payment_nr

    @next_payment_nr.setter
    def next_payment_nr(self, next_payment_nr):
        """
        Sets the next_payment_nr of this PublicDatasetItem.
        According to schedule the number of the next payment

        :param next_payment_nr: The next_payment_nr of this PublicDatasetItem.
        :type: int
        """

        self._next_payment_nr = next_payment_nr

    @property
    def nr_of_scheduled_payments(self):
        """
        Gets the nr_of_scheduled_payments of this PublicDatasetItem.
        According to schedule the count of scheduled payments

        :return: The nr_of_scheduled_payments of this PublicDatasetItem.
        :rtype: int
        """
        return self._nr_of_scheduled_payments

    @nr_of_scheduled_payments.setter
    def nr_of_scheduled_payments(self, nr_of_scheduled_payments):
        """
        Sets the nr_of_scheduled_payments of this PublicDatasetItem.
        According to schedule the count of scheduled payments

        :param nr_of_scheduled_payments: The nr_of_scheduled_payments of this PublicDatasetItem.
        :type: int
        """

        self._nr_of_scheduled_payments = nr_of_scheduled_payments

    @property
    def re_scheduled_on(self):
        """
        Gets the re_scheduled_on of this PublicDatasetItem.
        The date when the a new schedule was assigned to the borrower

        :return: The re_scheduled_on of this PublicDatasetItem.
        :rtype: datetime
        """
        return self._re_scheduled_on

    @re_scheduled_on.setter
    def re_scheduled_on(self, re_scheduled_on):
        """
        Sets the re_scheduled_on of this PublicDatasetItem.
        The date when the a new schedule was assigned to the borrower

        :param re_scheduled_on: The re_scheduled_on of this PublicDatasetItem.
        :type: datetime
        """

        self._re_scheduled_on = re_scheduled_on

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
