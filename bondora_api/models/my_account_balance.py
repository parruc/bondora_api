# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MyAccountBalance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, balance=None, reserved=None, bid_request_amount=None):
        """
        MyAccountBalance - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'balance': 'float',
            'reserved': 'float',
            'bid_request_amount': 'float',
            'total_available': 'float'
        }

        self.attribute_map = {
            'balance': 'Balance',
            'reserved': 'Reserved',
            'bid_request_amount': 'BidRequestAmount',
            'total_available': 'TotalAvailable'
        }

        self._total_available = None
        self._balance = balance
        self._reserved = reserved
        self._bid_request_amount = bid_request_amount

    @property
    def balance(self):
        """
        Gets the balance of this MyAccountBalance.
        Account balance

        :return: The balance of this MyAccountBalance.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """
        Sets the balance of this MyAccountBalance.
        Account balance

        :param balance: The balance of this MyAccountBalance.
        :type: float
        """

        self._balance = balance

    @property
    def reserved(self):
        """
        Gets the reserved of this MyAccountBalance.
        Account reserved amount

        :return: The reserved of this MyAccountBalance.
        :rtype: float
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """
        Sets the reserved of this MyAccountBalance.
        Account reserved amount

        :param reserved: The reserved of this MyAccountBalance.
        :type: float
        """

        self._reserved = reserved

    @property
    def bid_request_amount(self):
        """
        Gets the bid_request_amount of this MyAccountBalance.
        Api pending auction bid request amount

        :return: The bid_request_amount of this MyAccountBalance.
        :rtype: float
        """
        return self._bid_request_amount

    @bid_request_amount.setter
    def bid_request_amount(self, bid_request_amount):
        """
        Sets the bid_request_amount of this MyAccountBalance.
        Api pending auction bid request amount

        :param bid_request_amount: The bid_request_amount of this MyAccountBalance.
        :type: float
        """

        self._bid_request_amount = bid_request_amount

    @property
    def total_available(self):
        """
        Gets the total_available of this MyAccountBalance.
        Available balance

        :return: The total_available of this MyAccountBalance.
        :rtype: float
        """
        return self._total_available

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
