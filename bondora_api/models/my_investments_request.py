# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MyInvestmentsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, loan_issued_date_from=None, loan_issued_date_to=None, principal_min=None, principal_max=None, interest_min=None, interest_max=None, length_max=None, length_min=None, late_principal_amount_min=None, late_principal_amount_max=None, debt_occured_on_from=None, debt_occured_on_to=None, debt_occured_on_for_secondary_from=None, debt_occured_on_for_secondary_to=None, defaulted_date_from=None, defaulted_date_to=None, rescheduled_from=None, rescheduled_to=None, sold_date_from=None, sold_date_to=None, purchase_date_from=None, purchase_date_to=None, next_payment_date_to=None, next_payment_date_from=None, last_payment_date_from=None, last_payment_date_to=None, countries=None, ratings=None, credit_score_min=None, credit_score_max=None, user_name=None, loan_status_code=None, income_verification_status=None, loan_debt_management_stage=None, loan_debt_management_stage_type=None, loan_debt_management_date_active_from=None, loan_debt_management_date_active_to=None, auction_bid_type=None, sales_status=None, is_in_repayment=None, page_size=None, page_nr=None):
        """
        MyInvestmentsRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'loan_issued_date_from': 'datetime',
            'loan_issued_date_to': 'datetime',
            'principal_min': 'float',
            'principal_max': 'float',
            'interest_min': 'float',
            'interest_max': 'float',
            'length_max': 'int',
            'length_min': 'int',
            'late_principal_amount_min': 'float',
            'late_principal_amount_max': 'float',
            'debt_occured_on_from': 'datetime',
            'debt_occured_on_to': 'datetime',
            'debt_occured_on_for_secondary_from': 'datetime',
            'debt_occured_on_for_secondary_to': 'datetime',
            'defaulted_date_from': 'datetime',
            'defaulted_date_to': 'datetime',
            'rescheduled_from': 'datetime',
            'rescheduled_to': 'datetime',
            'sold_date_from': 'datetime',
            'sold_date_to': 'datetime',
            'purchase_date_from': 'datetime',
            'purchase_date_to': 'datetime',
            'next_payment_date_to': 'datetime',
            'next_payment_date_from': 'datetime',
            'last_payment_date_from': 'datetime',
            'last_payment_date_to': 'datetime',
            'countries': 'list[str]',
            'ratings': 'list[str]',
            'credit_score_min': 'int',
            'credit_score_max': 'int',
            'user_name': 'str',
            'loan_status_code': 'list[int]',
            'income_verification_status': 'int',
            'loan_debt_management_stage': 'int',
            'loan_debt_management_stage_type': 'int',
            'loan_debt_management_date_active_from': 'datetime',
            'loan_debt_management_date_active_to': 'datetime',
            'auction_bid_type': 'int',
            'sales_status': 'int',
            'is_in_repayment': 'bool',
            'page_size': 'int',
            'page_nr': 'int'
        }

        self.attribute_map = {
            'loan_issued_date_from': 'LoanIssuedDateFrom',
            'loan_issued_date_to': 'LoanIssuedDateTo',
            'principal_min': 'PrincipalMin',
            'principal_max': 'PrincipalMax',
            'interest_min': 'InterestMin',
            'interest_max': 'InterestMax',
            'length_max': 'LengthMax',
            'length_min': 'LengthMin',
            'late_principal_amount_min': 'LatePrincipalAmountMin',
            'late_principal_amount_max': 'LatePrincipalAmountMax',
            'debt_occured_on_from': 'DebtOccuredOnFrom',
            'debt_occured_on_to': 'DebtOccuredOnTo',
            'debt_occured_on_for_secondary_from': 'DebtOccuredOnForSecondaryFrom',
            'debt_occured_on_for_secondary_to': 'DebtOccuredOnForSecondaryTo',
            'defaulted_date_from': 'DefaultedDateFrom',
            'defaulted_date_to': 'DefaultedDateTo',
            'rescheduled_from': 'RescheduledFrom',
            'rescheduled_to': 'RescheduledTo',
            'sold_date_from': 'SoldDateFrom',
            'sold_date_to': 'SoldDateTo',
            'purchase_date_from': 'PurchaseDateFrom',
            'purchase_date_to': 'PurchaseDateTo',
            'next_payment_date_to': 'NextPaymentDateTo',
            'next_payment_date_from': 'NextPaymentDateFrom',
            'last_payment_date_from': 'LastPaymentDateFrom',
            'last_payment_date_to': 'LastPaymentDateTo',
            'countries': 'Countries',
            'ratings': 'Ratings',
            'credit_score_min': 'CreditScoreMin',
            'credit_score_max': 'CreditScoreMax',
            'user_name': 'UserName',
            'loan_status_code': 'LoanStatusCode',
            'income_verification_status': 'IncomeVerificationStatus',
            'loan_debt_management_stage': 'LoanDebtManagementStage',
            'loan_debt_management_stage_type': 'LoanDebtManagementStageType',
            'loan_debt_management_date_active_from': 'LoanDebtManagementDateActiveFrom',
            'loan_debt_management_date_active_to': 'LoanDebtManagementDateActiveTo',
            'auction_bid_type': 'AuctionBidType',
            'sales_status': 'SalesStatus',
            'is_in_repayment': 'IsInRepayment',
            'page_size': 'PageSize',
            'page_nr': 'PageNr'
        }

        self._loan_issued_date_from = loan_issued_date_from
        self._loan_issued_date_to = loan_issued_date_to
        self._principal_min = principal_min
        self._principal_max = principal_max
        self._interest_min = interest_min
        self._interest_max = interest_max
        self._length_max = length_max
        self._length_min = length_min
        self._late_principal_amount_min = late_principal_amount_min
        self._late_principal_amount_max = late_principal_amount_max
        self._debt_occured_on_from = debt_occured_on_from
        self._debt_occured_on_to = debt_occured_on_to
        self._debt_occured_on_for_secondary_from = debt_occured_on_for_secondary_from
        self._debt_occured_on_for_secondary_to = debt_occured_on_for_secondary_to
        self._defaulted_date_from = defaulted_date_from
        self._defaulted_date_to = defaulted_date_to
        self._rescheduled_from = rescheduled_from
        self._rescheduled_to = rescheduled_to
        self._sold_date_from = sold_date_from
        self._sold_date_to = sold_date_to
        self._purchase_date_from = purchase_date_from
        self._purchase_date_to = purchase_date_to
        self._next_payment_date_to = next_payment_date_to
        self._next_payment_date_from = next_payment_date_from
        self._last_payment_date_from = last_payment_date_from
        self._last_payment_date_to = last_payment_date_to
        self._countries = countries
        self._ratings = ratings
        self._credit_score_min = credit_score_min
        self._credit_score_max = credit_score_max
        self._user_name = user_name
        self._loan_status_code = loan_status_code
        self._income_verification_status = income_verification_status
        self._loan_debt_management_stage = loan_debt_management_stage
        self._loan_debt_management_stage_type = loan_debt_management_stage_type
        self._loan_debt_management_date_active_from = loan_debt_management_date_active_from
        self._loan_debt_management_date_active_to = loan_debt_management_date_active_to
        self._auction_bid_type = auction_bid_type
        self._sales_status = sales_status
        self._is_in_repayment = is_in_repayment
        self._page_size = page_size
        self._page_nr = page_nr

    @property
    def loan_issued_date_from(self):
        """
        Gets the loan_issued_date_from of this MyInvestmentsRequest.
        Loan issued start date from

        :return: The loan_issued_date_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._loan_issued_date_from

    @loan_issued_date_from.setter
    def loan_issued_date_from(self, loan_issued_date_from):
        """
        Sets the loan_issued_date_from of this MyInvestmentsRequest.
        Loan issued start date from

        :param loan_issued_date_from: The loan_issued_date_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._loan_issued_date_from = loan_issued_date_from

    @property
    def loan_issued_date_to(self):
        """
        Gets the loan_issued_date_to of this MyInvestmentsRequest.
        Loan issued start date to

        :return: The loan_issued_date_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._loan_issued_date_to

    @loan_issued_date_to.setter
    def loan_issued_date_to(self, loan_issued_date_to):
        """
        Sets the loan_issued_date_to of this MyInvestmentsRequest.
        Loan issued start date to

        :param loan_issued_date_to: The loan_issued_date_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._loan_issued_date_to = loan_issued_date_to

    @property
    def principal_min(self):
        """
        Gets the principal_min of this MyInvestmentsRequest.
        Remaining principal amount min

        :return: The principal_min of this MyInvestmentsRequest.
        :rtype: float
        """
        return self._principal_min

    @principal_min.setter
    def principal_min(self, principal_min):
        """
        Sets the principal_min of this MyInvestmentsRequest.
        Remaining principal amount min

        :param principal_min: The principal_min of this MyInvestmentsRequest.
        :type: float
        """

        self._principal_min = principal_min

    @property
    def principal_max(self):
        """
        Gets the principal_max of this MyInvestmentsRequest.
        Remaining principal amount max

        :return: The principal_max of this MyInvestmentsRequest.
        :rtype: float
        """
        return self._principal_max

    @principal_max.setter
    def principal_max(self, principal_max):
        """
        Sets the principal_max of this MyInvestmentsRequest.
        Remaining principal amount max

        :param principal_max: The principal_max of this MyInvestmentsRequest.
        :type: float
        """

        self._principal_max = principal_max

    @property
    def interest_min(self):
        """
        Gets the interest_min of this MyInvestmentsRequest.
        Interest rate min

        :return: The interest_min of this MyInvestmentsRequest.
        :rtype: float
        """
        return self._interest_min

    @interest_min.setter
    def interest_min(self, interest_min):
        """
        Sets the interest_min of this MyInvestmentsRequest.
        Interest rate min

        :param interest_min: The interest_min of this MyInvestmentsRequest.
        :type: float
        """

        self._interest_min = interest_min

    @property
    def interest_max(self):
        """
        Gets the interest_max of this MyInvestmentsRequest.
        Interest rate max

        :return: The interest_max of this MyInvestmentsRequest.
        :rtype: float
        """
        return self._interest_max

    @interest_max.setter
    def interest_max(self, interest_max):
        """
        Sets the interest_max of this MyInvestmentsRequest.
        Interest rate max

        :param interest_max: The interest_max of this MyInvestmentsRequest.
        :type: float
        """

        self._interest_max = interest_max

    @property
    def length_max(self):
        """
        Gets the length_max of this MyInvestmentsRequest.
        Loan lenght min

        :return: The length_max of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._length_max

    @length_max.setter
    def length_max(self, length_max):
        """
        Sets the length_max of this MyInvestmentsRequest.
        Loan lenght min

        :param length_max: The length_max of this MyInvestmentsRequest.
        :type: int
        """

        self._length_max = length_max

    @property
    def length_min(self):
        """
        Gets the length_min of this MyInvestmentsRequest.
        Loan lenght max

        :return: The length_min of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._length_min

    @length_min.setter
    def length_min(self, length_min):
        """
        Sets the length_min of this MyInvestmentsRequest.
        Loan lenght max

        :param length_min: The length_min of this MyInvestmentsRequest.
        :type: int
        """

        self._length_min = length_min

    @property
    def late_principal_amount_min(self):
        """
        Gets the late_principal_amount_min of this MyInvestmentsRequest.
        Principal debt amount min

        :return: The late_principal_amount_min of this MyInvestmentsRequest.
        :rtype: float
        """
        return self._late_principal_amount_min

    @late_principal_amount_min.setter
    def late_principal_amount_min(self, late_principal_amount_min):
        """
        Sets the late_principal_amount_min of this MyInvestmentsRequest.
        Principal debt amount min

        :param late_principal_amount_min: The late_principal_amount_min of this MyInvestmentsRequest.
        :type: float
        """

        self._late_principal_amount_min = late_principal_amount_min

    @property
    def late_principal_amount_max(self):
        """
        Gets the late_principal_amount_max of this MyInvestmentsRequest.
        Principal debt amount max

        :return: The late_principal_amount_max of this MyInvestmentsRequest.
        :rtype: float
        """
        return self._late_principal_amount_max

    @late_principal_amount_max.setter
    def late_principal_amount_max(self, late_principal_amount_max):
        """
        Sets the late_principal_amount_max of this MyInvestmentsRequest.
        Principal debt amount max

        :param late_principal_amount_max: The late_principal_amount_max of this MyInvestmentsRequest.
        :type: float
        """

        self._late_principal_amount_max = late_principal_amount_max

    @property
    def debt_occured_on_from(self):
        """
        Gets the debt_occured_on_from of this MyInvestmentsRequest.
        Principal debt started date from

        :return: The debt_occured_on_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._debt_occured_on_from

    @debt_occured_on_from.setter
    def debt_occured_on_from(self, debt_occured_on_from):
        """
        Sets the debt_occured_on_from of this MyInvestmentsRequest.
        Principal debt started date from

        :param debt_occured_on_from: The debt_occured_on_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._debt_occured_on_from = debt_occured_on_from

    @property
    def debt_occured_on_to(self):
        """
        Gets the debt_occured_on_to of this MyInvestmentsRequest.
        Principal debt started date to

        :return: The debt_occured_on_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._debt_occured_on_to

    @debt_occured_on_to.setter
    def debt_occured_on_to(self, debt_occured_on_to):
        """
        Sets the debt_occured_on_to of this MyInvestmentsRequest.
        Principal debt started date to

        :param debt_occured_on_to: The debt_occured_on_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._debt_occured_on_to = debt_occured_on_to

    @property
    def debt_occured_on_for_secondary_from(self):
        """
        Gets the debt_occured_on_for_secondary_from of this MyInvestmentsRequest.
        Interest debt started date from

        :return: The debt_occured_on_for_secondary_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary_from

    @debt_occured_on_for_secondary_from.setter
    def debt_occured_on_for_secondary_from(self, debt_occured_on_for_secondary_from):
        """
        Sets the debt_occured_on_for_secondary_from of this MyInvestmentsRequest.
        Interest debt started date from

        :param debt_occured_on_for_secondary_from: The debt_occured_on_for_secondary_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._debt_occured_on_for_secondary_from = debt_occured_on_for_secondary_from

    @property
    def debt_occured_on_for_secondary_to(self):
        """
        Gets the debt_occured_on_for_secondary_to of this MyInvestmentsRequest.
        Interest debt started date to

        :return: The debt_occured_on_for_secondary_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._debt_occured_on_for_secondary_to

    @debt_occured_on_for_secondary_to.setter
    def debt_occured_on_for_secondary_to(self, debt_occured_on_for_secondary_to):
        """
        Sets the debt_occured_on_for_secondary_to of this MyInvestmentsRequest.
        Interest debt started date to

        :param debt_occured_on_for_secondary_to: The debt_occured_on_for_secondary_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._debt_occured_on_for_secondary_to = debt_occured_on_for_secondary_to

    @property
    def defaulted_date_from(self):
        """
        Gets the defaulted_date_from of this MyInvestmentsRequest.
        Defaulted date from

        :return: The defaulted_date_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._defaulted_date_from

    @defaulted_date_from.setter
    def defaulted_date_from(self, defaulted_date_from):
        """
        Sets the defaulted_date_from of this MyInvestmentsRequest.
        Defaulted date from

        :param defaulted_date_from: The defaulted_date_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._defaulted_date_from = defaulted_date_from

    @property
    def defaulted_date_to(self):
        """
        Gets the defaulted_date_to of this MyInvestmentsRequest.
        Defaulted date to

        :return: The defaulted_date_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._defaulted_date_to

    @defaulted_date_to.setter
    def defaulted_date_to(self, defaulted_date_to):
        """
        Sets the defaulted_date_to of this MyInvestmentsRequest.
        Defaulted date to

        :param defaulted_date_to: The defaulted_date_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._defaulted_date_to = defaulted_date_to

    @property
    def rescheduled_from(self):
        """
        Gets the rescheduled_from of this MyInvestmentsRequest.
        Defaulted date from

        :return: The rescheduled_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._rescheduled_from

    @rescheduled_from.setter
    def rescheduled_from(self, rescheduled_from):
        """
        Sets the rescheduled_from of this MyInvestmentsRequest.
        Defaulted date from

        :param rescheduled_from: The rescheduled_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._rescheduled_from = rescheduled_from

    @property
    def rescheduled_to(self):
        """
        Gets the rescheduled_to of this MyInvestmentsRequest.
        Defaulted date to

        :return: The rescheduled_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._rescheduled_to

    @rescheduled_to.setter
    def rescheduled_to(self, rescheduled_to):
        """
        Sets the rescheduled_to of this MyInvestmentsRequest.
        Defaulted date to

        :param rescheduled_to: The rescheduled_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._rescheduled_to = rescheduled_to

    @property
    def sold_date_from(self):
        """
        Gets the sold_date_from of this MyInvestmentsRequest.
        When it was sold on Secondary market from

        :return: The sold_date_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._sold_date_from

    @sold_date_from.setter
    def sold_date_from(self, sold_date_from):
        """
        Sets the sold_date_from of this MyInvestmentsRequest.
        When it was sold on Secondary market from

        :param sold_date_from: The sold_date_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._sold_date_from = sold_date_from

    @property
    def sold_date_to(self):
        """
        Gets the sold_date_to of this MyInvestmentsRequest.
        When it was sold on Secondary market to

        :return: The sold_date_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._sold_date_to

    @sold_date_to.setter
    def sold_date_to(self, sold_date_to):
        """
        Sets the sold_date_to of this MyInvestmentsRequest.
        When it was sold on Secondary market to

        :param sold_date_to: The sold_date_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._sold_date_to = sold_date_to

    @property
    def purchase_date_from(self):
        """
        Gets the purchase_date_from of this MyInvestmentsRequest.
        When you received the investment Auctions/Secondary market from

        :return: The purchase_date_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._purchase_date_from

    @purchase_date_from.setter
    def purchase_date_from(self, purchase_date_from):
        """
        Sets the purchase_date_from of this MyInvestmentsRequest.
        When you received the investment Auctions/Secondary market from

        :param purchase_date_from: The purchase_date_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._purchase_date_from = purchase_date_from

    @property
    def purchase_date_to(self):
        """
        Gets the purchase_date_to of this MyInvestmentsRequest.
        When you received the investment Auctions/Secondary market to

        :return: The purchase_date_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._purchase_date_to

    @purchase_date_to.setter
    def purchase_date_to(self, purchase_date_to):
        """
        Sets the purchase_date_to of this MyInvestmentsRequest.
        When you received the investment Auctions/Secondary market to

        :param purchase_date_to: The purchase_date_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._purchase_date_to = purchase_date_to

    @property
    def next_payment_date_to(self):
        """
        Gets the next_payment_date_to of this MyInvestmentsRequest.
        Next payment date to

        :return: The next_payment_date_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._next_payment_date_to

    @next_payment_date_to.setter
    def next_payment_date_to(self, next_payment_date_to):
        """
        Sets the next_payment_date_to of this MyInvestmentsRequest.
        Next payment date to

        :param next_payment_date_to: The next_payment_date_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._next_payment_date_to = next_payment_date_to

    @property
    def next_payment_date_from(self):
        """
        Gets the next_payment_date_from of this MyInvestmentsRequest.
        Next payment date from

        :return: The next_payment_date_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._next_payment_date_from

    @next_payment_date_from.setter
    def next_payment_date_from(self, next_payment_date_from):
        """
        Sets the next_payment_date_from of this MyInvestmentsRequest.
        Next payment date from

        :param next_payment_date_from: The next_payment_date_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._next_payment_date_from = next_payment_date_from

    @property
    def last_payment_date_from(self):
        """
        Gets the last_payment_date_from of this MyInvestmentsRequest.
        Last payment date from

        :return: The last_payment_date_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._last_payment_date_from

    @last_payment_date_from.setter
    def last_payment_date_from(self, last_payment_date_from):
        """
        Sets the last_payment_date_from of this MyInvestmentsRequest.
        Last payment date from

        :param last_payment_date_from: The last_payment_date_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._last_payment_date_from = last_payment_date_from

    @property
    def last_payment_date_to(self):
        """
        Gets the last_payment_date_to of this MyInvestmentsRequest.
        Last payment date to

        :return: The last_payment_date_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._last_payment_date_to

    @last_payment_date_to.setter
    def last_payment_date_to(self, last_payment_date_to):
        """
        Sets the last_payment_date_to of this MyInvestmentsRequest.
        Last payment date to

        :param last_payment_date_to: The last_payment_date_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._last_payment_date_to = last_payment_date_to

    @property
    def countries(self):
        """
        Gets the countries of this MyInvestmentsRequest.
        Two letter iso code for country of origin: EE, ES, FI

        :return: The countries of this MyInvestmentsRequest.
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """
        Sets the countries of this MyInvestmentsRequest.
        Two letter iso code for country of origin: EE, ES, FI

        :param countries: The countries of this MyInvestmentsRequest.
        :type: list[str]
        """

        self._countries = countries

    @property
    def ratings(self):
        """
        Gets the ratings of this MyInvestmentsRequest.
        Bondora's rating: AA, A, B, C, D, E, F, HR

        :return: The ratings of this MyInvestmentsRequest.
        :rtype: list[str]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """
        Sets the ratings of this MyInvestmentsRequest.
        Bondora's rating: AA, A, B, C, D, E, F, HR

        :param ratings: The ratings of this MyInvestmentsRequest.
        :type: list[str]
        """

        self._ratings = ratings

    @property
    def credit_score_min(self):
        """
        Gets the credit_score_min of this MyInvestmentsRequest.
        Minimum credit score

        :return: The credit_score_min of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._credit_score_min

    @credit_score_min.setter
    def credit_score_min(self, credit_score_min):
        """
        Sets the credit_score_min of this MyInvestmentsRequest.
        Minimum credit score

        :param credit_score_min: The credit_score_min of this MyInvestmentsRequest.
        :type: int
        """

        self._credit_score_min = credit_score_min

    @property
    def credit_score_max(self):
        """
        Gets the credit_score_max of this MyInvestmentsRequest.
        Maximum credit score

        :return: The credit_score_max of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._credit_score_max

    @credit_score_max.setter
    def credit_score_max(self, credit_score_max):
        """
        Sets the credit_score_max of this MyInvestmentsRequest.
        Maximum credit score

        :param credit_score_max: The credit_score_max of this MyInvestmentsRequest.
        :type: int
        """

        self._credit_score_max = credit_score_max

    @property
    def user_name(self):
        """
        Gets the user_name of this MyInvestmentsRequest.
        Borrower's username

        :return: The user_name of this MyInvestmentsRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this MyInvestmentsRequest.
        Borrower's username

        :param user_name: The user_name of this MyInvestmentsRequest.
        :type: str
        """

        self._user_name = user_name

    @property
    def loan_status_code(self):
        """
        Gets the loan_status_code of this MyInvestmentsRequest.
        Loan status code              <para>2 Current</para><para>3 Cancelled</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>

        :return: The loan_status_code of this MyInvestmentsRequest.
        :rtype: list[int]
        """
        return self._loan_status_code

    @loan_status_code.setter
    def loan_status_code(self, loan_status_code):
        """
        Sets the loan_status_code of this MyInvestmentsRequest.
        Loan status code              <para>2 Current</para><para>3 Cancelled</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>

        :param loan_status_code: The loan_status_code of this MyInvestmentsRequest.
        :type: list[int]
        """

        self._loan_status_code = loan_status_code

    @property
    def income_verification_status(self):
        """
        Gets the income_verification_status of this MyInvestmentsRequest.
        Income verification type

        :return: The income_verification_status of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._income_verification_status

    @income_verification_status.setter
    def income_verification_status(self, income_verification_status):
        """
        Sets the income_verification_status of this MyInvestmentsRequest.
        Income verification type

        :param income_verification_status: The income_verification_status of this MyInvestmentsRequest.
        :type: int
        """
        allowed_values = ["1", "2", "3", "4"]
        if income_verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `income_verification_status` ({0}), must be one of {1}"
                .format(income_verification_status, allowed_values)
            )

        self._income_verification_status = income_verification_status

    @property
    def loan_debt_management_stage(self):
        """
        Gets the loan_debt_management_stage of this MyInvestmentsRequest.
        Latest debt management stage

        :return: The loan_debt_management_stage of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._loan_debt_management_stage

    @loan_debt_management_stage.setter
    def loan_debt_management_stage(self, loan_debt_management_stage):
        """
        Sets the loan_debt_management_stage of this MyInvestmentsRequest.
        Latest debt management stage

        :param loan_debt_management_stage: The loan_debt_management_stage of this MyInvestmentsRequest.
        :type: int
        """
        allowed_values = ["1", "2", "7", "9", "14", "15", "16", "20", "22", "23", "24", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43"]
        if loan_debt_management_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_debt_management_stage` ({0}), must be one of {1}"
                .format(loan_debt_management_stage, allowed_values)
            )

        self._loan_debt_management_stage = loan_debt_management_stage

    @property
    def loan_debt_management_stage_type(self):
        """
        Gets the loan_debt_management_stage_type of this MyInvestmentsRequest.
        Latest debt management stage type

        :return: The loan_debt_management_stage_type of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._loan_debt_management_stage_type

    @loan_debt_management_stage_type.setter
    def loan_debt_management_stage_type(self, loan_debt_management_stage_type):
        """
        Sets the loan_debt_management_stage_type of this MyInvestmentsRequest.
        Latest debt management stage type

        :param loan_debt_management_stage_type: The loan_debt_management_stage_type of this MyInvestmentsRequest.
        :type: int
        """
        allowed_values = ["1", "2", "3", "-1"]
        if loan_debt_management_stage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `loan_debt_management_stage_type` ({0}), must be one of {1}"
                .format(loan_debt_management_stage_type, allowed_values)
            )

        self._loan_debt_management_stage_type = loan_debt_management_stage_type

    @property
    def loan_debt_management_date_active_from(self):
        """
        Gets the loan_debt_management_date_active_from of this MyInvestmentsRequest.
        Latest debt management date active from

        :return: The loan_debt_management_date_active_from of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._loan_debt_management_date_active_from

    @loan_debt_management_date_active_from.setter
    def loan_debt_management_date_active_from(self, loan_debt_management_date_active_from):
        """
        Sets the loan_debt_management_date_active_from of this MyInvestmentsRequest.
        Latest debt management date active from

        :param loan_debt_management_date_active_from: The loan_debt_management_date_active_from of this MyInvestmentsRequest.
        :type: datetime
        """

        self._loan_debt_management_date_active_from = loan_debt_management_date_active_from

    @property
    def loan_debt_management_date_active_to(self):
        """
        Gets the loan_debt_management_date_active_to of this MyInvestmentsRequest.
        Latest debt management date active to

        :return: The loan_debt_management_date_active_to of this MyInvestmentsRequest.
        :rtype: datetime
        """
        return self._loan_debt_management_date_active_to

    @loan_debt_management_date_active_to.setter
    def loan_debt_management_date_active_to(self, loan_debt_management_date_active_to):
        """
        Sets the loan_debt_management_date_active_to of this MyInvestmentsRequest.
        Latest debt management date active to

        :param loan_debt_management_date_active_to: The loan_debt_management_date_active_to of this MyInvestmentsRequest.
        :type: datetime
        """

        self._loan_debt_management_date_active_to = loan_debt_management_date_active_to

    @property
    def auction_bid_type(self):
        """
        Gets the auction_bid_type of this MyInvestmentsRequest.
        Auction bid type

        :return: The auction_bid_type of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._auction_bid_type

    @auction_bid_type.setter
    def auction_bid_type(self, auction_bid_type):
        """
        Sets the auction_bid_type of this MyInvestmentsRequest.
        Auction bid type

        :param auction_bid_type: The auction_bid_type of this MyInvestmentsRequest.
        :type: int
        """
        allowed_values = ["0", "1", "2"]
        if auction_bid_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auction_bid_type` ({0}), must be one of {1}"
                .format(auction_bid_type, allowed_values)
            )

        self._auction_bid_type = auction_bid_type

    @property
    def sales_status(self):
        """
        Gets the sales_status of this MyInvestmentsRequest.
        Second market sale status              <para>NULL All active</para><para>0 Bought investments</para><para>1 Sold investments</para><para>2 Investment is on sale</para><para>3 Investment is not on sale</para>

        :return: The sales_status of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._sales_status

    @sales_status.setter
    def sales_status(self, sales_status):
        """
        Sets the sales_status of this MyInvestmentsRequest.
        Second market sale status              <para>NULL All active</para><para>0 Bought investments</para><para>1 Sold investments</para><para>2 Investment is on sale</para><para>3 Investment is not on sale</para>

        :param sales_status: The sales_status of this MyInvestmentsRequest.
        :type: int
        """

        self._sales_status = sales_status

    @property
    def is_in_repayment(self):
        """
        Gets the is_in_repayment of this MyInvestmentsRequest.
        Search only active in repayment loans, StatusCodes (2, 5, 100)

        :return: The is_in_repayment of this MyInvestmentsRequest.
        :rtype: bool
        """
        return self._is_in_repayment

    @is_in_repayment.setter
    def is_in_repayment(self, is_in_repayment):
        """
        Sets the is_in_repayment of this MyInvestmentsRequest.
        Search only active in repayment loans, StatusCodes (2, 5, 100)

        :param is_in_repayment: The is_in_repayment of this MyInvestmentsRequest.
        :type: bool
        """

        self._is_in_repayment = is_in_repayment

    @property
    def page_size(self):
        """
        Gets the page_size of this MyInvestmentsRequest.
        Max items in result, default is 1000

        :return: The page_size of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this MyInvestmentsRequest.
        Max items in result, default is 1000

        :param page_size: The page_size of this MyInvestmentsRequest.
        :type: int
        """

        if not page_size:
            raise ValueError("Invalid value for `page_size`, must not be `None`")
        if page_size > 1000.0:
            raise ValueError("Invalid value for `page_size`, must be a value less than or equal to `1000.0`")
        if page_size < 1.0:
            raise ValueError("Invalid value for `page_size`, must be a value greater than or equal to `1.0`")

        self._page_size = page_size

    @property
    def page_nr(self):
        """
        Gets the page_nr of this MyInvestmentsRequest.
        Result page nr

        :return: The page_nr of this MyInvestmentsRequest.
        :rtype: int
        """
        return self._page_nr

    @page_nr.setter
    def page_nr(self, page_nr):
        """
        Sets the page_nr of this MyInvestmentsRequest.
        Result page nr

        :param page_nr: The page_nr of this MyInvestmentsRequest.
        :type: int
        """

        if not page_nr:
            raise ValueError("Invalid value for `page_nr`, must not be `None`")
        if page_nr > 2.147483647E9:
            raise ValueError("Invalid value for `page_nr`, must be a value less than or equal to `2.147483647E9`")
        if page_nr < 1.0:
            raise ValueError("Invalid value for `page_nr`, must be a value greater than or equal to `1.0`")

        self._page_nr = page_nr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
