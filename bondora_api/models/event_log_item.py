# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EventLogItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, event_date=None, event_type=None, ip_address=None, data=None):
        """
        EventLogItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'event_date': 'datetime',
            'event_type': 'int',
            'ip_address': 'str',
            'data': 'str'
        }

        self.attribute_map = {
            'event_date': 'EventDate',
            'event_type': 'EventType',
            'ip_address': 'IpAddress',
            'data': 'Data'
        }

        self._event_date = event_date
        self._event_type = event_type
        self._ip_address = ip_address
        self._data = data

    @property
    def event_date(self):
        """
        Gets the event_date of this EventLogItem.
        Event date

        :return: The event_date of this EventLogItem.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """
        Sets the event_date of this EventLogItem.
        Event date

        :param event_date: The event_date of this EventLogItem.
        :type: datetime
        """

        self._event_date = event_date

    @property
    def event_type(self):
        """
        Gets the event_type of this EventLogItem.
        Event type

        :return: The event_type of this EventLogItem.
        :rtype: int
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this EventLogItem.
        Event type

        :param event_type: The event_type of this EventLogItem.
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5]
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def ip_address(self):
        """
        Gets the ip_address of this EventLogItem.
        IP address

        :return: The ip_address of this EventLogItem.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this EventLogItem.
        IP address

        :param ip_address: The ip_address of this EventLogItem.
        :type: str
        """

        self._ip_address = ip_address

    @property
    def data(self):
        """
        Gets the data of this EventLogItem.
        Request data JSON format

        :return: The data of this EventLogItem.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this EventLogItem.
        Request data JSON format

        :param data: The data of this EventLogItem.
        :type: str
        """

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
