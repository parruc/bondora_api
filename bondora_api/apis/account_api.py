# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AccountApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def account_get_active(self, **kwargs):
        """
        Gets list of your investments
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_get_active(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param datetime request_loan_issued_date_from: Loan issued start date from
        :param datetime request_loan_issued_date_to: Loan issued start date to
        :param float request_principal_min: Remaining principal amount min
        :param float request_principal_max: Remaining principal amount max
        :param float request_interest_min: Interest rate min
        :param float request_interest_max: Interest rate max
        :param int request_length_max: Loan lenght min
        :param int request_length_min: Loan lenght max
        :param float request_late_principal_amount_min: Principal debt amount min
        :param float request_late_principal_amount_max: Principal debt amount max
        :param datetime request_debt_occured_on_from: Principal debt started date from
        :param datetime request_debt_occured_on_to: Principal debt started date to
        :param datetime request_debt_occured_on_for_secondary_from: Interest debt started date from
        :param datetime request_debt_occured_on_for_secondary_to: Interest debt started date to
        :param datetime request_defaulted_date_from: Defaulted date from
        :param datetime request_defaulted_date_to: Defaulted date to
        :param datetime request_rescheduled_from: Defaulted date from
        :param datetime request_rescheduled_to: Defaulted date to
        :param datetime request_sold_date_from: When it was sold on Secondary market from
        :param datetime request_sold_date_to: When it was sold on Secondary market to
        :param datetime request_purchase_date_from: When you received the investment Auctions/Secondary market from
        :param datetime request_purchase_date_to: When you received the investment Auctions/Secondary market to
        :param datetime request_next_payment_date_to: Next payment date to
        :param datetime request_next_payment_date_from: Next payment date from
        :param datetime request_last_payment_date_from: Last payment date from
        :param datetime request_last_payment_date_to: Last payment date to
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param int request_credit_score_min: Minimum credit score
        :param int request_credit_score_max: Maximum credit score
        :param str request_user_name: Borrower's username
        :param list[int] request_loan_status_code: Loan status code              <para>2 Current</para><para>3 Cancelled</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>
        :param int request_income_verification_status: Income verification type
        :param int request_loan_debt_management_stage: Latest debt management stage
        :param int request_loan_debt_management_stage_type: Latest debt management stage type
        :param datetime request_loan_debt_management_date_active_from: Latest debt management date active from
        :param datetime request_loan_debt_management_date_active_to: Latest debt management date active to
        :param int request_auction_bid_type: Auction bid type
        :param int request_sales_status: Second market sale status              <para>NULL All active</para><para>0 Bought investments</para><para>1 Sold investments</para><para>2 Investment is on sale</para><para>3 Investment is not on sale</para>
        :param bool request_is_in_repayment: Search only active in repayment loans, StatusCodes (2, 5, 100)
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultMyInvestments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_get_active_with_http_info(**kwargs)
        else:
            (data) = self.account_get_active_with_http_info(**kwargs)
            return data

    def account_get_active_with_http_info(self, **kwargs):
        """
        Gets list of your investments
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_get_active_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param datetime request_loan_issued_date_from: Loan issued start date from
        :param datetime request_loan_issued_date_to: Loan issued start date to
        :param float request_principal_min: Remaining principal amount min
        :param float request_principal_max: Remaining principal amount max
        :param float request_interest_min: Interest rate min
        :param float request_interest_max: Interest rate max
        :param int request_length_max: Loan lenght min
        :param int request_length_min: Loan lenght max
        :param float request_late_principal_amount_min: Principal debt amount min
        :param float request_late_principal_amount_max: Principal debt amount max
        :param datetime request_debt_occured_on_from: Principal debt started date from
        :param datetime request_debt_occured_on_to: Principal debt started date to
        :param datetime request_debt_occured_on_for_secondary_from: Interest debt started date from
        :param datetime request_debt_occured_on_for_secondary_to: Interest debt started date to
        :param datetime request_defaulted_date_from: Defaulted date from
        :param datetime request_defaulted_date_to: Defaulted date to
        :param datetime request_rescheduled_from: Defaulted date from
        :param datetime request_rescheduled_to: Defaulted date to
        :param datetime request_sold_date_from: When it was sold on Secondary market from
        :param datetime request_sold_date_to: When it was sold on Secondary market to
        :param datetime request_purchase_date_from: When you received the investment Auctions/Secondary market from
        :param datetime request_purchase_date_to: When you received the investment Auctions/Secondary market to
        :param datetime request_next_payment_date_to: Next payment date to
        :param datetime request_next_payment_date_from: Next payment date from
        :param datetime request_last_payment_date_from: Last payment date from
        :param datetime request_last_payment_date_to: Last payment date to
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param int request_credit_score_min: Minimum credit score
        :param int request_credit_score_max: Maximum credit score
        :param str request_user_name: Borrower's username
        :param list[int] request_loan_status_code: Loan status code              <para>2 Current</para><para>3 Cancelled</para><para>100 Overdue</para><para>5 60+ days overdue</para><para>4 Repaid</para><para>8 Released</para>
        :param int request_income_verification_status: Income verification type
        :param int request_loan_debt_management_stage: Latest debt management stage
        :param int request_loan_debt_management_stage_type: Latest debt management stage type
        :param datetime request_loan_debt_management_date_active_from: Latest debt management date active from
        :param datetime request_loan_debt_management_date_active_to: Latest debt management date active to
        :param int request_auction_bid_type: Auction bid type
        :param int request_sales_status: Second market sale status              <para>NULL All active</para><para>0 Bought investments</para><para>1 Sold investments</para><para>2 Investment is on sale</para><para>3 Investment is not on sale</para>
        :param bool request_is_in_repayment: Search only active in repayment loans, StatusCodes (2, 5, 100)
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultMyInvestments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_loan_issued_date_from', 'request_loan_issued_date_to', 'request_principal_min', 'request_principal_max', 'request_interest_min', 'request_interest_max', 'request_length_max', 'request_length_min', 'request_late_principal_amount_min', 'request_late_principal_amount_max', 'request_debt_occured_on_from', 'request_debt_occured_on_to', 'request_debt_occured_on_for_secondary_from', 'request_debt_occured_on_for_secondary_to', 'request_defaulted_date_from', 'request_defaulted_date_to', 'request_rescheduled_from', 'request_rescheduled_to', 'request_sold_date_from', 'request_sold_date_to', 'request_purchase_date_from', 'request_purchase_date_to', 'request_next_payment_date_to', 'request_next_payment_date_from', 'request_last_payment_date_from', 'request_last_payment_date_to', 'request_countries', 'request_ratings', 'request_credit_score_min', 'request_credit_score_max', 'request_user_name', 'request_loan_status_code', 'request_income_verification_status', 'request_loan_debt_management_stage', 'request_loan_debt_management_stage_type', 'request_loan_debt_management_date_active_from', 'request_loan_debt_management_date_active_to', 'request_auction_bid_type', 'request_sales_status', 'request_is_in_repayment', 'request_page_size', 'request_page_nr']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_active" % key
                )
            params[key] = val
        del params['kwargs']

        if 'request_page_size' in params and params['request_page_size'] > 1000.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `account_get_active`, must be a value less than or equal to  `1000.0`")
        if 'request_page_size' in params and params['request_page_size'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `account_get_active`, must be a value greater than or equal to `1.0`")
        if 'request_page_nr' in params and params['request_page_nr'] > 2.147483647E9:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `account_get_active`, must be a value less than or equal to  `2.147483647E9`")
        if 'request_page_nr' in params and params['request_page_nr'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `account_get_active`, must be a value greater than or equal to `1.0`")
        resource_path = '/api/v1/account/investments'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'request_loan_issued_date_from' in params:
            query_params['request.loanIssuedDateFrom'] = params['request_loan_issued_date_from']
        if 'request_loan_issued_date_to' in params:
            query_params['request.loanIssuedDateTo'] = params['request_loan_issued_date_to']
        if 'request_principal_min' in params:
            query_params['request.principalMin'] = params['request_principal_min']
        if 'request_principal_max' in params:
            query_params['request.principalMax'] = params['request_principal_max']
        if 'request_interest_min' in params:
            query_params['request.interestMin'] = params['request_interest_min']
        if 'request_interest_max' in params:
            query_params['request.interestMax'] = params['request_interest_max']
        if 'request_length_max' in params:
            query_params['request.lengthMax'] = params['request_length_max']
        if 'request_length_min' in params:
            query_params['request.lengthMin'] = params['request_length_min']
        if 'request_late_principal_amount_min' in params:
            query_params['request.latePrincipalAmountMin'] = params['request_late_principal_amount_min']
        if 'request_late_principal_amount_max' in params:
            query_params['request.latePrincipalAmountMax'] = params['request_late_principal_amount_max']
        if 'request_debt_occured_on_from' in params:
            query_params['request.debtOccuredOnFrom'] = params['request_debt_occured_on_from']
        if 'request_debt_occured_on_to' in params:
            query_params['request.debtOccuredOnTo'] = params['request_debt_occured_on_to']
        if 'request_debt_occured_on_for_secondary_from' in params:
            query_params['request.debtOccuredOnForSecondaryFrom'] = params['request_debt_occured_on_for_secondary_from']
        if 'request_debt_occured_on_for_secondary_to' in params:
            query_params['request.debtOccuredOnForSecondaryTo'] = params['request_debt_occured_on_for_secondary_to']
        if 'request_defaulted_date_from' in params:
            query_params['request.defaultedDateFrom'] = params['request_defaulted_date_from']
        if 'request_defaulted_date_to' in params:
            query_params['request.defaultedDateTo'] = params['request_defaulted_date_to']
        if 'request_rescheduled_from' in params:
            query_params['request.rescheduledFrom'] = params['request_rescheduled_from']
        if 'request_rescheduled_to' in params:
            query_params['request.rescheduledTo'] = params['request_rescheduled_to']
        if 'request_sold_date_from' in params:
            query_params['request.soldDateFrom'] = params['request_sold_date_from']
        if 'request_sold_date_to' in params:
            query_params['request.soldDateTo'] = params['request_sold_date_to']
        if 'request_purchase_date_from' in params:
            query_params['request.purchaseDateFrom'] = params['request_purchase_date_from']
        if 'request_purchase_date_to' in params:
            query_params['request.purchaseDateTo'] = params['request_purchase_date_to']
        if 'request_next_payment_date_to' in params:
            query_params['request.nextPaymentDateTo'] = params['request_next_payment_date_to']
        if 'request_next_payment_date_from' in params:
            query_params['request.nextPaymentDateFrom'] = params['request_next_payment_date_from']
        if 'request_last_payment_date_from' in params:
            query_params['request.lastPaymentDateFrom'] = params['request_last_payment_date_from']
        if 'request_last_payment_date_to' in params:
            query_params['request.lastPaymentDateTo'] = params['request_last_payment_date_to']
        if 'request_countries' in params:
            query_params['request.countries'] = params['request_countries']
        if 'request_ratings' in params:
            query_params['request.ratings'] = params['request_ratings']
        if 'request_credit_score_min' in params:
            query_params['request.creditScoreMin'] = params['request_credit_score_min']
        if 'request_credit_score_max' in params:
            query_params['request.creditScoreMax'] = params['request_credit_score_max']
        if 'request_user_name' in params:
            query_params['request.userName'] = params['request_user_name']
        if 'request_loan_status_code' in params:
            query_params['request.loanStatusCode'] = params['request_loan_status_code']
        if 'request_income_verification_status' in params:
            query_params['request.incomeVerificationStatus'] = params['request_income_verification_status']
        if 'request_loan_debt_management_stage' in params:
            query_params['request.loanDebtManagementStage'] = params['request_loan_debt_management_stage']
        if 'request_loan_debt_management_stage_type' in params:
            query_params['request.loanDebtManagementStageType'] = params['request_loan_debt_management_stage_type']
        if 'request_loan_debt_management_date_active_from' in params:
            query_params['request.loanDebtManagementDateActiveFrom'] = params['request_loan_debt_management_date_active_from']
        if 'request_loan_debt_management_date_active_to' in params:
            query_params['request.loanDebtManagementDateActiveTo'] = params['request_loan_debt_management_date_active_to']
        if 'request_auction_bid_type' in params:
            query_params['request.auctionBidType'] = params['request_auction_bid_type']
        if 'request_sales_status' in params:
            query_params['request.salesStatus'] = params['request_sales_status']
        if 'request_is_in_repayment' in params:
            query_params['request.isInRepayment'] = params['request_is_in_repayment']
        if 'request_page_size' in params:
            query_params['request.pageSize'] = params['request_page_size']
        if 'request_page_nr' in params:
            query_params['request.pageNr'] = params['request_page_nr']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultMyInvestments',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def account_get_balance(self, **kwargs):
        """
        Gets your account balance information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_get_balance(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ApiResultMyAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_get_balance_with_http_info(**kwargs)
        else:
            (data) = self.account_get_balance_with_http_info(**kwargs)
            return data

    def account_get_balance_with_http_info(self, **kwargs):
        """
        Gets your account balance information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_get_balance_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ApiResultMyAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_balance" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/account/balance'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultMyAccountBalance',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def account_get_event_log(self, **kwargs):
        """
        Gets events that have been made with this application (related to current access token)
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_get_event_log(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param datetime request_event_date_from: Start datetime
        :param datetime request_event_date_to: end datetime
        :param int request_event_type: Event type
        :param str request_ip_address: IP address
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultEventLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.account_get_event_log_with_http_info(**kwargs)
        else:
            (data) = self.account_get_event_log_with_http_info(**kwargs)
            return data

    def account_get_event_log_with_http_info(self, **kwargs):
        """
        Gets events that have been made with this application (related to current access token)
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.account_get_event_log_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param datetime request_event_date_from: Start datetime
        :param datetime request_event_date_to: end datetime
        :param int request_event_type: Event type
        :param str request_ip_address: IP address
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultEventLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_event_date_from', 'request_event_date_to', 'request_event_type', 'request_ip_address', 'request_page_size', 'request_page_nr']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_event_log" % key
                )
            params[key] = val
        del params['kwargs']

        if 'request_page_size' in params and params['request_page_size'] > 1000.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `account_get_event_log`, must be a value less than or equal to  `1000.0`")
        if 'request_page_size' in params and params['request_page_size'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `account_get_event_log`, must be a value greater than or equal to `1.0`")
        if 'request_page_nr' in params and params['request_page_nr'] > 2.147483647E9:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `account_get_event_log`, must be a value less than or equal to  `2.147483647E9`")
        if 'request_page_nr' in params and params['request_page_nr'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `account_get_event_log`, must be a value greater than or equal to `1.0`")
        resource_path = '/api/v1/eventlog'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'request_event_date_from' in params:
            query_params['request.eventDateFrom'] = params['request_event_date_from']
        if 'request_event_date_to' in params:
            query_params['request.eventDateTo'] = params['request_event_date_to']
        if 'request_event_type' in params:
            query_params['request.eventType'] = params['request_event_type']
        if 'request_ip_address' in params:
            query_params['request.ipAddress'] = params['request_ip_address']
        if 'request_page_size' in params:
            query_params['request.pageSize'] = params['request_page_size']
        if 'request_page_nr' in params:
            query_params['request.pageNr'] = params['request_page_nr']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultEventLog',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
