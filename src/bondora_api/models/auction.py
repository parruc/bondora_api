# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Auction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, loan_id=None, auction_id=None, loan_number=None, user_name=None, new_credit_customer=None, loan_application_started_date=None, planned_close_date=None, application_signed_hour=None, application_signed_weekday=None, verification_type=None, language_code=None, age=None, date_of_birth=None, gender=None, country=None, credit_score_es_micro_l=None, credit_score_es_equifax_risk=None, credit_score_fi_asiakas_tieto_risk_grade=None, credit_score_ee_mini=None, applied_amount=None, interest=None, loan_duration=None, county=None, city=None, education=None, employment_duration_current_employer=None, home_ownership_type=None, income_total=None, monthly_payment=None, monthly_payment_day=None, model_version=None, expected_loss=None, rating=None, loss_given_default=None, probability_of_default=None, expected_return_alpha=None, liabilities_total=None, listed_on_utc=None, actual_close_date=None, winning_bids_amount=None, remaining_amount=None, user_bids=None, user_bid_amount=None, fullfilled=None, credit_score=None, scoring_date=None, use_of_loan=None, marital_status=None, nr_of_dependants=None, employment_status=None, employment_position=None, work_experience=None, occupation_area=None, income_from_principal_employer=None, income_from_pension=None, income_from_family_allowance=None, income_from_social_welfare=None, income_from_leave_pay=None, income_from_child_support=None, income_other=None, free_cash=None, debt_to_income=None, ead_rate=None, maturity_factor=None, interest_rate_alpha=None):
        """
        Auction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'loan_id': 'str',
            'auction_id': 'str',
            'loan_number': 'int',
            'user_name': 'str',
            'new_credit_customer': 'int',
            'loan_application_started_date': 'datetime',
            'planned_close_date': 'datetime',
            'application_signed_hour': 'int',
            'application_signed_weekday': 'int',
            'verification_type': 'int',
            'language_code': 'int',
            'age': 'int',
            'date_of_birth': 'datetime',
            'gender': 'int',
            'country': 'str',
            'credit_score_es_micro_l': 'str',
            'credit_score_es_equifax_risk': 'str',
            'credit_score_fi_asiakas_tieto_risk_grade': 'str',
            'credit_score_ee_mini': 'str',
            'applied_amount': 'float',
            'interest': 'float',
            'loan_duration': 'int',
            'county': 'str',
            'city': 'str',
            'education': 'int',
            'employment_duration_current_employer': 'str',
            'home_ownership_type': 'int',
            'income_total': 'float',
            'monthly_payment': 'float',
            'monthly_payment_day': 'int',
            'model_version': 'int',
            'expected_loss': 'float',
            'rating': 'str',
            'loss_given_default': 'float',
            'probability_of_default': 'float',
            'expected_return_alpha': 'float',
            'liabilities_total': 'float',
            'listed_on_utc': 'datetime',
            'actual_close_date': 'datetime',
            'winning_bids_amount': 'float',
            'remaining_amount': 'float',
            'user_bids': 'int',
            'user_bid_amount': 'float',
            'fullfilled': 'float',
            'credit_score': 'int',
            'scoring_date': 'datetime',
            'use_of_loan': 'int',
            'marital_status': 'int',
            'nr_of_dependants': 'str',
            'employment_status': 'int',
            'employment_position': 'str',
            'work_experience': 'str',
            'occupation_area': 'int',
            'income_from_principal_employer': 'float',
            'income_from_pension': 'float',
            'income_from_family_allowance': 'float',
            'income_from_social_welfare': 'float',
            'income_from_leave_pay': 'float',
            'income_from_child_support': 'float',
            'income_other': 'float',
            'free_cash': 'float',
            'debt_to_income': 'float',
            'ead_rate': 'float',
            'maturity_factor': 'float',
            'interest_rate_alpha': 'float'
        }

        self.attribute_map = {
            'loan_id': 'LoanId',
            'auction_id': 'AuctionId',
            'loan_number': 'LoanNumber',
            'user_name': 'UserName',
            'new_credit_customer': 'NewCreditCustomer',
            'loan_application_started_date': 'LoanApplicationStartedDate',
            'planned_close_date': 'PlannedCloseDate',
            'application_signed_hour': 'ApplicationSignedHour',
            'application_signed_weekday': 'ApplicationSignedWeekday',
            'verification_type': 'VerificationType',
            'language_code': 'LanguageCode',
            'age': 'Age',
            'date_of_birth': 'DateOfBirth',
            'gender': 'Gender',
            'country': 'Country',
            'credit_score_es_micro_l': 'CreditScoreEsMicroL',
            'credit_score_es_equifax_risk': 'CreditScoreEsEquifaxRisk',
            'credit_score_fi_asiakas_tieto_risk_grade': 'CreditScoreFiAsiakasTietoRiskGrade',
            'credit_score_ee_mini': 'CreditScoreEeMini',
            'applied_amount': 'AppliedAmount',
            'interest': 'Interest',
            'loan_duration': 'LoanDuration',
            'county': 'County',
            'city': 'City',
            'education': 'Education',
            'employment_duration_current_employer': 'EmploymentDurationCurrentEmployer',
            'home_ownership_type': 'HomeOwnershipType',
            'income_total': 'IncomeTotal',
            'monthly_payment': 'MonthlyPayment',
            'monthly_payment_day': 'MonthlyPaymentDay',
            'model_version': 'ModelVersion',
            'expected_loss': 'ExpectedLoss',
            'rating': 'Rating',
            'loss_given_default': 'LossGivenDefault',
            'probability_of_default': 'ProbabilityOfDefault',
            'expected_return_alpha': 'ExpectedReturnAlpha',
            'liabilities_total': 'LiabilitiesTotal',
            'listed_on_utc': 'ListedOnUTC',
            'actual_close_date': 'ActualCloseDate',
            'winning_bids_amount': 'WinningBidsAmount',
            'remaining_amount': 'RemainingAmount',
            'user_bids': 'UserBids',
            'user_bid_amount': 'UserBidAmount',
            'fullfilled': 'Fullfilled',
            'credit_score': 'CreditScore',
            'scoring_date': 'ScoringDate',
            'use_of_loan': 'UseOfLoan',
            'marital_status': 'MaritalStatus',
            'nr_of_dependants': 'NrOfDependants',
            'employment_status': 'EmploymentStatus',
            'employment_position': 'EmploymentPosition',
            'work_experience': 'WorkExperience',
            'occupation_area': 'OccupationArea',
            'income_from_principal_employer': 'IncomeFromPrincipalEmployer',
            'income_from_pension': 'IncomeFromPension',
            'income_from_family_allowance': 'IncomeFromFamilyAllowance',
            'income_from_social_welfare': 'IncomeFromSocialWelfare',
            'income_from_leave_pay': 'IncomeFromLeavePay',
            'income_from_child_support': 'IncomeFromChildSupport',
            'income_other': 'IncomeOther',
            'free_cash': 'FreeCash',
            'debt_to_income': 'DebtToIncome',
            'ead_rate': 'EADRate',
            'maturity_factor': 'MaturityFactor',
            'interest_rate_alpha': 'InterestRateAlpha'
        }

        self._loan_id = loan_id
        self._auction_id = auction_id
        self._loan_number = loan_number
        self._user_name = user_name
        self._new_credit_customer = new_credit_customer
        self._loan_application_started_date = loan_application_started_date
        self._planned_close_date = planned_close_date
        self._application_signed_hour = application_signed_hour
        self._application_signed_weekday = application_signed_weekday
        self._verification_type = verification_type
        self._language_code = language_code
        self._age = age
        self._date_of_birth = date_of_birth
        self._gender = gender
        self._country = country
        self._credit_score_es_micro_l = credit_score_es_micro_l
        self._credit_score_es_equifax_risk = credit_score_es_equifax_risk
        self._credit_score_fi_asiakas_tieto_risk_grade = credit_score_fi_asiakas_tieto_risk_grade
        self._credit_score_ee_mini = credit_score_ee_mini
        self._applied_amount = applied_amount
        self._interest = interest
        self._loan_duration = loan_duration
        self._county = county
        self._city = city
        self._education = education
        self._employment_duration_current_employer = employment_duration_current_employer
        self._home_ownership_type = home_ownership_type
        self._income_total = income_total
        self._monthly_payment = monthly_payment
        self._monthly_payment_day = monthly_payment_day
        self._model_version = model_version
        self._expected_loss = expected_loss
        self._rating = rating
        self._loss_given_default = loss_given_default
        self._probability_of_default = probability_of_default
        self._expected_return_alpha = expected_return_alpha
        self._liabilities_total = liabilities_total
        self._listed_on_utc = listed_on_utc
        self._actual_close_date = actual_close_date
        self._winning_bids_amount = winning_bids_amount
        self._remaining_amount = remaining_amount
        self._user_bids = user_bids
        self._user_bid_amount = user_bid_amount
        self._fullfilled = fullfilled
        self._credit_score = credit_score
        self._scoring_date = scoring_date
        self._use_of_loan = use_of_loan
        self._marital_status = marital_status
        self._nr_of_dependants = nr_of_dependants
        self._employment_status = employment_status
        self._employment_position = employment_position
        self._work_experience = work_experience
        self._occupation_area = occupation_area
        self._income_from_principal_employer = income_from_principal_employer
        self._income_from_pension = income_from_pension
        self._income_from_family_allowance = income_from_family_allowance
        self._income_from_social_welfare = income_from_social_welfare
        self._income_from_leave_pay = income_from_leave_pay
        self._income_from_child_support = income_from_child_support
        self._income_other = income_other
        self._free_cash = free_cash
        self._debt_to_income = debt_to_income
        self._ead_rate = ead_rate
        self._maturity_factor = maturity_factor
        self._interest_rate_alpha = interest_rate_alpha

    @property
    def loan_id(self):
        """
        Gets the loan_id of this Auction.
        Unique loan identificator

        :return: The loan_id of this Auction.
        :rtype: str
        """
        return self._loan_id

    @loan_id.setter
    def loan_id(self, loan_id):
        """
        Sets the loan_id of this Auction.
        Unique loan identificator

        :param loan_id: The loan_id of this Auction.
        :type: str
        """

        self._loan_id = loan_id

    @property
    def auction_id(self):
        """
        Gets the auction_id of this Auction.
        Unique auction identificator

        :return: The auction_id of this Auction.
        :rtype: str
        """
        return self._auction_id

    @auction_id.setter
    def auction_id(self, auction_id):
        """
        Sets the auction_id of this Auction.
        Unique auction identificator

        :param auction_id: The auction_id of this Auction.
        :type: str
        """

        self._auction_id = auction_id

    @property
    def loan_number(self):
        """
        Gets the loan_number of this Auction.
        Number of the loan

        :return: The loan_number of this Auction.
        :rtype: int
        """
        return self._loan_number

    @loan_number.setter
    def loan_number(self, loan_number):
        """
        Sets the loan_number of this Auction.
        Number of the loan

        :param loan_number: The loan_number of this Auction.
        :type: int
        """

        self._loan_number = loan_number

    @property
    def user_name(self):
        """
        Gets the user_name of this Auction.
        Customer's Bondora username

        :return: The user_name of this Auction.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this Auction.
        Customer's Bondora username

        :param user_name: The user_name of this Auction.
        :type: str
        """

        self._user_name = user_name

    @property
    def new_credit_customer(self):
        """
        Gets the new_credit_customer of this Auction.
        Did the customer have prior credit history in Bondora              <para>0 Customer had at least 3 months of credit history in Bondora</para><para>1 No prior credit history in Bondora</para>

        :return: The new_credit_customer of this Auction.
        :rtype: int
        """
        return self._new_credit_customer

    @new_credit_customer.setter
    def new_credit_customer(self, new_credit_customer):
        """
        Sets the new_credit_customer of this Auction.
        Did the customer have prior credit history in Bondora              <para>0 Customer had at least 3 months of credit history in Bondora</para><para>1 No prior credit history in Bondora</para>

        :param new_credit_customer: The new_credit_customer of this Auction.
        :type: int
        """

        self._new_credit_customer = new_credit_customer

    @property
    def loan_application_started_date(self):
        """
        Gets the loan_application_started_date of this Auction.
        Date when the loan application was started

        :return: The loan_application_started_date of this Auction.
        :rtype: datetime
        """
        return self._loan_application_started_date

    @loan_application_started_date.setter
    def loan_application_started_date(self, loan_application_started_date):
        """
        Sets the loan_application_started_date of this Auction.
        Date when the loan application was started

        :param loan_application_started_date: The loan_application_started_date of this Auction.
        :type: datetime
        """

        self._loan_application_started_date = loan_application_started_date

    @property
    def planned_close_date(self):
        """
        Gets the planned_close_date of this Auction.
        Date and time when the auction is closed, if it's not funded 100% before that.              Auction will be closed before that, if auction is funded 100%.

        :return: The planned_close_date of this Auction.
        :rtype: datetime
        """
        return self._planned_close_date

    @planned_close_date.setter
    def planned_close_date(self, planned_close_date):
        """
        Sets the planned_close_date of this Auction.
        Date and time when the auction is closed, if it's not funded 100% before that.              Auction will be closed before that, if auction is funded 100%.

        :param planned_close_date: The planned_close_date of this Auction.
        :type: datetime
        """

        self._planned_close_date = planned_close_date

    @property
    def application_signed_hour(self):
        """
        Gets the application_signed_hour of this Auction.
        Hour of signing the loan application

        :return: The application_signed_hour of this Auction.
        :rtype: int
        """
        return self._application_signed_hour

    @application_signed_hour.setter
    def application_signed_hour(self, application_signed_hour):
        """
        Sets the application_signed_hour of this Auction.
        Hour of signing the loan application

        :param application_signed_hour: The application_signed_hour of this Auction.
        :type: int
        """

        self._application_signed_hour = application_signed_hour

    @property
    def application_signed_weekday(self):
        """
        Gets the application_signed_weekday of this Auction.
        Weekday of signing the loan application

        :return: The application_signed_weekday of this Auction.
        :rtype: int
        """
        return self._application_signed_weekday

    @application_signed_weekday.setter
    def application_signed_weekday(self, application_signed_weekday):
        """
        Sets the application_signed_weekday of this Auction.
        Weekday of signing the loan application

        :param application_signed_weekday: The application_signed_weekday of this Auction.
        :type: int
        """

        self._application_signed_weekday = application_signed_weekday

    @property
    def verification_type(self):
        """
        Gets the verification_type of this Auction.
        Verification type

        :return: The verification_type of this Auction.
        :rtype: int
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """
        Sets the verification_type of this Auction.
        Verification type

        :param verification_type: The verification_type of this Auction.
        :type: int
        """
        allowed_values = [1, 2, 3, 4]
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type

    @property
    def language_code(self):
        """
        Gets the language_code of this Auction.
        Two letter language code

        :return: The language_code of this Auction.
        :rtype: int
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """
        Sets the language_code of this Auction.
        Two letter language code

        :param language_code: The language_code of this Auction.
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"
                .format(language_code, allowed_values)
            )

        self._language_code = language_code

    @property
    def age(self):
        """
        Gets the age of this Auction.
        Age of the borrower (years)

        :return: The age of this Auction.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """
        Sets the age of this Auction.
        Age of the borrower (years)

        :param age: The age of this Auction.
        :type: int
        """

        self._age = age

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this Auction.
        Borrower's date of birth

        :return: The date_of_birth of this Auction.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this Auction.
        Borrower's date of birth

        :param date_of_birth: The date_of_birth of this Auction.
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def gender(self):
        """
        Gets the gender of this Auction.
        Gender

        :return: The gender of this Auction.
        :rtype: int
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this Auction.
        Gender

        :param gender: The gender of this Auction.
        :type: int
        """
        allowed_values = [0, 1, 2]
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def country(self):
        """
        Gets the country of this Auction.
        Residency of the borrower

        :return: The country of this Auction.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Auction.
        Residency of the borrower

        :param country: The country of this Auction.
        :type: str
        """

        self._country = country

    @property
    def credit_score_es_micro_l(self):
        """
        Gets the credit_score_es_micro_l of this Auction.
        A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>

        :return: The credit_score_es_micro_l of this Auction.
        :rtype: str
        """
        return self._credit_score_es_micro_l

    @credit_score_es_micro_l.setter
    def credit_score_es_micro_l(self, credit_score_es_micro_l):
        """
        Sets the credit_score_es_micro_l of this Auction.
        A score that is specifically designed for risk classifying subprime borrowers (defined by Equifax as borrowers that do not have access to bank loans).               A measure of the probability of default one month ahead.              <para>The score is given on a 10-grade scale, from the best score to the worst:</para><para>M1, M2, M3, M4, M5, M6, M7, M8, M9, M10</para>

        :param credit_score_es_micro_l: The credit_score_es_micro_l of this Auction.
        :type: str
        """

        self._credit_score_es_micro_l = credit_score_es_micro_l

    @property
    def credit_score_es_equifax_risk(self):
        """
        Gets the credit_score_es_equifax_risk of this Auction.
        Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>

        :return: The credit_score_es_equifax_risk of this Auction.
        :rtype: str
        """
        return self._credit_score_es_equifax_risk

    @credit_score_es_equifax_risk.setter
    def credit_score_es_equifax_risk(self, credit_score_es_equifax_risk):
        """
        Sets the credit_score_es_equifax_risk of this Auction.
        Generic score for the loan applicants that do not have active past due operations in ASNEF.              A measure of the probability of default one year ahead.               The score is given on a 6-grade scale.              <para>AAA Very low</para><para>AA Low</para><para>A Average</para><para>B Average High</para><para>C High</para><para>D Very High</para>

        :param credit_score_es_equifax_risk: The credit_score_es_equifax_risk of this Auction.
        :type: str
        """

        self._credit_score_es_equifax_risk = credit_score_es_equifax_risk

    @property
    def credit_score_fi_asiakas_tieto_risk_grade(self):
        """
        Gets the credit_score_fi_asiakas_tieto_risk_grade of this Auction.
        Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>

        :return: The credit_score_fi_asiakas_tieto_risk_grade of this Auction.
        :rtype: str
        """
        return self._credit_score_fi_asiakas_tieto_risk_grade

    @credit_score_fi_asiakas_tieto_risk_grade.setter
    def credit_score_fi_asiakas_tieto_risk_grade(self, credit_score_fi_asiakas_tieto_risk_grade):
        """
        Sets the credit_score_fi_asiakas_tieto_risk_grade of this Auction.
        Credit Scoring model for Finnish Asiakastieto              <para>RL1 Very low risk 01-20</para><para>RL2 Low risk 21-40</para><para>RL3 Average risk 41-60</para><para>RL4 Big risk 61-80</para><para>RL5 Huge risk 81-100</para>

        :param credit_score_fi_asiakas_tieto_risk_grade: The credit_score_fi_asiakas_tieto_risk_grade of this Auction.
        :type: str
        """

        self._credit_score_fi_asiakas_tieto_risk_grade = credit_score_fi_asiakas_tieto_risk_grade

    @property
    def credit_score_ee_mini(self):
        """
        Gets the credit_score_ee_mini of this Auction.
        Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>

        :return: The credit_score_ee_mini of this Auction.
        :rtype: str
        """
        return self._credit_score_ee_mini

    @credit_score_ee_mini.setter
    def credit_score_ee_mini(self, credit_score_ee_mini):
        """
        Sets the credit_score_ee_mini of this Auction.
        Credit scoring for Estonian loans              <para>1000 No previous payments problems</para><para>900 Payments problems finished 24-36 months ago</para><para>800 Payments problems finished 12-24 months ago</para><para>700 Payments problems finished 6-12 months ago</para><para>600 Payment problems finished &lt;6 months ago</para><para>500 Active payment problems</para>

        :param credit_score_ee_mini: The credit_score_ee_mini of this Auction.
        :type: str
        """

        self._credit_score_ee_mini = credit_score_ee_mini

    @property
    def applied_amount(self):
        """
        Gets the applied_amount of this Auction.
        The amount borrower applied for originally

        :return: The applied_amount of this Auction.
        :rtype: float
        """
        return self._applied_amount

    @applied_amount.setter
    def applied_amount(self, applied_amount):
        """
        Sets the applied_amount of this Auction.
        The amount borrower applied for originally

        :param applied_amount: The applied_amount of this Auction.
        :type: float
        """

        self._applied_amount = applied_amount

    @property
    def interest(self):
        """
        Gets the interest of this Auction.
        Maximum interest rate accepted in the loan application

        :return: The interest of this Auction.
        :rtype: float
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """
        Sets the interest of this Auction.
        Maximum interest rate accepted in the loan application

        :param interest: The interest of this Auction.
        :type: float
        """

        self._interest = interest

    @property
    def loan_duration(self):
        """
        Gets the loan_duration of this Auction.
        The loan term

        :return: The loan_duration of this Auction.
        :rtype: int
        """
        return self._loan_duration

    @loan_duration.setter
    def loan_duration(self, loan_duration):
        """
        Sets the loan_duration of this Auction.
        The loan term

        :param loan_duration: The loan_duration of this Auction.
        :type: int
        """

        self._loan_duration = loan_duration

    @property
    def county(self):
        """
        Gets the county of this Auction.
        County of the borrower

        :return: The county of this Auction.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """
        Sets the county of this Auction.
        County of the borrower

        :param county: The county of this Auction.
        :type: str
        """

        self._county = county

    @property
    def city(self):
        """
        Gets the city of this Auction.
        City of the borrower

        :return: The city of this Auction.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Auction.
        City of the borrower

        :param city: The city of this Auction.
        :type: str
        """

        self._city = city

    @property
    def education(self):
        """
        Gets the education of this Auction.
        Education

        :return: The education of this Auction.
        :rtype: int
        """
        return self._education

    @education.setter
    def education(self, education):
        """
        Sets the education of this Auction.
        Education

        :param education: The education of this Auction.
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, -1]
        if education not in allowed_values:
            raise ValueError(
                "Invalid value for `education` ({0}), must be one of {1}"
                .format(education, allowed_values)
            )

        self._education = education

    @property
    def employment_duration_current_employer(self):
        """
        Gets the employment_duration_current_employer of this Auction.
        Employment time with the current employer

        :return: The employment_duration_current_employer of this Auction.
        :rtype: str
        """
        return self._employment_duration_current_employer

    @employment_duration_current_employer.setter
    def employment_duration_current_employer(self, employment_duration_current_employer):
        """
        Sets the employment_duration_current_employer of this Auction.
        Employment time with the current employer

        :param employment_duration_current_employer: The employment_duration_current_employer of this Auction.
        :type: str
        """

        self._employment_duration_current_employer = employment_duration_current_employer

    @property
    def home_ownership_type(self):
        """
        Gets the home_ownership_type of this Auction.
        Type of home ownership

        :return: The home_ownership_type of this Auction.
        :rtype: int
        """
        return self._home_ownership_type

    @home_ownership_type.setter
    def home_ownership_type(self, home_ownership_type):
        """
        Sets the home_ownership_type of this Auction.
        Type of home ownership

        :param home_ownership_type: The home_ownership_type of this Auction.
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1]
        if home_ownership_type not in allowed_values:
            raise ValueError(
                "Invalid value for `home_ownership_type` ({0}), must be one of {1}"
                .format(home_ownership_type, allowed_values)
            )

        self._home_ownership_type = home_ownership_type

    @property
    def income_total(self):
        """
        Gets the income_total of this Auction.
        Total income

        :return: The income_total of this Auction.
        :rtype: float
        """
        return self._income_total

    @income_total.setter
    def income_total(self, income_total):
        """
        Sets the income_total of this Auction.
        Total income

        :param income_total: The income_total of this Auction.
        :type: float
        """

        self._income_total = income_total

    @property
    def monthly_payment(self):
        """
        Gets the monthly_payment of this Auction.
        Loan monthly payment amount.

        :return: The monthly_payment of this Auction.
        :rtype: float
        """
        return self._monthly_payment

    @monthly_payment.setter
    def monthly_payment(self, monthly_payment):
        """
        Sets the monthly_payment of this Auction.
        Loan monthly payment amount.

        :param monthly_payment: The monthly_payment of this Auction.
        :type: float
        """

        self._monthly_payment = monthly_payment

    @property
    def monthly_payment_day(self):
        """
        Gets the monthly_payment_day of this Auction.
        The day of the month the loan payments are scheduled for.              The actual date is adjusted for weekends and bank holidays.              E.g. if 10th is a Sunday then the payment will be made on the 11th in that month.

        :return: The monthly_payment_day of this Auction.
        :rtype: int
        """
        return self._monthly_payment_day

    @monthly_payment_day.setter
    def monthly_payment_day(self, monthly_payment_day):
        """
        Sets the monthly_payment_day of this Auction.
        The day of the month the loan payments are scheduled for.              The actual date is adjusted for weekends and bank holidays.              E.g. if 10th is a Sunday then the payment will be made on the 11th in that month.

        :param monthly_payment_day: The monthly_payment_day of this Auction.
        :type: int
        """

        self._monthly_payment_day = monthly_payment_day

    @property
    def model_version(self):
        """
        Gets the model_version of this Auction.
        The version of the Rating model used for issuing the Bondora Rating

        :return: The model_version of this Auction.
        :rtype: int
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """
        Sets the model_version of this Auction.
        The version of the Rating model used for issuing the Bondora Rating

        :param model_version: The model_version of this Auction.
        :type: int
        """

        self._model_version = model_version

    @property
    def expected_loss(self):
        """
        Gets the expected_loss of this Auction.
        Expected Loss calculated by the Rating model

        :return: The expected_loss of this Auction.
        :rtype: float
        """
        return self._expected_loss

    @expected_loss.setter
    def expected_loss(self, expected_loss):
        """
        Sets the expected_loss of this Auction.
        Expected Loss calculated by the Rating model

        :param expected_loss: The expected_loss of this Auction.
        :type: float
        """

        self._expected_loss = expected_loss

    @property
    def rating(self):
        """
        Gets the rating of this Auction.
        Bondora Rating issued by the Rating model

        :return: The rating of this Auction.
        :rtype: str
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """
        Sets the rating of this Auction.
        Bondora Rating issued by the Rating model

        :param rating: The rating of this Auction.
        :type: str
        """

        self._rating = rating

    @property
    def loss_given_default(self):
        """
        Gets the loss_given_default of this Auction.
        Gives the percentage of outstanding exposure at the time of default that an investor is likely to lose if a loan actually defaults.               This means the proportion of funds lost for the investor after all expected recovery and accounting for the time value of the money recovered.               In general, LGD parameter is intended to be estimated based on the historical recoveries. However, in new markets where limited experience does not allow us more precise loss given default estimates, a LGD of 90% is assumed.

        :return: The loss_given_default of this Auction.
        :rtype: float
        """
        return self._loss_given_default

    @loss_given_default.setter
    def loss_given_default(self, loss_given_default):
        """
        Sets the loss_given_default of this Auction.
        Gives the percentage of outstanding exposure at the time of default that an investor is likely to lose if a loan actually defaults.               This means the proportion of funds lost for the investor after all expected recovery and accounting for the time value of the money recovered.               In general, LGD parameter is intended to be estimated based on the historical recoveries. However, in new markets where limited experience does not allow us more precise loss given default estimates, a LGD of 90% is assumed.

        :param loss_given_default: The loss_given_default of this Auction.
        :type: float
        """

        self._loss_given_default = loss_given_default

    @property
    def probability_of_default(self):
        """
        Gets the probability_of_default of this Auction.
        Probability of Default, refers to a loan’s probability of default within one year horizon.

        :return: The probability_of_default of this Auction.
        :rtype: float
        """
        return self._probability_of_default

    @probability_of_default.setter
    def probability_of_default(self, probability_of_default):
        """
        Sets the probability_of_default of this Auction.
        Probability of Default, refers to a loan’s probability of default within one year horizon.

        :param probability_of_default: The probability_of_default of this Auction.
        :type: float
        """

        self._probability_of_default = probability_of_default

    @property
    def expected_return_alpha(self):
        """
        Gets the expected_return_alpha of this Auction.
        Expected return alpha

        :return: The expected_return_alpha of this Auction.
        :rtype: float
        """
        return self._expected_return_alpha

    @expected_return_alpha.setter
    def expected_return_alpha(self, expected_return_alpha):
        """
        Sets the expected_return_alpha of this Auction.
        Expected return alpha

        :param expected_return_alpha: The expected_return_alpha of this Auction.
        :type: float
        """

        self._expected_return_alpha = expected_return_alpha

    @property
    def liabilities_total(self):
        """
        Gets the liabilities_total of this Auction.
        Total liabilities

        :return: The liabilities_total of this Auction.
        :rtype: float
        """
        return self._liabilities_total

    @liabilities_total.setter
    def liabilities_total(self, liabilities_total):
        """
        Sets the liabilities_total of this Auction.
        Total liabilities

        :param liabilities_total: The liabilities_total of this Auction.
        :type: float
        """

        self._liabilities_total = liabilities_total

    @property
    def listed_on_utc(self):
        """
        Gets the listed_on_utc of this Auction.
        Date when auction was published

        :return: The listed_on_utc of this Auction.
        :rtype: datetime
        """
        return self._listed_on_utc

    @listed_on_utc.setter
    def listed_on_utc(self, listed_on_utc):
        """
        Sets the listed_on_utc of this Auction.
        Date when auction was published

        :param listed_on_utc: The listed_on_utc of this Auction.
        :type: datetime
        """

        self._listed_on_utc = listed_on_utc

    @property
    def actual_close_date(self):
        """
        Gets the actual_close_date of this Auction.
        Date and time when the auction was actually closed. Is null, if auction is active.

        :return: The actual_close_date of this Auction.
        :rtype: datetime
        """
        return self._actual_close_date

    @actual_close_date.setter
    def actual_close_date(self, actual_close_date):
        """
        Sets the actual_close_date of this Auction.
        Date and time when the auction was actually closed. Is null, if auction is active.

        :param actual_close_date: The actual_close_date of this Auction.
        :type: datetime
        """

        self._actual_close_date = actual_close_date

    @property
    def winning_bids_amount(self):
        """
        Gets the winning_bids_amount of this Auction.
        The amount that auction is fulfilled, taken amount only bids where investors have enough funds.              This is preliminary calculated amount and can change when trying to close auction (auction is closed, when auction is funded 100% or PlannedCloseDate is reached) and specific investor(s) do not have enough funds.

        :return: The winning_bids_amount of this Auction.
        :rtype: float
        """
        return self._winning_bids_amount

    @winning_bids_amount.setter
    def winning_bids_amount(self, winning_bids_amount):
        """
        Sets the winning_bids_amount of this Auction.
        The amount that auction is fulfilled, taken amount only bids where investors have enough funds.              This is preliminary calculated amount and can change when trying to close auction (auction is closed, when auction is funded 100% or PlannedCloseDate is reached) and specific investor(s) do not have enough funds.

        :param winning_bids_amount: The winning_bids_amount of this Auction.
        :type: float
        """

        self._winning_bids_amount = winning_bids_amount

    @property
    def remaining_amount(self):
        """
        Gets the remaining_amount of this Auction.
        The amount that is remaining to be funded (AppliedAmount - WinningBidsAmount).

        :return: The remaining_amount of this Auction.
        :rtype: float
        """
        return self._remaining_amount

    @remaining_amount.setter
    def remaining_amount(self, remaining_amount):
        """
        Sets the remaining_amount of this Auction.
        The amount that is remaining to be funded (AppliedAmount - WinningBidsAmount).

        :param remaining_amount: The remaining_amount of this Auction.
        :type: float
        """

        self._remaining_amount = remaining_amount

    @property
    def user_bids(self):
        """
        Gets the user_bids of this Auction.
        How many bids current user has bidden into the auction

        :return: The user_bids of this Auction.
        :rtype: int
        """
        return self._user_bids

    @user_bids.setter
    def user_bids(self, user_bids):
        """
        Sets the user_bids of this Auction.
        How many bids current user has bidden into the auction

        :param user_bids: The user_bids of this Auction.
        :type: int
        """

        self._user_bids = user_bids

    @property
    def user_bid_amount(self):
        """
        Gets the user_bid_amount of this Auction.
        How much current user has bidden into the auction

        :return: The user_bid_amount of this Auction.
        :rtype: float
        """
        return self._user_bid_amount

    @user_bid_amount.setter
    def user_bid_amount(self, user_bid_amount):
        """
        Sets the user_bid_amount of this Auction.
        How much current user has bidden into the auction

        :param user_bid_amount: The user_bid_amount of this Auction.
        :type: float
        """

        self._user_bid_amount = user_bid_amount

    @property
    def fullfilled(self):
        """
        Gets the fullfilled of this Auction.
        Precentage, how much the auction is fulfilled. Can be more than 100%, if overfunded.

        :return: The fullfilled of this Auction.
        :rtype: float
        """
        return self._fullfilled

    @fullfilled.setter
    def fullfilled(self, fullfilled):
        """
        Sets the fullfilled of this Auction.
        Precentage, how much the auction is fulfilled. Can be more than 100%, if overfunded.

        :param fullfilled: The fullfilled of this Auction.
        :type: float
        """

        self._fullfilled = fullfilled

    @property
    def credit_score(self):
        """
        Gets the credit_score of this Auction.
        <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>

        :return: The credit_score of this Auction.
        :rtype: int
        """
        return self._credit_score

    @credit_score.setter
    def credit_score(self, credit_score):
        """
        Sets the credit_score of this Auction.
        <para>    1000 No previous payments problems</para>  <para>    900 Payments problems finished 24-36 months ago</para>  <para>    800 Payments problems finished 12-24 months ago</para>  <para>    700 Payments problems finished 6-12 months ago</para>  <para>    600 Payment problems finished &lt;6 months ago</para>  <para>    500 Active payment problems</para>

        :param credit_score: The credit_score of this Auction.
        :type: int
        """

        self._credit_score = credit_score

    @property
    def scoring_date(self):
        """
        Gets the scoring_date of this Auction.
        Date when the Rating was calculated for this loan

        :return: The scoring_date of this Auction.
        :rtype: datetime
        """
        return self._scoring_date

    @scoring_date.setter
    def scoring_date(self, scoring_date):
        """
        Sets the scoring_date of this Auction.
        Date when the Rating was calculated for this loan

        :param scoring_date: The scoring_date of this Auction.
        :type: datetime
        """

        self._scoring_date = scoring_date

    @property
    def use_of_loan(self):
        """
        Gets the use_of_loan of this Auction.
        Use of loan              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :return: The use_of_loan of this Auction.
        :rtype: int
        """
        return self._use_of_loan

    @use_of_loan.setter
    def use_of_loan(self, use_of_loan):
        """
        Sets the use_of_loan of this Auction.
        Use of loan              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :param use_of_loan: The use_of_loan of this Auction.
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, -1]
        if use_of_loan not in allowed_values:
            raise ValueError(
                "Invalid value for `use_of_loan` ({0}), must be one of {1}"
                .format(use_of_loan, allowed_values)
            )

        self._use_of_loan = use_of_loan

    @property
    def marital_status(self):
        """
        Gets the marital_status of this Auction.
        Marital status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :return: The marital_status of this Auction.
        :rtype: int
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """
        Sets the marital_status of this Auction.
        Marital status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :param marital_status: The marital_status of this Auction.
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, -1]
        if marital_status not in allowed_values:
            raise ValueError(
                "Invalid value for `marital_status` ({0}), must be one of {1}"
                .format(marital_status, allowed_values)
            )

        self._marital_status = marital_status

    @property
    def nr_of_dependants(self):
        """
        Gets the nr_of_dependants of this Auction.
        Number of children or other dependants              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>

        :return: The nr_of_dependants of this Auction.
        :rtype: str
        """
        return self._nr_of_dependants

    @nr_of_dependants.setter
    def nr_of_dependants(self, nr_of_dependants):
        """
        Sets the nr_of_dependants of this Auction.
        Number of children or other dependants              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>

        :param nr_of_dependants: The nr_of_dependants of this Auction.
        :type: str
        """

        self._nr_of_dependants = nr_of_dependants

    @property
    def employment_status(self):
        """
        Gets the employment_status of this Auction.
        Employment status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :return: The employment_status of this Auction.
        :rtype: int
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """
        Sets the employment_status of this Auction.
        Employment status              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :param employment_status: The employment_status of this Auction.
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, -1]
        if employment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status

    @property
    def employment_position(self):
        """
        Gets the employment_position of this Auction.
        Employment position              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>

        :return: The employment_position of this Auction.
        :rtype: str
        """
        return self._employment_position

    @employment_position.setter
    def employment_position(self, employment_position):
        """
        Sets the employment_position of this Auction.
        Employment position              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>

        :param employment_position: The employment_position of this Auction.
        :type: str
        """

        self._employment_position = employment_position

    @property
    def work_experience(self):
        """
        Gets the work_experience of this Auction.
        Work experience in total              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>

        :return: The work_experience of this Auction.
        :rtype: str
        """
        return self._work_experience

    @work_experience.setter
    def work_experience(self, work_experience):
        """
        Sets the work_experience of this Auction.
        Work experience in total              <para>Only Value for new Auctions since 1st of june 2017 is NULL</para>

        :param work_experience: The work_experience of this Auction.
        :type: str
        """

        self._work_experience = work_experience

    @property
    def occupation_area(self):
        """
        Gets the occupation_area of this Auction.
        Occupation area              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :return: The occupation_area of this Auction.
        :rtype: int
        """
        return self._occupation_area

    @occupation_area.setter
    def occupation_area(self, occupation_area):
        """
        Sets the occupation_area of this Auction.
        Occupation area              <para>Only Value for new Auctions since 1st of june 2017 is -1 (NotUsed)</para>

        :param occupation_area: The occupation_area of this Auction.
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, -1]
        if occupation_area not in allowed_values:
            raise ValueError(
                "Invalid value for `occupation_area` ({0}), must be one of {1}"
                .format(occupation_area, allowed_values)
            )

        self._occupation_area = occupation_area

    @property
    def income_from_principal_employer(self):
        """
        Gets the income_from_principal_employer of this Auction.
        Salary              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The income_from_principal_employer of this Auction.
        :rtype: float
        """
        return self._income_from_principal_employer

    @income_from_principal_employer.setter
    def income_from_principal_employer(self, income_from_principal_employer):
        """
        Sets the income_from_principal_employer of this Auction.
        Salary              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param income_from_principal_employer: The income_from_principal_employer of this Auction.
        :type: float
        """

        self._income_from_principal_employer = income_from_principal_employer

    @property
    def income_from_pension(self):
        """
        Gets the income_from_pension of this Auction.
        Pension              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The income_from_pension of this Auction.
        :rtype: float
        """
        return self._income_from_pension

    @income_from_pension.setter
    def income_from_pension(self, income_from_pension):
        """
        Sets the income_from_pension of this Auction.
        Pension              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param income_from_pension: The income_from_pension of this Auction.
        :type: float
        """

        self._income_from_pension = income_from_pension

    @property
    def income_from_family_allowance(self):
        """
        Gets the income_from_family_allowance of this Auction.
        Family allowance              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The income_from_family_allowance of this Auction.
        :rtype: float
        """
        return self._income_from_family_allowance

    @income_from_family_allowance.setter
    def income_from_family_allowance(self, income_from_family_allowance):
        """
        Sets the income_from_family_allowance of this Auction.
        Family allowance              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param income_from_family_allowance: The income_from_family_allowance of this Auction.
        :type: float
        """

        self._income_from_family_allowance = income_from_family_allowance

    @property
    def income_from_social_welfare(self):
        """
        Gets the income_from_social_welfare of this Auction.
        Social welfare              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The income_from_social_welfare of this Auction.
        :rtype: float
        """
        return self._income_from_social_welfare

    @income_from_social_welfare.setter
    def income_from_social_welfare(self, income_from_social_welfare):
        """
        Sets the income_from_social_welfare of this Auction.
        Social welfare              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param income_from_social_welfare: The income_from_social_welfare of this Auction.
        :type: float
        """

        self._income_from_social_welfare = income_from_social_welfare

    @property
    def income_from_leave_pay(self):
        """
        Gets the income_from_leave_pay of this Auction.
        Leave pay              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The income_from_leave_pay of this Auction.
        :rtype: float
        """
        return self._income_from_leave_pay

    @income_from_leave_pay.setter
    def income_from_leave_pay(self, income_from_leave_pay):
        """
        Sets the income_from_leave_pay of this Auction.
        Leave pay              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param income_from_leave_pay: The income_from_leave_pay of this Auction.
        :type: float
        """

        self._income_from_leave_pay = income_from_leave_pay

    @property
    def income_from_child_support(self):
        """
        Gets the income_from_child_support of this Auction.
        Child support              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The income_from_child_support of this Auction.
        :rtype: float
        """
        return self._income_from_child_support

    @income_from_child_support.setter
    def income_from_child_support(self, income_from_child_support):
        """
        Sets the income_from_child_support of this Auction.
        Child support              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param income_from_child_support: The income_from_child_support of this Auction.
        :type: float
        """

        self._income_from_child_support = income_from_child_support

    @property
    def income_other(self):
        """
        Gets the income_other of this Auction.
        Other income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The income_other of this Auction.
        :rtype: float
        """
        return self._income_other

    @income_other.setter
    def income_other(self, income_other):
        """
        Sets the income_other of this Auction.
        Other income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param income_other: The income_other of this Auction.
        :type: float
        """

        self._income_other = income_other

    @property
    def free_cash(self):
        """
        Gets the free_cash of this Auction.
        Discretionary Income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The free_cash of this Auction.
        :rtype: float
        """
        return self._free_cash

    @free_cash.setter
    def free_cash(self, free_cash):
        """
        Sets the free_cash of this Auction.
        Discretionary Income              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param free_cash: The free_cash of this Auction.
        :type: float
        """

        self._free_cash = free_cash

    @property
    def debt_to_income(self):
        """
        Gets the debt_to_income of this Auction.
        Debt to income ratio              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :return: The debt_to_income of this Auction.
        :rtype: float
        """
        return self._debt_to_income

    @debt_to_income.setter
    def debt_to_income(self, debt_to_income):
        """
        Sets the debt_to_income of this Auction.
        Debt to income ratio              <para>Only Value for new Auctions since 1st of june 2017 is 0</para>

        :param debt_to_income: The debt_to_income of this Auction.
        :type: float
        """

        self._debt_to_income = debt_to_income

    @property
    def ead_rate(self):
        """
        Gets the ead_rate of this Auction.
        Exposure at Default (expressed as a percentage of the original loan amount), indicates outstanding investor exposure at the time of default, including outstanding principal amount plus accrued but unpaid interests.

        :return: The ead_rate of this Auction.
        :rtype: float
        """
        return self._ead_rate

    @ead_rate.setter
    def ead_rate(self, ead_rate):
        """
        Sets the ead_rate of this Auction.
        Exposure at Default (expressed as a percentage of the original loan amount), indicates outstanding investor exposure at the time of default, including outstanding principal amount plus accrued but unpaid interests.

        :param ead_rate: The ead_rate of this Auction.
        :type: float
        """

        self._ead_rate = ead_rate

    @property
    def maturity_factor(self):
        """
        Gets the maturity_factor of this Auction.
        Maturity Factor M of 1.3 is assumed for loans with duration exceeding one year.

        :return: The maturity_factor of this Auction.
        :rtype: float
        """
        return self._maturity_factor

    @maturity_factor.setter
    def maturity_factor(self, maturity_factor):
        """
        Sets the maturity_factor of this Auction.
        Maturity Factor M of 1.3 is assumed for loans with duration exceeding one year.

        :param maturity_factor: The maturity_factor of this Auction.
        :type: float
        """

        self._maturity_factor = maturity_factor

    @property
    def interest_rate_alpha(self):
        """
        Gets the interest_rate_alpha of this Auction.
        Interest rate alpha

        :return: The interest_rate_alpha of this Auction.
        :rtype: float
        """
        return self._interest_rate_alpha

    @interest_rate_alpha.setter
    def interest_rate_alpha(self, interest_rate_alpha):
        """
        Sets the interest_rate_alpha of this Auction.
        Interest rate alpha

        :param interest_rate_alpha: The interest_rate_alpha of this Auction.
        :type: float
        """

        self._interest_rate_alpha = interest_rate_alpha

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
