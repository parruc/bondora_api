# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class LoanTransfer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, date=None, principal_amount=None, interest_amount=None, interest_amount_carried_over=None, penalty_amount_carried_over=None, total_amount=None):
        """
        LoanTransfer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'date': 'datetime',
            'principal_amount': 'float',
            'interest_amount': 'float',
            'interest_amount_carried_over': 'float',
            'penalty_amount_carried_over': 'float',
            'total_amount': 'float'
        }

        self.attribute_map = {
            'date': 'Date',
            'principal_amount': 'PrincipalAmount',
            'interest_amount': 'InterestAmount',
            'interest_amount_carried_over': 'InterestAmountCarriedOver',
            'penalty_amount_carried_over': 'PenaltyAmountCarriedOver',
            'total_amount': 'TotalAmount'
        }

        self._date = date
        self._principal_amount = principal_amount
        self._interest_amount = interest_amount
        self._interest_amount_carried_over = interest_amount_carried_over
        self._penalty_amount_carried_over = penalty_amount_carried_over
        self._total_amount = total_amount

    @property
    def date(self):
        """
        Gets the date of this LoanTransfer.
        Payment date

        :return: The date of this LoanTransfer.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this LoanTransfer.
        Payment date

        :param date: The date of this LoanTransfer.
        :type: datetime
        """

        self._date = date

    @property
    def principal_amount(self):
        """
        Gets the principal_amount of this LoanTransfer.
        Principal amount

        :return: The principal_amount of this LoanTransfer.
        :rtype: float
        """
        return self._principal_amount

    @principal_amount.setter
    def principal_amount(self, principal_amount):
        """
        Sets the principal_amount of this LoanTransfer.
        Principal amount

        :param principal_amount: The principal_amount of this LoanTransfer.
        :type: float
        """

        self._principal_amount = principal_amount

    @property
    def interest_amount(self):
        """
        Gets the interest_amount of this LoanTransfer.
        Interest amount

        :return: The interest_amount of this LoanTransfer.
        :rtype: float
        """
        return self._interest_amount

    @interest_amount.setter
    def interest_amount(self, interest_amount):
        """
        Sets the interest_amount of this LoanTransfer.
        Interest amount

        :param interest_amount: The interest_amount of this LoanTransfer.
        :type: float
        """

        self._interest_amount = interest_amount

    @property
    def interest_amount_carried_over(self):
        """
        Gets the interest_amount_carried_over of this LoanTransfer.
        Interest carried over amount

        :return: The interest_amount_carried_over of this LoanTransfer.
        :rtype: float
        """
        return self._interest_amount_carried_over

    @interest_amount_carried_over.setter
    def interest_amount_carried_over(self, interest_amount_carried_over):
        """
        Sets the interest_amount_carried_over of this LoanTransfer.
        Interest carried over amount

        :param interest_amount_carried_over: The interest_amount_carried_over of this LoanTransfer.
        :type: float
        """

        self._interest_amount_carried_over = interest_amount_carried_over

    @property
    def penalty_amount_carried_over(self):
        """
        Gets the penalty_amount_carried_over of this LoanTransfer.
        Penalty amount

        :return: The penalty_amount_carried_over of this LoanTransfer.
        :rtype: float
        """
        return self._penalty_amount_carried_over

    @penalty_amount_carried_over.setter
    def penalty_amount_carried_over(self, penalty_amount_carried_over):
        """
        Sets the penalty_amount_carried_over of this LoanTransfer.
        Penalty amount

        :param penalty_amount_carried_over: The penalty_amount_carried_over of this LoanTransfer.
        :type: float
        """

        self._penalty_amount_carried_over = penalty_amount_carried_over

    @property
    def total_amount(self):
        """
        Gets the total_amount of this LoanTransfer.
        Total amount

        :return: The total_amount of this LoanTransfer.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """
        Sets the total_amount of this LoanTransfer.
        Total amount

        :param total_amount: The total_amount of this LoanTransfer.
        :type: float
        """

        self._total_amount = total_amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
