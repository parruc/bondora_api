# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SecondMarketItemSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, number=None, start_date=None, planned_close_date=None, actual_close_date=None, user_cancelled_on=None, loan_part_id=None, desired_discount_rate_decimal_fraction=None, status_code=None):
        """
        SecondMarketItemSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'number': 'int',
            'start_date': 'datetime',
            'planned_close_date': 'datetime',
            'actual_close_date': 'datetime',
            'user_cancelled_on': 'datetime',
            'loan_part_id': 'str',
            'desired_discount_rate': 'float',
            'desired_discount_rate_decimal_fraction': 'float',
            'status_code': 'int'
        }

        self.attribute_map = {
            'id': 'Id',
            'number': 'Number',
            'start_date': 'StartDate',
            'planned_close_date': 'PlannedCloseDate',
            'actual_close_date': 'ActualCloseDate',
            'user_cancelled_on': 'UserCancelledOn',
            'loan_part_id': 'LoanPart_id',
            'desired_discount_rate': 'DesiredDiscountRate',
            'desired_discount_rate_decimal_fraction': 'DesiredDiscountRateDecimalFraction',
            'status_code': 'StatusCode'
        }

        self._desired_discount_rate = None
        self._id = id
        self._number = number
        self._start_date = start_date
        self._planned_close_date = planned_close_date
        self._actual_close_date = actual_close_date
        self._user_cancelled_on = user_cancelled_on
        self._loan_part_id = loan_part_id
        self._desired_discount_rate_decimal_fraction = desired_discount_rate_decimal_fraction
        self._status_code = status_code

    @property
    def id(self):
        """
        Gets the id of this SecondMarketItemSummary.
        Item unique identifier

        :return: The id of this SecondMarketItemSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SecondMarketItemSummary.
        Item unique identifier

        :param id: The id of this SecondMarketItemSummary.
        :type: str
        """

        self._id = id

    @property
    def number(self):
        """
        Gets the number of this SecondMarketItemSummary.
        Number

        :return: The number of this SecondMarketItemSummary.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this SecondMarketItemSummary.
        Number

        :param number: The number of this SecondMarketItemSummary.
        :type: int
        """

        self._number = number

    @property
    def start_date(self):
        """
        Gets the start_date of this SecondMarketItemSummary.
        Item start date

        :return: The start_date of this SecondMarketItemSummary.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this SecondMarketItemSummary.
        Item start date

        :param start_date: The start_date of this SecondMarketItemSummary.
        :type: datetime
        """

        self._start_date = start_date

    @property
    def planned_close_date(self):
        """
        Gets the planned_close_date of this SecondMarketItemSummary.
        Planned close date

        :return: The planned_close_date of this SecondMarketItemSummary.
        :rtype: datetime
        """
        return self._planned_close_date

    @planned_close_date.setter
    def planned_close_date(self, planned_close_date):
        """
        Sets the planned_close_date of this SecondMarketItemSummary.
        Planned close date

        :param planned_close_date: The planned_close_date of this SecondMarketItemSummary.
        :type: datetime
        """

        self._planned_close_date = planned_close_date

    @property
    def actual_close_date(self):
        """
        Gets the actual_close_date of this SecondMarketItemSummary.
        Actual close date

        :return: The actual_close_date of this SecondMarketItemSummary.
        :rtype: datetime
        """
        return self._actual_close_date

    @actual_close_date.setter
    def actual_close_date(self, actual_close_date):
        """
        Sets the actual_close_date of this SecondMarketItemSummary.
        Actual close date

        :param actual_close_date: The actual_close_date of this SecondMarketItemSummary.
        :type: datetime
        """

        self._actual_close_date = actual_close_date

    @property
    def user_cancelled_on(self):
        """
        Gets the user_cancelled_on of this SecondMarketItemSummary.
        User cancelled on

        :return: The user_cancelled_on of this SecondMarketItemSummary.
        :rtype: datetime
        """
        return self._user_cancelled_on

    @user_cancelled_on.setter
    def user_cancelled_on(self, user_cancelled_on):
        """
        Sets the user_cancelled_on of this SecondMarketItemSummary.
        User cancelled on

        :param user_cancelled_on: The user_cancelled_on of this SecondMarketItemSummary.
        :type: datetime
        """

        self._user_cancelled_on = user_cancelled_on

    @property
    def loan_part_id(self):
        """
        Gets the loan_part_id of this SecondMarketItemSummary.
        LoanPart being sold

        :return: The loan_part_id of this SecondMarketItemSummary.
        :rtype: str
        """
        return self._loan_part_id

    @loan_part_id.setter
    def loan_part_id(self, loan_part_id):
        """
        Sets the loan_part_id of this SecondMarketItemSummary.
        LoanPart being sold

        :param loan_part_id: The loan_part_id of this SecondMarketItemSummary.
        :type: str
        """

        self._loan_part_id = loan_part_id

    @property
    def desired_discount_rate(self):
        """
        Gets the desired_discount_rate of this SecondMarketItemSummary.
        Discount rate percent

        :return: The desired_discount_rate of this SecondMarketItemSummary.
        :rtype: float
        """
        return self._desired_discount_rate

    @property
    def desired_discount_rate_decimal_fraction(self):
        """
        Gets the desired_discount_rate_decimal_fraction of this SecondMarketItemSummary.
        Discount rate as fraction (0.0 - 1.0)

        :return: The desired_discount_rate_decimal_fraction of this SecondMarketItemSummary.
        :rtype: float
        """
        return self._desired_discount_rate_decimal_fraction

    @desired_discount_rate_decimal_fraction.setter
    def desired_discount_rate_decimal_fraction(self, desired_discount_rate_decimal_fraction):
        """
        Sets the desired_discount_rate_decimal_fraction of this SecondMarketItemSummary.
        Discount rate as fraction (0.0 - 1.0)

        :param desired_discount_rate_decimal_fraction: The desired_discount_rate_decimal_fraction of this SecondMarketItemSummary.
        :type: float
        """

        self._desired_discount_rate_decimal_fraction = desired_discount_rate_decimal_fraction

    @property
    def status_code(self):
        """
        Gets the status_code of this SecondMarketItemSummary.
        Current status code              <para>0 Created</para><para>1 Open in marketplace</para><para>2 Successfully sold</para><para>3 Failed</para>

        :return: The status_code of this SecondMarketItemSummary.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this SecondMarketItemSummary.
        Current status code              <para>0 Created</para><para>1 Open in marketplace</para><para>2 Successfully sold</para><para>3 Failed</para>

        :param status_code: The status_code of this SecondMarketItemSummary.
        :type: int
        """
        allowed_values = [0, 1, 2, 3]
        if status_code not in allowed_values:
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
