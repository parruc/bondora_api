# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReportApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def report_generate_report(self, request, **kwargs):
        """
        Request to generate specified report type for set period.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.report_generate_report(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ReportCreateRequest request:  (required)
        :return: ApiResultCreateReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.report_generate_report_with_http_info(request, **kwargs)
        else:
            (data) = self.report_generate_report_with_http_info(request, **kwargs)
            return data

    def report_generate_report_with_http_info(self, request, **kwargs):
        """
        Request to generate specified report type for set period.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.report_generate_report_with_http_info(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ReportCreateRequest request:  (required)
        :return: ApiResultCreateReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_generate_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `report_generate_report`")

        resource_path = '/api/v1/report'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultCreateReport',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def report_get_public_dataset(self, **kwargs):
        """
        Provides daily public dataset of all loan data that is not covered by the data protection laws.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.report_get_public_dataset(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] request_loan_ids: Specific loans to search
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param datetime request_loan_date_from: Loan start date from
        :param datetime request_loan_date_to: Loan start date to
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultPublicDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.report_get_public_dataset_with_http_info(**kwargs)
        else:
            (data) = self.report_get_public_dataset_with_http_info(**kwargs)
            return data

    def report_get_public_dataset_with_http_info(self, **kwargs):
        """
        Provides daily public dataset of all loan data that is not covered by the data protection laws.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.report_get_public_dataset_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] request_loan_ids: Specific loans to search
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param datetime request_loan_date_from: Loan start date from
        :param datetime request_loan_date_to: Loan start date to
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultPublicDataset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_loan_ids', 'request_countries', 'request_ratings', 'request_loan_date_from', 'request_loan_date_to', 'request_page_size', 'request_page_nr']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_get_public_dataset" % key
                )
            params[key] = val
        del params['kwargs']

        if 'request_page_size' in params and params['request_page_size'] > 10000.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `report_get_public_dataset`, must be a value less than or equal to  `10000.0`")
        if 'request_page_size' in params and params['request_page_size'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `report_get_public_dataset`, must be a value greater than or equal to `1.0`")
        if 'request_page_nr' in params and params['request_page_nr'] > 2.147483647E9:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `report_get_public_dataset`, must be a value less than or equal to  `2.147483647E9`")
        if 'request_page_nr' in params and params['request_page_nr'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `report_get_public_dataset`, must be a value greater than or equal to `1.0`")
        resource_path = '/api/v1/publicdataset'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'request_loan_ids' in params:
            query_params['request.loanIds'] = params['request_loan_ids']
        if 'request_countries' in params:
            query_params['request.countries'] = params['request_countries']
        if 'request_ratings' in params:
            query_params['request.ratings'] = params['request_ratings']
        if 'request_loan_date_from' in params:
            query_params['request.loanDateFrom'] = params['request_loan_date_from']
        if 'request_loan_date_to' in params:
            query_params['request.loanDateTo'] = params['request_loan_date_to']
        if 'request_page_size' in params:
            query_params['request.pageSize'] = params['request_page_size']
        if 'request_page_nr' in params:
            query_params['request.pageNr'] = params['request_page_nr']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultPublicDataset',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def report_get_report(self, id, **kwargs):
        """
        Get report data for specified report identificator.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.report_get_report(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ReportId (required)
        :return: ApiResultReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.report_get_report_with_http_info(id, **kwargs)
        else:
            (data) = self.report_get_report_with_http_info(id, **kwargs)
            return data

    def report_get_report_with_http_info(self, id, **kwargs):
        """
        Get report data for specified report identificator.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.report_get_report_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: ReportId (required)
        :return: ApiResultReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_get_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `report_get_report`")

        resource_path = '/api/v1/report/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultReport',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def report_get_report_list(self, **kwargs):
        """
        List of all reports
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.report_get_report_list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ApiResultReportList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.report_get_report_list_with_http_info(**kwargs)
        else:
            (data) = self.report_get_report_list_with_http_info(**kwargs)
            return data

    def report_get_report_list_with_http_info(self, **kwargs):
        """
        List of all reports
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.report_get_report_list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ApiResultReportList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_get_report_list" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/v1/reports'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultReportList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
