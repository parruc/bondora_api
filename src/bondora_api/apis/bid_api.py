# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BidApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def bid_cancel_bid(self, id, **kwargs):
        """
        Cancel the Bid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bid_cancel_bid(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Bid identificator (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bid_cancel_bid_with_http_info(id, **kwargs)
        else:
            (data) = self.bid_cancel_bid_with_http_info(id, **kwargs)
            return data

    def bid_cancel_bid_with_http_info(self, id, **kwargs):
        """
        Cancel the Bid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bid_cancel_bid_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Bid identificator (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bid_cancel_bid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bid_cancel_bid`")

        resource_path = '/api/v1/bid/{id}/cancel'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def bid_get_bid(self, id, **kwargs):
        """
        Get the Bid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bid_get_bid(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Bid identificator (required)
        :return: ApiResultBid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bid_get_bid_with_http_info(id, **kwargs)
        else:
            (data) = self.bid_get_bid_with_http_info(id, **kwargs)
            return data

    def bid_get_bid_with_http_info(self, id, **kwargs):
        """
        Get the Bid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bid_get_bid_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Bid identificator (required)
        :return: ApiResultBid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bid_get_bid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bid_get_bid`")

        resource_path = '/api/v1/bid/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultBid',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def bid_get_bid_summaries(self, **kwargs):
        """
        Gets list of bids the investor has made.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bid_get_bid_summaries(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int request_bid_status_code: Bid status code
        :param datetime request_start_date: Start date
        :param datetime request_end_date: End date
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultBids
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bid_get_bid_summaries_with_http_info(**kwargs)
        else:
            (data) = self.bid_get_bid_summaries_with_http_info(**kwargs)
            return data

    def bid_get_bid_summaries_with_http_info(self, **kwargs):
        """
        Gets list of bids the investor has made.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bid_get_bid_summaries_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int request_bid_status_code: Bid status code
        :param datetime request_start_date: Start date
        :param datetime request_end_date: End date
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultBids
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_bid_status_code', 'request_start_date', 'request_end_date', 'request_page_size', 'request_page_nr']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bid_get_bid_summaries" % key
                )
            params[key] = val
        del params['kwargs']

        if 'request_page_size' in params and params['request_page_size'] > 1000.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `bid_get_bid_summaries`, must be a value less than or equal to  `1000.0`")
        if 'request_page_size' in params and params['request_page_size'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `bid_get_bid_summaries`, must be a value greater than or equal to `1.0`")
        if 'request_page_nr' in params and params['request_page_nr'] > 2.147483647E9:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `bid_get_bid_summaries`, must be a value less than or equal to  `2.147483647E9`")
        if 'request_page_nr' in params and params['request_page_nr'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `bid_get_bid_summaries`, must be a value greater than or equal to `1.0`")
        resource_path = '/api/v1/bids'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'request_bid_status_code' in params:
            query_params['request.bidStatusCode'] = params['request_bid_status_code']
        if 'request_start_date' in params:
            query_params['request.startDate'] = params['request_start_date']
        if 'request_end_date' in params:
            query_params['request.endDate'] = params['request_end_date']
        if 'request_page_size' in params:
            query_params['request.pageSize'] = params['request_page_size']
        if 'request_page_nr' in params:
            query_params['request.pageNr'] = params['request_page_nr']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultBids',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def bid_make_bids(self, bid_request, **kwargs):
        """
        Makes bid(s) into specified auction(s).
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bid_make_bids(bid_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BidRequest bid_request:  (required)
        :return: ApiResultMakeBids
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.bid_make_bids_with_http_info(bid_request, **kwargs)
        else:
            (data) = self.bid_make_bids_with_http_info(bid_request, **kwargs)
            return data

    def bid_make_bids_with_http_info(self, bid_request, **kwargs):
        """
        Makes bid(s) into specified auction(s).
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bid_make_bids_with_http_info(bid_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BidRequest bid_request:  (required)
        :return: ApiResultMakeBids
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bid_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bid_make_bids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bid_request' is set
        if ('bid_request' not in params) or (params['bid_request'] is None):
            raise ValueError("Missing the required parameter `bid_request` when calling `bid_make_bids`")

        resource_path = '/api/v1/bid'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'bid_request' in params:
            body_params = params['bid_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultMakeBids',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
