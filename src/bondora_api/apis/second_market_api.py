# coding: utf-8

"""
    Bondora API V1

    Bondora API version 1

    OpenAPI spec version: v1
    Contact: investor@bondora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import re
import sys

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient
from ..configuration import Configuration


class SecondMarketApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def second_market_buy(self, buy_request, **kwargs):
        """
        Buy loans from secondary market.


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_buy(buy_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SecondMarketBuyRequest buy_request:  (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.second_market_buy_with_http_info(buy_request, **kwargs)
        else:
            (data) = self.second_market_buy_with_http_info(buy_request, **kwargs)
            return data

    def second_market_buy_with_http_info(self, buy_request, **kwargs):
        """
        Buy loans from secondary market.


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_buy_with_http_info(buy_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SecondMarketBuyRequest buy_request:  (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['buy_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method second_market_buy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'buy_request' is set
        if ('buy_request' not in params) or (params['buy_request'] is None):
            raise ValueError("Missing the required parameter `buy_request` when calling `second_market_buy`")

        resource_path = '/api/v1/secondarymarket/buy'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'buy_request' in params:
            body_params = params['buy_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def second_market_cancel(self, id, **kwargs):
        """
        Remove your loans from secondary market.


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_cancel(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.second_market_cancel_with_http_info(id, **kwargs)
        else:
            (data) = self.second_market_cancel_with_http_info(id, **kwargs)
            return data

    def second_market_cancel_with_http_info(self, id, **kwargs):
        """
        Remove your loans from secondary market.


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_cancel_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id:  (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method second_market_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `second_market_cancel`")

        resource_path = '/api/v1/secondarymarket/{id}/cancel'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def second_market_cancel_multiple(self, cancel_request, **kwargs):
        """
        Remove your loans from secondary market.


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_cancel_multiple(cancel_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SecondMarketCancelRequest cancel_request:  (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.second_market_cancel_multiple_with_http_info(cancel_request, **kwargs)
        else:
            (data) = self.second_market_cancel_multiple_with_http_info(cancel_request, **kwargs)
            return data

    def second_market_cancel_multiple_with_http_info(self, cancel_request, **kwargs):
        """
        Remove your loans from secondary market.


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_cancel_multiple_with_http_info(cancel_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SecondMarketCancelRequest cancel_request:  (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cancel_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method second_market_cancel_multiple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cancel_request' is set
        if ('cancel_request' not in params) or (params['cancel_request'] is None):
            raise ValueError("Missing the required parameter `cancel_request` when calling `second_market_cancel_multiple`")

        resource_path = '/api/v1/secondarymarket/cancel'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cancel_request' in params:
            body_params = params['cancel_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def second_market_get(self, id, **kwargs):
        """
        Gets LoanPartDetails info by identifier


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: LoanPartDetails's identifier (required)
        :return: ApiResultLoanPartDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.second_market_get_with_http_info(id, **kwargs)
        else:
            (data) = self.second_market_get_with_http_info(id, **kwargs)
            return data

    def second_market_get_with_http_info(self, id, **kwargs):
        """
        Gets LoanPartDetails info by identifier


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: LoanPartDetails's identifier (required)
        :return: ApiResultLoanPartDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method second_market_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `second_market_get`")

        resource_path = '/api/v1/loanpart/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultLoanPartDetails',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def second_market_get_active(self, **kwargs):
        """
        Gets list of active secondary market items


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_get_active(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param datetime request_loan_issued_date_from: Loan issued start date from
        :param datetime request_loan_issued_date_to: Loan issued start date to
        :param float request_principal_min: Remaining principal amount min
        :param float request_principal_max: Remaining principal amount max
        :param float request_interest_min: Interest rate min
        :param float request_interest_max: Interest rate max
        :param int request_length_max: Loan lenght min
        :param int request_length_min: Loan lenght max
        :param bool request_has_debt: Is overdue
        :param list[int] request_loan_status_code: Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para>
        :param int request_loan_debt_management_stage_type: Latest debt management stage type
        :param datetime request_loan_debt_management_date_active_from: Latest debt management date active from
        :param datetime request_loan_debt_management_date_active_to: Latest debt management date active to
        :param float request_late_principal_amount_min: Principal debt amount min
        :param float request_late_principal_amount_max: Principal debt amount max
        :param float request_price_min: Price amount min
        :param float request_price_max: Price amount max
        :param int request_use_of_loan: Use of loan
        :param bool request_has_new_schedule: Has been rescheduled
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param int request_credit_score_min: Minimum credit score
        :param int request_credit_score_max: Maximum credit score
        :param str request_user_name: Borrower's username
        :param int request_gender: Borrower's gender: Male 0, Female 1, Unknown 2
        :param int request_age_min: Minimal age
        :param int request_age_max: Maximum age
        :param int request_income_verification_status: Income verification type
        :param bool request_show_my_items: Can find your own items from market: Value Null = ALL, True = only your items, False = other user items
        :param str request_auction_id: Can find specific auction from market
        :param datetime request_listed_on_date_from: Date when item was published from
        :param datetime request_listed_on_date_to: Date when item was published to
        :param datetime request_debt_occured_on_from: Principal debt started date from
        :param datetime request_debt_occured_on_to: Principal debt started date to
        :param datetime request_debt_occured_on_for_secondary_from: Interest debt started date from
        :param datetime request_debt_occured_on_for_secondary_to: Interest debt started date to
        :param datetime request_defaulted_date_from: Defaulted date from
        :param datetime request_defaulted_date_to: Defaulted date to
        :param datetime request_rescheduled_from: Rescheduled date from
        :param datetime request_rescheduled_to: Rescheduled date to
        :param datetime request_last_payment_date_from: Last payment date from
        :param datetime request_last_payment_date_to: Last payment date to
        :param datetime request_next_payment_date_from: Next payment date from
        :param datetime request_next_payment_date_to: Next payment date to
        :param float request_desired_discount_rate_min: Minimal DesiredDiscountRate
        :param float request_desired_discount_rate_max: Maximal DesiredDiscountRate
        :param float request_xirr_min: Minimal Xirr
        :param float request_xirr_max: Maximal Xirr
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultSecondMarket
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.second_market_get_active_with_http_info(**kwargs)
        else:
            (data) = self.second_market_get_active_with_http_info(**kwargs)
            return data

    def second_market_get_active_with_http_info(self, **kwargs):
        """
        Gets list of active secondary market items


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_get_active_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param datetime request_loan_issued_date_from: Loan issued start date from
        :param datetime request_loan_issued_date_to: Loan issued start date to
        :param float request_principal_min: Remaining principal amount min
        :param float request_principal_max: Remaining principal amount max
        :param float request_interest_min: Interest rate min
        :param float request_interest_max: Interest rate max
        :param int request_length_max: Loan lenght min
        :param int request_length_min: Loan lenght max
        :param bool request_has_debt: Is overdue
        :param list[int] request_loan_status_code: Loan status code              <para>2 Current</para><para>100 Overdue</para><para>5 60+ days overdue</para>
        :param int request_loan_debt_management_stage_type: Latest debt management stage type
        :param datetime request_loan_debt_management_date_active_from: Latest debt management date active from
        :param datetime request_loan_debt_management_date_active_to: Latest debt management date active to
        :param float request_late_principal_amount_min: Principal debt amount min
        :param float request_late_principal_amount_max: Principal debt amount max
        :param float request_price_min: Price amount min
        :param float request_price_max: Price amount max
        :param int request_use_of_loan: Use of loan
        :param bool request_has_new_schedule: Has been rescheduled
        :param list[str] request_countries: Two letter iso code for country of origin: EE, ES, FI
        :param list[str] request_ratings: Bondora's rating: AA, A, B, C, D, E, F, HR
        :param int request_credit_score_min: Minimum credit score
        :param int request_credit_score_max: Maximum credit score
        :param str request_user_name: Borrower's username
        :param int request_gender: Borrower's gender: Male 0, Female 1, Unknown 2
        :param int request_age_min: Minimal age
        :param int request_age_max: Maximum age
        :param int request_income_verification_status: Income verification type
        :param bool request_show_my_items: Can find your own items from market: Value Null = ALL, True = only your items, False = other user items
        :param str request_auction_id: Can find specific auction from market
        :param datetime request_listed_on_date_from: Date when item was published from
        :param datetime request_listed_on_date_to: Date when item was published to
        :param datetime request_debt_occured_on_from: Principal debt started date from
        :param datetime request_debt_occured_on_to: Principal debt started date to
        :param datetime request_debt_occured_on_for_secondary_from: Interest debt started date from
        :param datetime request_debt_occured_on_for_secondary_to: Interest debt started date to
        :param datetime request_defaulted_date_from: Defaulted date from
        :param datetime request_defaulted_date_to: Defaulted date to
        :param datetime request_rescheduled_from: Rescheduled date from
        :param datetime request_rescheduled_to: Rescheduled date to
        :param datetime request_last_payment_date_from: Last payment date from
        :param datetime request_last_payment_date_to: Last payment date to
        :param datetime request_next_payment_date_from: Next payment date from
        :param datetime request_next_payment_date_to: Next payment date to
        :param float request_desired_discount_rate_min: Minimal DesiredDiscountRate
        :param float request_desired_discount_rate_max: Maximal DesiredDiscountRate
        :param float request_xirr_min: Minimal Xirr
        :param float request_xirr_max: Maximal Xirr
        :param int request_page_size: Max items in result, default is 1000
        :param int request_page_nr: Result page nr
        :return: ApiResultSecondMarket
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_loan_issued_date_from', 'request_loan_issued_date_to', 'request_principal_min', 'request_principal_max', 'request_interest_min', 'request_interest_max', 'request_length_max', 'request_length_min', 'request_has_debt', 'request_loan_status_code', 'request_loan_debt_management_stage_type', 'request_loan_debt_management_date_active_from', 'request_loan_debt_management_date_active_to', 'request_late_principal_amount_min', 'request_late_principal_amount_max', 'request_price_min', 'request_price_max', 'request_use_of_loan', 'request_has_new_schedule', 'request_countries', 'request_ratings', 'request_credit_score_min', 'request_credit_score_max', 'request_user_name', 'request_gender', 'request_age_min', 'request_age_max', 'request_income_verification_status', 'request_show_my_items', 'request_auction_id', 'request_listed_on_date_from', 'request_listed_on_date_to', 'request_debt_occured_on_from', 'request_debt_occured_on_to', 'request_debt_occured_on_for_secondary_from', 'request_debt_occured_on_for_secondary_to', 'request_defaulted_date_from', 'request_defaulted_date_to', 'request_rescheduled_from', 'request_rescheduled_to', 'request_last_payment_date_from', 'request_last_payment_date_to', 'request_next_payment_date_from', 'request_next_payment_date_to', 'request_desired_discount_rate_min', 'request_desired_discount_rate_max', 'request_xirr_min', 'request_xirr_max', 'request_page_size', 'request_page_nr']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method second_market_get_active" % key
                )
            params[key] = val
        del params['kwargs']

        if 'request_page_size' in params and params['request_page_size'] > 1000.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `second_market_get_active`, must be a value less than or equal to  `1000.0`")
        if 'request_page_size' in params and params['request_page_size'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_size` when calling `second_market_get_active`, must be a value greater than or equal to `1.0`")
        if 'request_page_nr' in params and params['request_page_nr'] > 2.147483647E9:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `second_market_get_active`, must be a value less than or equal to  `2.147483647E9`")
        if 'request_page_nr' in params and params['request_page_nr'] < 1.0:
            raise ValueError("Invalid value for parameter `request_page_nr` when calling `second_market_get_active`, must be a value greater than or equal to `1.0`")
        resource_path = '/api/v1/secondarymarket'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'request_loan_issued_date_from' in params:
            query_params['request.loanIssuedDateFrom'] = params['request_loan_issued_date_from']
        if 'request_loan_issued_date_to' in params:
            query_params['request.loanIssuedDateTo'] = params['request_loan_issued_date_to']
        if 'request_principal_min' in params:
            query_params['request.principalMin'] = params['request_principal_min']
        if 'request_principal_max' in params:
            query_params['request.principalMax'] = params['request_principal_max']
        if 'request_interest_min' in params:
            query_params['request.interestMin'] = params['request_interest_min']
        if 'request_interest_max' in params:
            query_params['request.interestMax'] = params['request_interest_max']
        if 'request_length_max' in params:
            query_params['request.lengthMax'] = params['request_length_max']
        if 'request_length_min' in params:
            query_params['request.lengthMin'] = params['request_length_min']
        if 'request_has_debt' in params:
            query_params['request.hasDebt'] = params['request_has_debt']
        if 'request_loan_status_code' in params:
            query_params['request.loanStatusCode'] = params['request_loan_status_code']
        if 'request_loan_debt_management_stage_type' in params:
            query_params['request.loanDebtManagementStageType'] = params['request_loan_debt_management_stage_type']
        if 'request_loan_debt_management_date_active_from' in params:
            query_params['request.loanDebtManagementDateActiveFrom'] = params['request_loan_debt_management_date_active_from']
        if 'request_loan_debt_management_date_active_to' in params:
            query_params['request.loanDebtManagementDateActiveTo'] = params['request_loan_debt_management_date_active_to']
        if 'request_late_principal_amount_min' in params:
            query_params['request.latePrincipalAmountMin'] = params['request_late_principal_amount_min']
        if 'request_late_principal_amount_max' in params:
            query_params['request.latePrincipalAmountMax'] = params['request_late_principal_amount_max']
        if 'request_price_min' in params:
            query_params['request.priceMin'] = params['request_price_min']
        if 'request_price_max' in params:
            query_params['request.priceMax'] = params['request_price_max']
        if 'request_use_of_loan' in params:
            query_params['request.useOfLoan'] = params['request_use_of_loan']
        if 'request_has_new_schedule' in params:
            query_params['request.hasNewSchedule'] = params['request_has_new_schedule']
        if 'request_countries' in params:
            query_params['request.countries'] = params['request_countries']
        if 'request_ratings' in params:
            query_params['request.ratings'] = params['request_ratings']
        if 'request_credit_score_min' in params:
            query_params['request.creditScoreMin'] = params['request_credit_score_min']
        if 'request_credit_score_max' in params:
            query_params['request.creditScoreMax'] = params['request_credit_score_max']
        if 'request_user_name' in params:
            query_params['request.userName'] = params['request_user_name']
        if 'request_gender' in params:
            query_params['request.gender'] = params['request_gender']
        if 'request_age_min' in params:
            query_params['request.ageMin'] = params['request_age_min']
        if 'request_age_max' in params:
            query_params['request.ageMax'] = params['request_age_max']
        if 'request_income_verification_status' in params:
            query_params['request.incomeVerificationStatus'] = params['request_income_verification_status']
        if 'request_show_my_items' in params:
            query_params['request.showMyItems'] = params['request_show_my_items']
        if 'request_auction_id' in params:
            query_params['request.auctionId'] = params['request_auction_id']
        if 'request_listed_on_date_from' in params:
            query_params['request.listedOnDateFrom'] = params['request_listed_on_date_from']
        if 'request_listed_on_date_to' in params:
            query_params['request.listedOnDateTo'] = params['request_listed_on_date_to']
        if 'request_debt_occured_on_from' in params:
            query_params['request.debtOccuredOnFrom'] = params['request_debt_occured_on_from']
        if 'request_debt_occured_on_to' in params:
            query_params['request.debtOccuredOnTo'] = params['request_debt_occured_on_to']
        if 'request_debt_occured_on_for_secondary_from' in params:
            query_params['request.debtOccuredOnForSecondaryFrom'] = params['request_debt_occured_on_for_secondary_from']
        if 'request_debt_occured_on_for_secondary_to' in params:
            query_params['request.debtOccuredOnForSecondaryTo'] = params['request_debt_occured_on_for_secondary_to']
        if 'request_defaulted_date_from' in params:
            query_params['request.defaultedDateFrom'] = params['request_defaulted_date_from']
        if 'request_defaulted_date_to' in params:
            query_params['request.defaultedDateTo'] = params['request_defaulted_date_to']
        if 'request_rescheduled_from' in params:
            query_params['request.rescheduledFrom'] = params['request_rescheduled_from']
        if 'request_rescheduled_to' in params:
            query_params['request.rescheduledTo'] = params['request_rescheduled_to']
        if 'request_last_payment_date_from' in params:
            query_params['request.lastPaymentDateFrom'] = params['request_last_payment_date_from']
        if 'request_last_payment_date_to' in params:
            query_params['request.lastPaymentDateTo'] = params['request_last_payment_date_to']
        if 'request_next_payment_date_from' in params:
            query_params['request.nextPaymentDateFrom'] = params['request_next_payment_date_from']
        if 'request_next_payment_date_to' in params:
            query_params['request.nextPaymentDateTo'] = params['request_next_payment_date_to']
        if 'request_desired_discount_rate_min' in params:
            query_params['request.desiredDiscountRateMin'] = params['request_desired_discount_rate_min']
        if 'request_desired_discount_rate_max' in params:
            query_params['request.desiredDiscountRateMax'] = params['request_desired_discount_rate_max']
        if 'request_xirr_min' in params:
            query_params['request.xirrMin'] = params['request_xirr_min']
        if 'request_xirr_max' in params:
            query_params['request.xirrMax'] = params['request_xirr_max']
        if 'request_page_size' in params:
            query_params['request.pageSize'] = params['request_page_size']
        if 'request_page_nr' in params:
            query_params['request.pageNr'] = params['request_page_nr']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ["oauth2"]

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultSecondMarket',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def second_market_get_item(self, id, **kwargs):
        """
        Get the secondary market item summary


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_get_item(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: SecondaryMarket item identificator (required)
        :return: ApiResultSecondMarketItemSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.second_market_get_item_with_http_info(id, **kwargs)
        else:
            (data) = self.second_market_get_item_with_http_info(id, **kwargs)
            return data

    def second_market_get_item_with_http_info(self, id, **kwargs):
        """
        Get the secondary market item summary


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_get_item_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: SecondaryMarket item identificator (required)
        :return: ApiResultSecondMarketItemSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method second_market_get_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `second_market_get_item`")

        resource_path = '/api/v1/secondarymarket/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultSecondMarketItemSummary',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def second_market_sell(self, sale_request, **kwargs):
        """
        Sell your loans to secondary market.


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_sell(sale_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SecondMarketSaleRequest sale_request:  (required)
        :return: ApiResultSecondMarketSale
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.second_market_sell_with_http_info(sale_request, **kwargs)
        else:
            (data) = self.second_market_sell_with_http_info(sale_request, **kwargs)
            return data

    def second_market_sell_with_http_info(self, sale_request, **kwargs):
        """
        Sell your loans to secondary market.


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.second_market_sell_with_http_info(sale_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SecondMarketSaleRequest sale_request:  (required)
        :return: ApiResultSecondMarketSale
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sale_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method second_market_sell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sale_request' is set
        if ('sale_request' not in params) or (params['sale_request'] is None):
            raise ValueError("Missing the required parameter `sale_request` when calling `second_market_sell`")

        resource_path = '/api/v1/secondarymarket/sell'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sale_request' in params:
            body_params = params['sale_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ApiResultSecondMarketSale',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
